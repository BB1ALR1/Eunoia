{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  schema: \"./shared/schema.ts\",\n  out: \"./migrations\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL || \"\",\n  },\n});","size_bytes":223},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Eunoia - AI-Powered Therapy Chat Application\n\n## Overview\n\nEunoia is a comprehensive AI-powered therapy chat application that provides users with personalized mental health support through multiple AI therapist personalities. The application combines real-time chat functionality, voice interaction capabilities, and therapeutic tools to create an immersive therapy experience. It features crisis detection systems, journaling capabilities, mood tracking, CBT tools, and session management with detailed summaries.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **State Management**: React Query (TanStack Query) for server state management and caching\n- **Routing**: Custom routing system using Wouter for client-side navigation\n- **UI Components**: Radix UI primitives with custom styling for accessibility and consistency\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **API Design**: RESTful API endpoints for session, message, and user management\n- **Middleware**: Custom logging middleware for request/response tracking\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Database Provider**: Neon serverless PostgreSQL for scalable cloud database\n- **Schema Management**: Shared schema definitions between frontend and backend\n- **Migration System**: Drizzle Kit for automated database migrations\n- **Tables**: Users, sessions, messages, crisis events, journal entries, mood entries\n\n### AI Integration Architecture\n- **Primary AI Service**: Multiple AI providers including Anthropic Claude, Google GenAI, and OpenAI\n- **Therapist Personalities**: Four distinct AI personas with specialized system prompts and therapeutic approaches\n- **Crisis Detection**: Real-time keyword analysis for mental health crisis intervention\n- **Response Processing**: Contextual AI responses based on session history and user goals\n\n### Authentication & Session Management\n- **User Authentication**: Complete login/signup system with secure password hashing (bcrypt)\n- **Session Storage**: PostgreSQL-backed express-session with connect-pg-simple\n- **Data Isolation**: All user data (sessions, messages, journal entries, mood data) protected by user_id foreign keys\n- **Password Security**: Bcrypt hashing with salt rounds for secure password storage\n- **Frontend Auth**: React hooks for authentication state management and protected routes\n- **Session Persistence**: Secure session cookies with database session storage\n- **User Registration**: New user registration with immediate login after signup\n\n### Voice Integration\n- **Speech Recognition**: Browser-native Web Speech API for voice input\n- **Text-to-Speech**: Browser-native Speech Synthesis API for voice responses\n- **Real-time Processing**: Seamless switching between text and voice modes\n- **Audio Controls**: Full control over speech playback and recording\n\n## External Dependencies\n\n### AI Services\n- **Anthropic AI SDK**: Claude AI models for advanced conversational therapy\n- **Google GenAI**: Google's generative AI models for diverse response generation\n- **AIML API**: Alternative AI service provider for redundancy and model diversity\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL with connection pooling\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL support\n- **Connect-PG-Simple**: PostgreSQL session store for Express sessions\n\n### UI Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Shadcn/ui**: Pre-built component library built on Radix and Tailwind\n- **Class Variance Authority**: Type-safe component variants\n- **CLSX & Tailwind Merge**: Dynamic className handling\n\n### Speech & Audio\n- **Web Speech API**: Browser-native speech recognition and synthesis\n- **Speech Recognition**: Cross-browser speech-to-text functionality\n- **Speech Synthesis**: Text-to-speech with voice selection capabilities\n\n### Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n\n### Monitoring & Analytics\n- **Custom Logging**: Request/response logging middleware\n- **Error Tracking**: Centralized error handling and reporting\n- **Session Analytics**: Detailed session duration and interaction tracking","size_bytes":4859},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve uploaded files statically\napp.use('/uploads', express.static(path.join(process.cwd(), 'public', 'uploads')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":2210},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer } from \"http\";\nimport { db } from \"../shared/db\";\nimport { sessions, messages, users, journalEntries, moodEntries, insertUserSchema, insertSessionSchema, insertMessageSchema, insertJournalEntrySchema, insertMoodEntrySchema } from \"../shared/schema\";\nimport { eq, desc, or } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Extend session types\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: number;\n    username: string;\n  }\n}\n\nexport function registerRoutes(app: Express) {\n  const server = createServer(app);\n\n  // Create uploads directory if it doesn't exist\n  const uploadsDir = path.join(process.cwd(), 'public', 'uploads');\n  if (!fs.existsSync(uploadsDir)) {\n    fs.mkdirSync(uploadsDir, { recursive: true });\n  }\n\n  // Multer configuration for file uploads\n  const storage = multer.diskStorage({\n    destination: (req, file, cb) => {\n      cb(null, uploadsDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, `profile-${uniqueSuffix}${path.extname(file.originalname)}`);\n    }\n  });\n\n  const upload = multer({\n    storage,\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = /jpeg|jpg|png|gif|webp/;\n      const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n      const mimetype = allowedTypes.test(file.mimetype);\n\n      if (mimetype && extname) {\n        return cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed'));\n      }\n    }\n  });\n\n  // Session configuration\n  const pgStore = connectPg(session);\n  app.use(session({\n    store: new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || 'your-secret-key-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  }));\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!(req.session as any).userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Authentication routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { username, email, password } = req.body;\n      \n      if (!username || !email || !password) {\n        return res.status(400).json({ message: \"Username, email, and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({ message: \"Please enter a valid email address\" });\n      }\n\n      // Check if username or email already exists\n      const existingUser = await db.select().from(users).where(\n        or(eq(users.username, username), eq(users.email, email))\n      ).limit(1);\n      if (existingUser.length > 0) {\n        const existing = existingUser[0];\n        if (existing.username === username) {\n          return res.status(400).json({ message: \"Username already exists\" });\n        } else {\n          return res.status(400).json({ message: \"Email already exists\" });\n        }\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const [newUser] = await db\n        .insert(users)\n        .values({\n          username,\n          email,\n          password: hashedPassword,\n        })\n        .returning();\n\n      // Create session\n      (req.session as any).userId = newUser.id;\n      (req.session as any).username = newUser.username;\n\n      res.json({ \n        id: newUser.id, \n        username: newUser.username,\n        email: newUser.email,\n        message: \"Account created successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { usernameOrEmail, password } = req.body;\n      \n      if (!usernameOrEmail || !password) {\n        return res.status(400).json({ message: \"Username/email and password are required\" });\n      }\n\n      // Find user by username or email\n      const [user] = await db.select().from(users).where(\n        or(eq(users.username, usernameOrEmail), eq(users.email, usernameOrEmail))\n      ).limit(1);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username/email or password\" });\n      }\n\n      // Check password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid username/email or password\" });\n      }\n\n      // Create session\n      (req.session as any).userId = user.id;\n      (req.session as any).username = user.username;\n\n      res.json({ \n        id: user.id, \n        username: user.username,\n        email: user.email,\n        message: \"Logged in successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error logging in:\", error);\n      res.status(500).json({ message: \"Failed to log in\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Error destroying session:\", err);\n        return res.status(500).json({ message: \"Failed to log out\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/user\", requireAuth, async (req, res) => {\n    try {\n      const [user] = await db.select().from(users).where(eq(users.id, (req.session as any).userId)).limit(1);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Update user preferences\n  app.patch(\"/api/auth/preferences\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const { darkMode, therapistPersonality, selectedVoice, selectedGoals } = req.body;\n      \n      const updateData: any = {};\n      if (darkMode !== undefined) updateData.darkMode = darkMode;\n      if (therapistPersonality !== undefined) updateData.therapistPersonality = therapistPersonality;\n      if (selectedVoice !== undefined) updateData.selectedVoice = selectedVoice;\n      if (selectedGoals !== undefined) updateData.selectedGoals = selectedGoals;\n      \n      const [updatedUser] = await db\n        .update(users)\n        .set(updateData)\n        .where(eq(users.id, userId))\n        .returning();\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating preferences:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  // Protected sessions routes (now require authentication)\n  app.get(\"/api/sessions\", requireAuth, async (req, res) => {\n    try {\n      const userSessions = await db\n        .select()\n        .from(sessions)\n        .where(eq(sessions.userId, (req.session as any).userId))\n        .orderBy(desc(sessions.createdAt));\n      res.json(userSessions);\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch sessions\" });\n    }\n  });\n\n  // Get session by ID with messages (protected)\n  app.get(\"/api/sessions/:id\", requireAuth, async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const session = await db\n        .select()\n        .from(sessions)\n        .where(eq(sessions.id, sessionId))\n        .limit(1);\n      \n      if (!session.length) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      // Ensure session belongs to the authenticated user\n      if (session[0].userId !== (req.session as any).userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const sessionMessages = await db\n        .select()\n        .from(messages)\n        .where(eq(messages.sessionId, sessionId))\n        .orderBy(messages.createdAt);\n\n      res.json({ ...session[0], messages: sessionMessages });\n    } catch (error) {\n      console.error(\"Error fetching session:\", error);\n      res.status(500).json({ message: \"Failed to fetch session\" });\n    }\n  });\n\n  // Create new session (protected)\n  app.post(\"/api/sessions\", requireAuth, async (req, res) => {\n    try {\n      const { therapistPersonality, voiceEnabled, goals } = req.body;\n      \n      const [newSession] = await db\n        .insert(sessions)\n        .values({\n          userId: (req.session as any).userId,\n          therapistPersonality: therapistPersonality || \"empathetic\",\n          voiceEnabled: voiceEnabled || false,\n          goals: goals || [],\n          status: \"active\"\n        })\n        .returning();\n\n      res.json(newSession);\n    } catch (error) {\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ message: \"Failed to create session\" });\n    }\n  });\n\n  // Send message (protected)\n  app.post(\"/api/sessions/:sessionId/messages\", requireAuth, async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.sessionId);\n      const { content, isUser } = req.body;\n\n      // Verify session belongs to user\n      const session = await db.select().from(sessions).where(eq(sessions.id, sessionId)).limit(1);\n      if (!session.length || session[0].userId !== (req.session as any).userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Save user message\n      const [userMessage] = await db\n        .insert(messages)\n        .values({\n          sessionId,\n          content,\n          isUser: true,\n        })\n        .returning();\n\n      // For now, just return the user message without AI response\n      // In the future, you can add your own response logic here\n      res.json({ userMessage });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // End session (protected)\n  app.patch(\"/api/sessions/:id/end\", requireAuth, async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      \n      // Verify session belongs to user\n      const session = await db.select().from(sessions).where(eq(sessions.id, sessionId)).limit(1);\n      if (!session.length || session[0].userId !== (req.session as any).userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const [updatedSession] = await db\n        .update(sessions)\n        .set({ \n          status: \"completed\",\n          endedAt: new Date(),\n          summary: \"Session completed\" // Simple summary for now\n        })\n        .where(eq(sessions.id, sessionId))\n        .returning();\n\n      res.json(updatedSession);\n    } catch (error) {\n      console.error(\"Error ending session:\", error);\n      res.status(500).json({ message: \"Failed to end session\" });\n    }\n  });\n\n  // Get session summaries (protected)\n  app.get(\"/api/sessions/summaries\", requireAuth, async (req, res) => {\n    try {\n      const userSessions = await db\n        .select()\n        .from(sessions)\n        .where(eq(sessions.userId, (req.session as any).userId))\n        .orderBy(desc(sessions.createdAt));\n      res.json(userSessions);\n    } catch (error) {\n      console.error(\"Error fetching session summaries:\", error);\n      res.status(500).json({ message: \"Failed to fetch session summaries\" });\n    }\n  });\n\n  // Journal entries routes (protected)\n  app.get(\"/api/journal\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const userJournalEntries = await db\n        .select()\n        .from(journalEntries)\n        .where(eq(journalEntries.userId, userId))\n        .orderBy(desc(journalEntries.createdAt));\n      res.json(userJournalEntries);\n    } catch (error) {\n      console.error(\"Error fetching journal entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch journal entries\" });\n    }\n  });\n\n  app.post(\"/api/journal\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const { title, content, sessionId } = req.body;\n      \n      const [newEntry] = await db\n        .insert(journalEntries)\n        .values({\n          userId,\n          sessionId: sessionId || null,\n          title: title || null,\n          content,\n        })\n        .returning();\n\n      res.json(newEntry);\n    } catch (error) {\n      console.error(\"Error creating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to create journal entry\" });\n    }\n  });\n\n  app.delete(\"/api/journal/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const entryId = parseInt(req.params.id);\n      \n      if (!entryId || isNaN(entryId)) {\n        return res.status(400).json({ message: \"Invalid entry ID\" });\n      }\n\n      // First check if the entry exists and belongs to the user\n      const [existingEntry] = await db\n        .select()\n        .from(journalEntries)\n        .where(eq(journalEntries.id, entryId))\n        .limit(1);\n\n      if (!existingEntry) {\n        return res.status(404).json({ message: \"Journal entry not found\" });\n      }\n\n      if (existingEntry.userId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to delete this entry\" });\n      }\n\n      // Delete the entry\n      await db.delete(journalEntries).where(eq(journalEntries.id, entryId));\n      \n      res.json({ message: \"Journal entry deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting journal entry:\", error);\n      res.status(500).json({ message: \"Failed to delete journal entry\" });\n    }\n  });\n\n  // Mood entries routes (protected)\n  app.get(\"/api/mood\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const userMoodEntries = await db\n        .select()\n        .from(moodEntries)\n        .where(eq(moodEntries.userId, userId))\n        .orderBy(desc(moodEntries.createdAt));\n      res.json(userMoodEntries);\n    } catch (error) {\n      console.error(\"Error fetching mood entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch mood entries\" });\n    }\n  });\n\n  app.post(\"/api/mood\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const { moodScore, moodEmoji, notes, sessionId } = req.body;\n      \n      const [newEntry] = await db\n        .insert(moodEntries)\n        .values({\n          userId,\n          sessionId: sessionId || null,\n          moodScore,\n          moodEmoji: moodEmoji || null,\n          notes: notes || null,\n        })\n        .returning();\n\n      res.json(newEntry);\n    } catch (error) {\n      console.error(\"Error creating mood entry:\", error);\n      res.status(500).json({ message: \"Failed to create mood entry\" });\n    }\n  });\n\n  app.delete(\"/api/mood/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const entryId = parseInt(req.params.id);\n      \n      if (!entryId || isNaN(entryId)) {\n        return res.status(400).json({ message: \"Invalid entry ID\" });\n      }\n\n      // First check if the entry exists and belongs to the user\n      const [existingEntry] = await db\n        .select()\n        .from(moodEntries)\n        .where(eq(moodEntries.id, entryId))\n        .limit(1);\n\n      if (!existingEntry) {\n        return res.status(404).json({ message: \"Mood entry not found\" });\n      }\n\n      if (existingEntry.userId !== userId) {\n        return res.status(403).json({ message: \"Not authorized to delete this entry\" });\n      }\n\n      // Delete the entry\n      await db.delete(moodEntries).where(eq(moodEntries.id, entryId));\n      \n      res.json({ message: \"Mood entry deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting mood entry:\", error);\n      res.status(500).json({ message: \"Failed to delete mood entry\" });\n    }\n  });\n\n  // Account management routes\n  app.patch(\"/api/auth/change-password\", requireAuth, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current password and new password are required\" });\n      }\n\n      if (newPassword.length < 6) {\n        return res.status(400).json({ message: \"New password must be at least 6 characters long\" });\n      }\n\n      // Get current user\n      const [user] = await db.select().from(users).where(eq(users.id, (req.session as any).userId)).limit(1);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const isValidPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n\n      // Update password\n      await db\n        .update(users)\n        .set({ password: hashedNewPassword })\n        .where(eq(users.id, (req.session as any).userId));\n\n      res.json({ message: \"Password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  app.patch(\"/api/auth/update-profile\", requireAuth, async (req, res) => {\n    try {\n      const { username, email, profilePic } = req.body;\n      \n      if (!username || !email) {\n        return res.status(400).json({ message: \"Username and email are required\" });\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({ message: \"Please enter a valid email address\" });\n      }\n\n      // Check if username or email already exists (excluding current user)\n      const existingUser = await db.select().from(users).where(\n        or(eq(users.username, username), eq(users.email, email))\n      ).limit(1);\n      \n      if (existingUser.length > 0 && existingUser[0].id !== (req.session as any).userId) {\n        const existing = existingUser[0];\n        if (existing.username === username) {\n          return res.status(400).json({ message: \"Username already exists\" });\n        } else {\n          return res.status(400).json({ message: \"Email already exists\" });\n        }\n      }\n\n      // Update user profile\n      const [updatedUser] = await db\n        .update(users)\n        .set({ \n          username, \n          email, \n          profilePic: profilePic || null \n        })\n        .where(eq(users.id, (req.session as any).userId))\n        .returning();\n\n      // Update session username\n      (req.session as any).username = updatedUser.username;\n\n      res.json({ \n        id: updatedUser.id,\n        username: updatedUser.username,\n        email: updatedUser.email,\n        profilePic: updatedUser.profilePic,\n        message: \"Profile updated successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Profile picture upload endpoint\n  app.post(\"/api/auth/upload-profile-pic\", requireAuth, upload.single('profilePic'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const userId = (req.session as any).userId;\n      const profilePicUrl = `/uploads/${req.file.filename}`;\n\n      // Get current user to check for existing profile pic\n      const [currentUser] = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n      \n      // Delete old profile picture if it exists\n      if (currentUser && currentUser.profilePic) {\n        const oldPicPath = path.join(process.cwd(), 'public', currentUser.profilePic);\n        if (fs.existsSync(oldPicPath)) {\n          try {\n            fs.unlinkSync(oldPicPath);\n          } catch (error) {\n            console.warn(\"Could not delete old profile picture:\", error);\n          }\n        }\n      }\n\n      // Update user profile with new profile picture\n      const [updatedUser] = await db\n        .update(users)\n        .set({ profilePic: profilePicUrl })\n        .where(eq(users.id, userId))\n        .returning();\n\n      const { password, ...userWithoutPassword } = updatedUser;\n\n      res.json({\n        ...userWithoutPassword,\n        message: \"Profile picture updated successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error uploading profile picture:\", error);\n      \n      // Clean up uploaded file if there was an error\n      if (req.file) {\n        try {\n          fs.unlinkSync(req.file.path);\n        } catch (cleanupError) {\n          console.warn(\"Could not clean up uploaded file:\", cleanupError);\n        }\n      }\n      \n      res.status(500).json({ message: \"Failed to upload profile picture\" });\n    }\n  });\n\n  app.get(\"/api/auth/download-data\", requireAuth, async (req, res) => {\n    try {\n      // Get user data\n      const [user] = await db.select().from(users).where(eq(users.id, (req.session as any).userId)).limit(1);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get user's sessions\n      const userSessions = await db\n        .select()\n        .from(sessions)\n        .where(eq(sessions.userId, (req.session as any).userId))\n        .orderBy(desc(sessions.createdAt));\n\n      // Get all messages for user's sessions\n      const sessionIds = userSessions.map(s => s.id);\n      const userMessages = sessionIds.length > 0 \n        ? await db\n            .select()\n            .from(messages)\n            .where(eq(messages.sessionId, sessionIds[0])) // For now, just first session\n            .orderBy(messages.createdAt)\n        : [];\n\n      const userData = {\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          createdAt: user.createdAt\n        },\n        sessions: userSessions,\n        messages: userMessages,\n        exportDate: new Date().toISOString()\n      };\n\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"my-eunoia-data.json\"');\n      res.json(userData);\n    } catch (error) {\n      console.error(\"Error downloading user data:\", error);\n      res.status(500).json({ message: \"Failed to download user data\" });\n    }\n  });\n\n  app.delete(\"/api/auth/delete-account\", requireAuth, async (req, res) => {\n    try {\n      const { password } = req.body;\n      \n      if (!password) {\n        return res.status(400).json({ message: \"Password is required to delete account\" });\n      }\n\n      // Get current user\n      const [user] = await db.select().from(users).where(eq(users.id, (req.session as any).userId)).limit(1);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Password is incorrect\" });\n      }\n\n      // Delete user (this will cascade delete sessions and messages if foreign keys are set)\n      await db.delete(users).where(eq(users.id, (req.session as any).userId));\n\n      // Destroy session\n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Error destroying session:\", err);\n        }\n      });\n\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Account deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting account:\", error);\n      res.status(500).json({ message: \"Failed to delete account\" });\n    }\n  });\n\n  return server;\n}","size_bytes":24954},"server/storage.ts":{"content":"// Simple storage interface - keeping for compatibility\n// The actual storage is handled by Drizzle ORM and database\n\nexport interface IStorage {\n  // This can be extended later if needed for additional storage operations\n}\n\nexport class MemStorage implements IStorage {\n  // Placeholder for any in-memory storage needs\n  constructor() {}\n}","size_bytes":340},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull(),\n  email: text(\"email\").notNull(),\n  password: text(\"password\").notNull(),\n  profilePic: text(\"profile_pic\"),\n  therapistPersonality: text(\"therapist_personality\"),\n  selectedVoice: text(\"selected_voice\"),\n  selectedGoals: json(\"selected_goals\").$type<string[]>().default([]),\n  darkMode: boolean(\"dark_mode\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  unique(\"users_username_unique\").on(table.username),\n  unique(\"users_email_unique\").on(table.email),\n]);\n\nexport const sessions = pgTable(\"sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  therapistPersonality: text(\"therapist_personality\").notNull(),\n  voiceEnabled: boolean(\"voice_enabled\").default(false),\n  goals: json(\"goals\").$type<string[]>().notNull().default([]),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, paused\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  endedAt: timestamp(\"ended_at\"),\n  durationSeconds: integer(\"duration_seconds\"),\n  summary: text(\"summary\"),\n  keyTopics: json(\"key_topics\").$type<string[]>().default([]),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  duration: integer(\"duration\"),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  content: text(\"content\").notNull(),\n  isUser: boolean(\"is_user\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const crisisEvents = pgTable(\"crisis_events\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  detectedKeywords: json(\"detected_keywords\").$type<string[]>().notNull(),\n  userMessage: text(\"user_message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  actionTaken: text(\"action_taken\"),\n});\n\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  sessionId: integer(\"session_id\"),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  prompt: text(\"prompt\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const moodEntries = pgTable(\"mood_entries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  sessionId: integer(\"session_id\"),\n  moodScore: integer(\"mood_score\").notNull(), // 1-10\n  moodEmoji: text(\"mood_emoji\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  profilePic: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n  endedAt: true,\n  durationSeconds: true,\n  summary: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCrisisEventSchema = createInsertSchema(crisisEvents).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMoodEntrySchema = createInsertSchema(moodEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertCrisisEvent = z.infer<typeof insertCrisisEventSchema>;\nexport type CrisisEvent = typeof crisisEvents.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertMoodEntry = z.infer<typeof insertMoodEntrySchema>;\nexport type MoodEntry = typeof moodEntries.$inferSelect;","size_bytes":4242},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQueryClient } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ThemeProvider } from \"@/contexts/ThemeProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Home from \"@/pages/home\";\nimport JournalPage from \"@/pages/journal\";\nimport MoodPage from \"@/pages/mood\";\nimport CBTToolsPage from \"@/pages/cbt-tools\";\nimport SessionSummariesPage from \"@/pages/session-summaries\";\nimport SettingsPage from \"@/pages/settings\";\nimport AccountPage from \"@/pages/account\";\nimport SessionPage from \"@/pages/session\";\nimport LoginPage from \"@/pages/login\";\nimport SignupPage from \"@/pages/signup\";\n\nexport interface SessionSettings {\n  therapistPersonality: string;\n  selectedVoice: string;\n  selectedGoals: string[];\n}\n\nexport type CurrentPage = 'home' | 'session' | 'journal' | 'mood' | 'cbt-tools' | 'session-summaries' | 'settings' | 'account';\n\nfunction AuthenticatedApp() {\n  const { user } = useAuth();\n  const [sessionSettings, setSessionSettings] = useState<SessionSettings | null>(null);\n  const [currentPage, setCurrentPage] = useState<CurrentPage>('home');\n  const [sessionId, setSessionId] = useState<number | null>(null);\n  \n  // Load user session settings from database\n  useEffect(() => {\n    if (user && (user as any).therapistPersonality) {\n      const userSettings: SessionSettings = {\n        therapistPersonality: (user as any).therapistPersonality || 'empathetic',\n        selectedVoice: (user as any).selectedVoice || 'alloy',\n        selectedGoals: (user as any).selectedGoals || []\n      };\n      setSessionSettings(userSettings);\n    }\n  }, [user]);\n\n  const renderCurrentPage = () => {\n    if (!sessionSettings) {\n      return <Onboarding onComplete={setSessionSettings} />;\n    }\n\n    switch (currentPage) {\n      case 'home':\n        return <Home \n          sessionSettings={sessionSettings} \n          onPageChange={setCurrentPage}\n          onSessionStart={(id) => {\n            setSessionId(id);\n            setCurrentPage('session');\n          }}\n        />;\n      case 'session':\n        return sessionId && sessionSettings ? (\n          <SessionPage \n            sessionId={sessionId}\n            sessionSettings={sessionSettings}\n            onPageChange={setCurrentPage}\n            onSessionEnd={() => {\n              setSessionId(null);\n              setCurrentPage('home');\n            }}\n          />\n        ) : (\n          <Home \n            sessionSettings={sessionSettings} \n            onPageChange={setCurrentPage}\n            onSessionStart={(id) => {\n              setSessionId(id);\n              setCurrentPage('session');\n            }}\n          />\n        );\n      case 'journal':\n        return <JournalPage \n          sessionId={sessionId || undefined} \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n        />;\n      case 'mood':\n        return <MoodPage \n          sessionId={sessionId || undefined} \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n        />;\n      case 'cbt-tools':\n        return <CBTToolsPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      case 'session-summaries':\n        return <SessionSummariesPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      case 'settings':\n        return <SettingsPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n          sessionSettings={sessionSettings}\n          onUpdateSettings={setSessionSettings}\n        />;\n      case 'account':\n        return <AccountPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      default:\n        return <Home \n          sessionSettings={sessionSettings} \n          onPageChange={setCurrentPage}\n          onSessionStart={(id) => {\n            setSessionId(id);\n            setCurrentPage('session');\n          }}\n        />;\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={renderCurrentPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction Router() {\n  const { user, isLoading, isAuthenticated, refetchUser } = useAuth();\n  const [authView, setAuthView] = useState<'login' | 'signup'>('login');\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    // Check if we have a saved login state for faster loading\n    const savedAuthState = localStorage.getItem(\"eunoia-auth-state\");\n    const hasStoredAuth = savedAuthState ? JSON.parse(savedAuthState).isLoggedIn : false;\n    \n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">\n            {hasStoredAuth ? \"Restoring your session...\" : \"Loading Eunoia...\"}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // If authenticated, show the app\n  if (isAuthenticated) {\n    return <AuthenticatedApp />;\n  }\n\n  // If not authenticated, show login/signup\n  const handleAuthSuccess = async () => {\n    // Force refetch user data to update authentication state immediately\n    await refetchUser();\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n  };\n\n  if (authView === 'login') {\n    return (\n      <LoginPage \n        onLoginSuccess={handleAuthSuccess}\n        onSwitchToSignup={() => setAuthView('signup')}\n      />\n    );\n  } else {\n    return (\n      <SignupPage \n        onSignupSuccess={handleAuthSuccess}\n        onSwitchToLogin={() => setAuthView('login')}\n      />\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"eunoia-ui-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":6843},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --accent: hsl(193, 95%, 68%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(262, 83%, 58%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(43, 96%, 56%);\n  --error: hsl(0, 84%, 60%);\n  --neutral: hsl(210, 40%, 98%);\n  --therapeutic: hsl(189, 85%, 85%);\n  --calming: hsl(260, 60%, 92%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(193, 95%, 68%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(262, 83%, 58%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(43, 96%, 56%);\n  --error: hsl(0, 62%, 30%);\n  --neutral: hsl(217, 32%, 17%);\n  --therapeutic: hsl(189, 85%, 25%);\n  --calming: hsl(260, 60%, 15%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: var(--background);\n    min-height: 100vh;\n    height: 100vh;\n  }\n  \n  html {\n    height: 100%;\n  }\n}\n\n@layer utilities {\n  .bg-gradient-primary {\n    background: linear-gradient(135deg, hsl(262, 83%, 58%) 0%, hsl(193, 95%, 68%) 100%);\n  }\n  \n  .bg-gradient-neutral {\n    background: linear-gradient(135deg, var(--therapeutic) 0%, var(--calming) 100%);\n  }\n  \n  .dark .bg-gradient-neutral {\n    background: linear-gradient(135deg, hsl(222, 84%, 4.9%) 0%, hsl(217, 32%, 17%) 100%);\n  }\n  \n  .bg-gradient-therapeutic {\n    background: linear-gradient(135deg, hsl(189, 85%, 85%) 0%, hsl(260, 60%, 92%) 35%, hsl(193, 95%, 88%) 100%);\n  }\n  \n  .dark .bg-gradient-therapeutic {\n    background: linear-gradient(135deg, hsl(189, 85%, 15%) 0%, hsl(260, 60%, 8%) 35%, hsl(193, 95%, 12%) 100%);\n  }\n  \n  .animate-pulse-soft {\n    animation: pulse-soft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  @keyframes pulse-soft {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n  }\n\n  /* Custom scrollbar styles */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--border)) transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background-color: hsl(var(--border));\n    border-radius: 3px;\n  }\n\n  .scrollbar-thin::-webkit-scrollbar-thumb:hover {\n    background-color: hsl(var(--muted-foreground));\n  }\n\n  .scrollbar-thumb-border {\n    scrollbar-color: hsl(var(--border)) transparent;\n  }\n\n  .scrollbar-track-background {\n    scrollbar-color: hsl(var(--border)) hsl(var(--background));\n  }\n}\n","size_bytes":3748},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport interface TherapistPersonality {\n  name: string;\n  description: string;\n  systemPrompt: string;\n}\n\nexport const therapistPersonalities: Record<string, TherapistPersonality> = {\n  empathetic: {\n    name: \"Dr. Emma\",\n    description: \"Warm, understanding, and deeply compassionate. Focuses on emotional validation and support.\",\n    systemPrompt: `You are Dr. Emma, a highly empathetic and compassionate AI therapist. Your approach is warm, understanding, and deeply caring. You always:\n    - Validate emotions and feelings without judgment\n    - Use gentle, supportive language\n    - Focus on emotional support and understanding\n    - Offer comfort and reassurance\n    - Help users feel heard and understood\n    - Use CBT techniques when appropriate, but prioritize emotional validation\n    - Detect crisis situations and respond with immediate care and resources\n    - Keep responses conversational and supportive, not clinical\n    - Remember you're having a real conversation with someone who needs help`\n  },\n  analytical: {\n    name: \"Dr. Alex\",\n    description: \"Logical, structured, and solution-focused. Emphasizes CBT techniques and practical strategies.\",\n    systemPrompt: `You are Dr. Alex, a logical and structured AI therapist specializing in Cognitive Behavioral Therapy. Your approach is analytical and solution-focused. You always:\n    - Use evidence-based CBT techniques\n    - Help identify thought patterns and cognitive distortions\n    - Provide practical, actionable strategies\n    - Structure conversations with clear goals\n    - Offer homework assignments and exercises\n    - Focus on problem-solving and skill-building\n    - Maintain a professional but caring demeanor\n    - Detect crisis situations and respond immediately with appropriate resources\n    - Keep responses focused on practical solutions while remaining empathetic\n    - Remember you're helping someone develop coping skills and strategies`\n  },\n  supportive: {\n    name: \"Dr. Sam\",\n    description: \"Encouraging, patient, and strength-focused. Helps build confidence and resilience.\",\n    systemPrompt: `You are Dr. Sam, a supportive and encouraging AI therapist focused on building strength and resilience. Your approach is patient and strength-based. You always:\n    - Highlight client strengths and capabilities\n    - Provide encouragement and positive reinforcement\n    - Help build confidence and self-efficacy\n    - Focus on resilience and coping skills\n    - Celebrate progress and small victories\n    - Maintain an optimistic but realistic perspective\n    - Use motivational interviewing techniques\n    - Detect crisis situations and respond with immediate support and resources\n    - Keep responses uplifting while acknowledging challenges\n    - Remember you're helping someone build their inner strength`\n  },\n  mindful: {\n    name: \"Dr. Maya\",\n    description: \"Calm, present, and wisdom-oriented. Integrates mindfulness and meditation practices.\",\n    systemPrompt: `You are Dr. Maya, a mindful and present AI therapist who integrates mindfulness and meditation practices. Your approach is calm and wisdom-oriented. You always:\n    - Incorporate mindfulness and meditation techniques\n    - Focus on present-moment awareness\n    - Help clients develop self-compassion\n    - Use gentle, contemplative language\n    - Offer breathing exercises and grounding techniques\n    - Emphasize acceptance and non-judgment\n    - Draw from mindfulness-based therapies\n    - Detect crisis situations and respond with immediate care and resources\n    - Keep responses peaceful and centered while being helpful\n    - Remember you're guiding someone toward inner peace and self-awareness`\n  }\n};\n\nexport async function getTherapistResponse(\n  personality: string,\n  userMessage: string,\n  conversationHistory: Array<{role: string, content: string}>,\n  userGoals: string[]\n): Promise<string> {\n  const therapist = therapistPersonalities[personality];\n  if (!therapist) {\n    throw new Error(`Unknown therapist personality: ${personality}`);\n  }\n\n  const systemPrompt = `${therapist.systemPrompt}\n\nThe user's goals for this session are: ${userGoals.join(', ')}\n\nImportant guidelines:\n- Keep responses conversational and supportive (2-4 sentences typically)\n- Use CBT techniques naturally in conversation\n- If you detect crisis language (suicide, self-harm, hopelessness), acknowledge immediately and suggest crisis resources\n- Stay in character as ${therapist.name}\n- Be helpful and therapeutic while maintaining appropriate boundaries`;\n\n  const messages = [\n    { role: \"system\", content: systemPrompt },\n    ...conversationHistory,\n    { role: \"user\", content: userMessage }\n  ];\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: messages as any,\n      max_tokens: 500,\n      temperature: 0.7,\n    });\n\n    return response.choices[0].message.content || \"I'm here to help. Could you tell me more about what's on your mind?\";\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    // Return a therapeutic fallback response instead of throwing\n    return \"I understand you're reaching out, and I'm here to listen. While I'm having some technical difficulties with my responses right now, I want you to know that your feelings are valid and important. Please feel free to continue sharing, and consider using the CBT tools, journal, and mood tracking features in the sidebar to help process your thoughts and feelings. If you need immediate support, please reach out to a crisis hotline or mental health professional.\";\n  }\n}\n\nexport async function generateSessionSummary(\n  messages: Array<{role: string, content: string}>,\n  personality: string,\n  goals: string[],\n  duration: number\n): Promise<{\n  keyTopics: string[];\n  cbtTechniques: string[];\n  homework: string[];\n  therapistNotes: string;\n}> {\n  const therapist = therapistPersonalities[personality];\n  \n  const prompt = `As ${therapist.name}, analyze this therapy session and provide a summary. The session lasted ${Math.floor(duration / 60)} minutes and focused on: ${goals.join(', ')}.\n\nSession messages:\n${messages.map(m => `${m.role}: ${m.content}`).join('\\n')}\n\nPlease provide a JSON response with:\n- keyTopics: Array of 3-5 main topics discussed\n- cbtTechniques: Array of CBT techniques used\n- homework: Array of 2-3 suggested homework assignments\n- therapistNotes: A brief note from the therapist perspective\n\nFormat as valid JSON.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      max_tokens: 800,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      keyTopics: result.keyTopics || [],\n      cbtTechniques: result.cbtTechniques || [],\n      homework: result.homework || [],\n      therapistNotes: result.therapistNotes || \"Session completed successfully.\"\n    };\n  } catch (error) {\n    console.error('Failed to generate session summary:', error);\n    return {\n      keyTopics: [\"General discussion\"],\n      cbtTechniques: [\"Active listening\"],\n      homework: [\"Practice self-care\"],\n      therapistNotes: \"Session completed successfully.\"\n    };\n  }\n}\n\nexport function detectCrisisKeywords(message: string): string[] {\n  const crisisKeywords = [\n    'suicide', 'kill myself', 'end it all', 'no point', 'hurt myself',\n    'self harm', 'cut myself', 'overdose', 'jump off', 'hang myself',\n    'better off dead', 'want to die', 'end my life', 'hopeless',\n    'worthless', 'burden', 'everyone would be better', 'plan to hurt',\n    'thoughts of death', 'suicidal'\n  ];\n  \n  const lowerMessage = message.toLowerCase();\n  return crisisKeywords.filter(keyword => lowerMessage.includes(keyword));\n}\n","size_bytes":8107},"server/services/therapeutic-ai.ts":{"content":"import { TherapistPersonality } from './openai';\n\n// Therapeutic AI service using AI/ML API with Claude and DeepSeek models\nexport class TherapeuticAI {\n  private apiKey: string;\n  private baseUrl = 'https://api.aimlapi.com/v1';\n\n  constructor() {\n    this.apiKey = process.env.AIML_API_KEY || '';\n    if (!this.apiKey) {\n      throw new Error('AIML_API_KEY environment variable is required');\n    }\n  }\n\n  // Enhanced therapeutic personalities with professional training\n  public therapistPersonalities: Record<string, TherapistPersonality> = {\n    empathetic: {\n      name: \"Dr. Emma\",\n      description: \"A warm, understanding therapist who focuses on emotional validation and support\",\n      systemPrompt: `You are Dr. Emma, a licensed clinical psychologist specializing in empathetic therapy. You have 15 years of experience helping clients process emotions and build resilience.\n\nCore therapeutic principles:\n- Always validate the client's feelings and experiences\n- Use reflective listening and emotional mirroring\n- Apply person-centered therapy approaches\n- Incorporate trauma-informed care principles\n- Focus on emotional processing and self-compassion\n\nYour responses should:\n- Start with emotional validation (\"That sounds really difficult...\")\n- Use warm, supportive language\n- Ask open-ended questions about feelings\n- Normalize emotional experiences\n- Suggest gentle self-care practices\n- Always maintain professional boundaries\n\nCrisis protocol: If client mentions self-harm, suicide, or immediate danger, immediately provide crisis resources and encourage professional help.\n\nRemember: You are a supportive AI companion, not a replacement for human therapy. Always encourage clients to seek professional help for serious concerns.`\n    },\n    \n    analytical: {\n      name: \"Dr. Alex\",\n      description: \"A structured, solution-focused therapist who uses CBT and evidence-based approaches\",\n      systemPrompt: `You are Dr. Alex, a cognitive-behavioral therapist with expertise in analytical approaches to mental health. You have specialized training in CBT, DBT, and solution-focused therapy.\n\nCore therapeutic principles:\n- Use cognitive-behavioral therapy (CBT) techniques\n- Help identify thought patterns and cognitive distortions\n- Focus on practical coping strategies\n- Apply behavioral activation techniques\n- Use structured problem-solving approaches\n- Incorporate mindfulness and grounding exercises\n\nYour responses should:\n- Help identify negative thought patterns\n- Suggest cognitive restructuring techniques\n- Provide practical homework assignments\n- Use the thought-feeling-behavior triangle\n- Offer evidence-based coping strategies\n- Ask about specific situations and triggers\n\nCommon CBT techniques to use:\n- Thought challenging (evidence for/against thoughts)\n- Behavioral experiments\n- Activity scheduling\n- Mood tracking\n- Progressive muscle relaxation\n- Breathing exercises\n\nCrisis protocol: For crisis situations, provide immediate safety planning and professional resources.\n\nRemember: Focus on teachable skills and practical tools while maintaining therapeutic rapport.`\n    },\n    \n    supportive: {\n      name: \"Dr. Sam\",\n      description: \"An encouraging therapist who focuses on strengths, resilience, and positive psychology\",\n      systemPrompt: `You are Dr. Sam, a licensed therapist specializing in strengths-based therapy and positive psychology. You help clients build resilience and discover their inherent capabilities.\n\nCore therapeutic principles:\n- Strength-based and solution-focused approaches\n- Positive psychology interventions\n- Resilience building techniques\n- Goal-setting and motivation enhancement\n- Self-efficacy development\n- Growth mindset cultivation\n\nYour responses should:\n- Highlight client strengths and past successes\n- Focus on what's working and build upon it\n- Use motivational interviewing techniques\n- Encourage self-advocacy and empowerment\n- Suggest achievable next steps\n- Celebrate progress and small wins\n\nTherapeutic techniques to incorporate:\n- Strengths inventory and identification\n- Values clarification exercises\n- Goal-setting frameworks (SMART goals)\n- Gratitude and appreciation practices\n- Future-focused visioning\n- Resilience building activities\n\nCrisis protocol: Maintain safety while emphasizing client's survival strengths and available resources.\n\nRemember: Balance optimism with validation of real struggles. Avoid toxic positivity while genuinely highlighting capabilities.`\n    },\n    \n    mindful: {\n      name: \"Dr. Maya\",\n      description: \"A mindfulness-based therapist who integrates meditation, acceptance, and present-moment awareness\",\n      systemPrompt: `You are Dr. Maya, a mindfulness-based therapist with training in MBSR, ACT (Acceptance and Commitment Therapy), and contemplative psychotherapy. You help clients develop present-moment awareness and psychological flexibility.\n\nCore therapeutic principles:\n- Mindfulness-based interventions\n- Acceptance and Commitment Therapy (ACT)\n- Present-moment awareness cultivation\n- Non-judgmental observation of thoughts/feelings\n- Values-based living\n- Psychological flexibility development\n\nYour responses should:\n- Guide clients to present-moment awareness\n- Teach mindfulness techniques and exercises\n- Help develop non-judgmental self-observation\n- Focus on acceptance rather than elimination of difficult emotions\n- Explore values and committed action\n- Suggest brief mindfulness practices\n\nMindfulness techniques to offer:\n- Breathing awareness exercises\n- Body scan meditations\n- Mindful observation practices\n- Loving-kindness meditation\n- Values clarification exercises\n- Defusion techniques for difficult thoughts\n\nCrisis protocol: Use grounding techniques and present-moment awareness to create safety, while providing professional resources.\n\nRemember: Emphasize acceptance and mindful awareness while maintaining therapeutic presence and safety.`\n    }\n  };\n\n  async getTherapistResponse(\n    personality: string,\n    messages: Array<{ role: string; content: string }>,\n    sessionGoals: string[] = []\n  ): Promise<string> {\n    const therapist = this.therapistPersonalities[personality] || this.therapistPersonalities.empathetic;\n    \n    // Get the last user message for context-aware responses\n    const lastUserMessage = messages.filter(m => m.role === 'user').pop()?.content || '';\n    const isFirstMessage = messages.filter(m => m.role === 'user').length <= 1;\n    \n    // Enhanced rule-based therapeutic responses with AI-like sophistication\n    return this.generateTherapeuticResponse(therapist, lastUserMessage, sessionGoals, isFirstMessage);\n  }\n\n  private generateTherapeuticResponse(\n    therapist: TherapistPersonality,\n    userMessage: string,\n    sessionGoals: string[],\n    isFirstMessage: boolean\n  ): string {\n    if (isFirstMessage) {\n      return this.generateGreeting(therapist, sessionGoals);\n    }\n\n    // Analyze user message for therapeutic cues\n    const lowerMessage = userMessage.toLowerCase();\n    const emotionalWords = this.identifyEmotionalContent(lowerMessage);\n    const therapeuticNeeds = this.identifyTherapeuticNeeds(lowerMessage);\n    \n    // Generate response based on therapist personality and user needs\n    switch (therapist.name) {\n      case 'Dr. Emma': // Empathetic\n        return this.generateEmpathicResponse(userMessage, emotionalWords, therapeuticNeeds);\n      case 'Dr. Alex': // Analytical\n        return this.generateAnalyticalResponse(userMessage, emotionalWords, therapeuticNeeds);\n      case 'Dr. Sam': // Supportive\n        return this.generateSupportiveResponse(userMessage, emotionalWords, therapeuticNeeds);\n      case 'Dr. Maya': // Mindful\n        return this.generateMindfulResponse(userMessage, emotionalWords, therapeuticNeeds);\n      default:\n        return this.generateEmpathicResponse(userMessage, emotionalWords, therapeuticNeeds);\n    }\n  }\n\n  private generateGreeting(therapist: TherapistPersonality, sessionGoals: string[]): string {\n    const goalText = sessionGoals.length > 0 \n      ? ` I see you're interested in working on ${sessionGoals.join(' and ').toLowerCase()}.`\n      : '';\n    \n    switch (therapist.name) {\n      case 'Dr. Emma':\n        return `Hello, and welcome. I'm Dr. Emma, and I'm really glad you've taken this step to reach out today.${goalText} I want you to know this is a safe space where you can share whatever is on your mind. How are you feeling right now?`;\n      case 'Dr. Alex':\n        return `Good to meet you. I'm Dr. Alex, and I specialize in helping people develop practical strategies for life's challenges.${goalText} I'm here to help you understand patterns and develop effective coping tools. What would you like to focus on in our time together?`;\n      case 'Dr. Sam':\n        return `Hi there! I'm Dr. Sam, and I'm genuinely excited to work with you today.${goalText} I believe in focusing on your strengths and the positive changes you want to make. What's going well in your life right now, and what would you like to see improve?`;\n      case 'Dr. Maya':\n        return `Welcome. I'm Dr. Maya. Take a moment to notice your breathing and how you're feeling right now.${goalText} I'm here to help you develop mindful awareness and acceptance. What brought you to seek support today?`;\n      default:\n        return `Hello, I'm here to support you through whatever you're experiencing.${goalText} How are you feeling today?`;\n    }\n  }\n\n  private generateEmpathicResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const validationPhrase = this.getValidationPhrase(emotions);\n    const empathicReflection = this.getEmpathicReflection(userMessage);\n    const supportiveQuestion = this.getSupportiveQuestion(needs);\n    \n    return `${validationPhrase} ${empathicReflection} \n\nI can hear that you're going through something difficult, and I want you to know that your feelings are completely valid. It takes courage to share these experiences. ${supportiveQuestion}`;\n  }\n\n  private generateAnalyticalResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const thoughtPattern = this.identifyThoughtPatterns(userMessage);\n    const cbtTechnique = this.suggestCBTTechnique(needs);\n    const practicalQuestion = this.getPracticalQuestion(userMessage);\n    \n    return `I notice ${thoughtPattern} in what you're sharing. This is actually quite common, and there are specific techniques we can use to address this. ${cbtTechnique}\n\nLet's explore this together: ${practicalQuestion} Understanding these patterns can help us develop more effective coping strategies.`;\n  }\n\n  private generateSupportiveResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const strengthAcknowledgment = this.identifyStrengths(userMessage);\n    const encouragingPerspective = this.getEncouragingPerspective(needs);\n    const goalOrientedQuestion = this.getGoalOrientedQuestion();\n    \n    return `${strengthAcknowledgment} I can see the effort you're putting into understanding and improving your situation. ${encouragingPerspective}\n\nRemember, growth happens one step at a time, and you're already taking important steps by being here. ${goalOrientedQuestion}`;\n  }\n\n  private generateMindfulResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const mindfulObservation = this.getMindfulObservation(userMessage);\n    const acceptanceReframe = this.getAcceptanceReframe(emotions);\n    const mindfulQuestion = this.getMindfulQuestion();\n    \n    return `${mindfulObservation} Notice how these thoughts and feelings are present right now, without needing to change them immediately. ${acceptanceReframe}\n\nTake a breath with me. ${mindfulQuestion} Sometimes simply observing our inner experience with kindness can be profoundly healing.`;\n  }\n\n  // Helper methods for generating therapeutic responses\n  private identifyEmotionalContent(message: string): string[] {\n    const emotionalKeywords = {\n      anxiety: ['anxious', 'worried', 'nervous', 'scared', 'panic', 'stress'],\n      sadness: ['sad', 'depressed', 'down', 'hopeless', 'empty', 'lonely'],\n      anger: ['angry', 'mad', 'frustrated', 'annoyed', 'furious', 'irritated'],\n      overwhelm: ['overwhelmed', 'too much', 'can\\'t handle', 'exhausted', 'burned out']\n    };\n    \n    const found: string[] = [];\n    for (const [emotion, keywords] of Object.entries(emotionalKeywords)) {\n      if (keywords.some(keyword => message.includes(keyword))) {\n        found.push(emotion);\n      }\n    }\n    return found;\n  }\n\n  private identifyTherapeuticNeeds(message: string): string[] {\n    const needsKeywords = {\n      coping: ['don\\'t know how', 'can\\'t handle', 'struggling with', 'overwhelmed'],\n      support: ['alone', 'no one understands', 'isolated', 'need help'],\n      clarity: ['confused', 'don\\'t understand', 'mixed up', 'unclear'],\n      change: ['want to change', 'need to improve', 'better', 'different']\n    };\n    \n    const found: string[] = [];\n    for (const [need, keywords] of Object.entries(needsKeywords)) {\n      if (keywords.some(keyword => message.includes(keyword))) {\n        found.push(need);\n      }\n    }\n    return found;\n  }\n\n  private getValidationPhrase(emotions: string[]): string {\n    if (emotions.includes('anxiety')) return \"I can hear the anxiety in what you're sharing, and that must feel really overwhelming.\";\n    if (emotions.includes('sadness')) return \"It sounds like you're carrying some heavy feelings right now.\";\n    if (emotions.includes('anger')) return \"I can sense the frustration you're experiencing.\";\n    return \"Thank you for sharing something so personal with me.\";\n  }\n\n  private getEmpathicReflection(message: string): string {\n    const reflections = [\n      \"It sounds like you've been dealing with a lot lately.\",\n      \"I can imagine how difficult this situation must be for you.\",\n      \"That sounds really challenging to navigate.\",\n      \"It takes strength to acknowledge these feelings.\"\n    ];\n    return reflections[Math.floor(Math.random() * reflections.length)];\n  }\n\n  private getSupportiveQuestion(needs: string[]): string {\n    if (needs.includes('coping')) return \"What have you tried so far that's helped, even a little bit?\";\n    if (needs.includes('support')) return \"Who in your life do you feel most comfortable talking to?\";\n    if (needs.includes('clarity')) return \"What part of this situation would be most helpful to understand better?\";\n    return \"What would feel most supportive for you right now?\";\n  }\n\n  private identifyThoughtPatterns(message: string): string {\n    if (message.includes('always') || message.includes('never')) {\n      return \"some all-or-nothing thinking patterns\";\n    }\n    if (message.includes('should') || message.includes('must')) {\n      return \"some self-critical expectations\";\n    }\n    if (message.includes('what if')) {\n      return \"anticipatory worry patterns\";\n    }\n    return \"some thought patterns we can explore\";\n  }\n\n  private suggestCBTTechnique(needs: string[]): string {\n    if (needs.includes('anxiety')) {\n      return \"One technique that can be helpful is the 5-4-3-2-1 grounding method: notice 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, and 1 you can taste.\";\n    }\n    return \"We can work on thought challenging - examining the evidence for and against these thoughts.\";\n  }\n\n  private getPracticalQuestion(message: string): string {\n    return \"What evidence do you have that supports this thought, and what evidence might challenge it?\";\n  }\n\n  private identifyStrengths(message: string): string {\n    return \"I notice that you're being really honest and self-aware about your situation, which shows incredible insight.\";\n  }\n\n  private getEncouragingPerspective(needs: string[]): string {\n    return \"Every challenge is also an opportunity to develop new skills and resilience.\";\n  }\n\n  private getGoalOrientedQuestion(): string {\n    const questions = [\n      \"What would you most like to be different in your life?\",\n      \"If this situation improved, what would that look like for you?\",\n      \"What small step could you take this week toward feeling better?\"\n    ];\n    return questions[Math.floor(Math.random() * questions.length)];\n  }\n\n  private getMindfulObservation(message: string): string {\n    return \"I notice the thoughts and feelings you're describing seem to be taking up a lot of space in your awareness right now.\";\n  }\n\n  private getAcceptanceReframe(emotions: string[]): string {\n    return \"These feelings are information about your inner experience - they don't define you, and they will change.\";\n  }\n\n  private getMindfulQuestion(): string {\n    const questions = [\n      \"What do you notice happening in your body as we talk about this?\",\n      \"If you could send compassion to the part of you that's struggling, what would you say?\",\n      \"What would it feel like to hold these difficult emotions with kindness?\"\n    ];\n    return questions[Math.floor(Math.random() * questions.length)];\n  }\n\n  async generateSessionSummary(\n    messages: Array<{ role: string; content: string; timestamp: Date }>,\n    therapistPersonality: string,\n    sessionDuration: number\n  ): Promise<{\n    summary: string;\n    keyTopics: string[];\n    cbtTechniques: string[];\n    homework: string[];\n    therapistNotes: string;\n  }> {\n    const therapist = this.therapistPersonalities[therapistPersonality] || this.therapistPersonalities.empathetic;\n    \n    // Analyze the conversation for therapeutic content\n    const userMessages = messages.filter(msg => msg.role === 'user').map(msg => msg.content.toLowerCase());\n    const allText = userMessages.join(' ');\n    \n    // Generate intelligent summary based on conversation analysis\n    return this.analyzeSessionContent(therapist, allText, sessionDuration, userMessages.length);\n  }\n\n  private analyzeSessionContent(\n    therapist: TherapistPersonality,\n    conversationText: string,\n    duration: number,\n    messageCount: number\n  ): {\n    summary: string;\n    keyTopics: string[];\n    cbtTechniques: string[];\n    homework: string[];\n    therapistNotes: string;\n  } {\n    // Identify key themes and emotions from the conversation\n    const emotions = this.identifyEmotionalContent(conversationText);\n    const needs = this.identifyTherapeuticNeeds(conversationText);\n    const topics = this.identifyDiscussionTopics(conversationText);\n    \n    // Generate summary based on therapist personality and session content\n    const summary = this.generateSessionSummaryText(therapist, emotions, topics, duration);\n    const keyTopics = this.generateKeyTopics(emotions, needs, topics);\n    const cbtTechniques = this.generateCBTTechniques(therapist, emotions, needs);\n    const homework = this.generateHomework(therapist, emotions, needs);\n    const therapistNotes = this.generateTherapistNotes(therapist, emotions, needs, messageCount, duration);\n    \n    return {\n      summary,\n      keyTopics,\n      cbtTechniques,\n      homework,\n      therapistNotes\n    };\n  }\n\n  private identifyDiscussionTopics(text: string): string[] {\n    const topicKeywords = {\n      relationships: ['relationship', 'partner', 'family', 'friend', 'marriage', 'divorce', 'dating'],\n      work: ['work', 'job', 'career', 'boss', 'colleague', 'workplace', 'employment'],\n      anxiety: ['anxious', 'worry', 'nervous', 'panic', 'stress', 'fear', 'overwhelmed'],\n      depression: ['sad', 'depressed', 'hopeless', 'empty', 'lonely', 'down', 'worthless'],\n      trauma: ['trauma', 'abuse', 'ptsd', 'flashback', 'nightmare', 'triggered'],\n      grief: ['grief', 'loss', 'death', 'mourning', 'bereavement', 'passing'],\n      selfEsteem: ['self-esteem', 'confidence', 'worth', 'value', 'shame', 'inadequate'],\n      sleep: ['sleep', 'insomnia', 'tired', 'exhausted', 'rest', 'fatigue'],\n      eating: ['eating', 'food', 'weight', 'appetite', 'body image', 'diet']\n    };\n    \n    const foundTopics: string[] = [];\n    for (const [topic, keywords] of Object.entries(topicKeywords)) {\n      if (keywords.some(keyword => text.includes(keyword))) {\n        foundTopics.push(topic);\n      }\n    }\n    return foundTopics;\n  }\n\n  private generateSessionSummaryText(\n    therapist: TherapistPersonality,\n    emotions: string[],\n    topics: string[],\n    duration: number\n  ): string {\n    const minutes = Math.round(duration / 60);\n    const primaryTheme = topics[0] || 'personal exploration';\n    const emotionalTone = emotions.length > 0 ? emotions.join(' and ') : 'mixed emotions';\n    \n    switch (therapist.name) {\n      case 'Dr. Emma':\n        return `Client engaged in a ${minutes}-minute session focused on ${primaryTheme}, expressing ${emotionalTone}. Strong therapeutic rapport established with emphasis on emotional validation and support.`;\n      case 'Dr. Alex':\n        return `${minutes}-minute structured session addressing ${primaryTheme} using cognitive-behavioral approaches. Client demonstrated engagement with analytical frameworks and practical coping strategies.`;\n      case 'Dr. Sam':\n        return `Strengths-focused ${minutes}-minute session exploring ${primaryTheme}. Client showed resilience and openness to growth-oriented interventions and positive psychology techniques.`;\n      case 'Dr. Maya':\n        return `Mindfulness-centered ${minutes}-minute session with focus on ${primaryTheme}. Client practiced present-moment awareness and explored acceptance-based approaches to challenges.`;\n      default:\n        return `Productive ${minutes}-minute therapeutic session addressing ${primaryTheme} with supportive, client-centered approach.`;\n    }\n  }\n\n  private generateKeyTopics(emotions: string[], needs: string[], topics: string[]): string[] {\n    const keyTopics: string[] = [];\n    \n    // Add identified discussion topics\n    const topicMapping = {\n      relationships: 'Relationship dynamics',\n      work: 'Work-related stress',\n      anxiety: 'Anxiety management',\n      depression: 'Mood and depression',\n      trauma: 'Trauma processing',\n      grief: 'Grief and loss',\n      selfEsteem: 'Self-esteem and self-worth',\n      sleep: 'Sleep difficulties',\n      eating: 'Body image and eating'\n    };\n    \n    topics.forEach(topic => {\n      if (topicMapping[topic]) {\n        keyTopics.push(topicMapping[topic]);\n      }\n    });\n    \n    // Add emotional themes\n    if (emotions.includes('anxiety')) keyTopics.push('Anxiety and worry patterns');\n    if (emotions.includes('sadness')) keyTopics.push('Emotional processing');\n    if (emotions.includes('anger')) keyTopics.push('Anger management');\n    if (emotions.includes('overwhelm')) keyTopics.push('Stress and overwhelm');\n    \n    // Add therapeutic needs\n    if (needs.includes('coping')) keyTopics.push('Coping strategy development');\n    if (needs.includes('support')) keyTopics.push('Building support systems');\n    if (needs.includes('clarity')) keyTopics.push('Gaining clarity and insight');\n    if (needs.includes('change')) keyTopics.push('Personal growth and change');\n    \n    // Ensure we have some key topics\n    if (keyTopics.length === 0) {\n      keyTopics.push('Emotional support', 'Self-reflection', 'Personal growth');\n    }\n    \n    return keyTopics.slice(0, 5); // Limit to 5 key topics\n  }\n\n  private generateCBTTechniques(therapist: TherapistPersonality, emotions: string[], needs: string[]): string[] {\n    const techniques: string[] = ['Active listening', 'Emotional validation'];\n    \n    switch (therapist.name) {\n      case 'Dr. Alex':\n        techniques.push('Cognitive restructuring', 'Thought challenging', 'Behavioral activation');\n        if (emotions.includes('anxiety')) techniques.push('Grounding techniques');\n        break;\n      case 'Dr. Maya':\n        techniques.push('Mindfulness meditation', 'Present-moment awareness', 'Acceptance techniques');\n        break;\n      case 'Dr. Sam':\n        techniques.push('Strengths identification', 'Goal setting', 'Positive reframing');\n        break;\n      default:\n        techniques.push('Empathetic reflection', 'Supportive questioning');\n    }\n    \n    // Add specific techniques based on needs\n    if (needs.includes('coping')) techniques.push('Coping skills training');\n    if (emotions.includes('anxiety')) techniques.push('Breathing exercises');\n    if (emotions.includes('overwhelm')) techniques.push('Time management strategies');\n    \n    return Array.from(new Set(techniques)).slice(0, 4); // Remove duplicates and limit to 4\n  }\n\n  private generateHomework(therapist: TherapistPersonality, emotions: string[], needs: string[]): string[] {\n    const homework: string[] = [];\n    \n    // Base homework based on therapist approach\n    switch (therapist.name) {\n      case 'Dr. Emma':\n        homework.push('Practice daily self-compassion exercises');\n        break;\n      case 'Dr. Alex':\n        homework.push('Complete thought records for negative thoughts');\n        homework.push('Practice the 5-4-3-2-1 grounding technique when anxious');\n        break;\n      case 'Dr. Sam':\n        homework.push('Write down three personal strengths each day');\n        homework.push('Set one small, achievable goal for the week');\n        break;\n      case 'Dr. Maya':\n        homework.push('Practice 5 minutes of mindful breathing daily');\n        homework.push('Try mindful observation exercises');\n        break;\n    }\n    \n    // Add emotion-specific homework\n    if (emotions.includes('anxiety')) {\n      homework.push('Use progressive muscle relaxation before bed');\n    }\n    if (emotions.includes('sadness')) {\n      homework.push('Engage in one pleasant activity each day');\n    }\n    if (emotions.includes('overwhelm')) {\n      homework.push('Practice breaking large tasks into smaller steps');\n    }\n    \n    // Add need-specific homework\n    if (needs.includes('support')) {\n      homework.push('Reach out to one supportive person this week');\n    }\n    if (needs.includes('clarity')) {\n      homework.push('Journal about your thoughts and feelings for 10 minutes daily');\n    }\n    \n    return Array.from(new Set(homework)).slice(0, 3); // Remove duplicates and limit to 3\n  }\n\n  private generateTherapistNotes(\n    therapist: TherapistPersonality,\n    emotions: string[],\n    needs: string[],\n    messageCount: number,\n    duration: number\n  ): string {\n    const engagement = messageCount > 5 ? 'highly engaged' : messageCount > 2 ? 'moderately engaged' : 'tentatively engaged';\n    const sessionLength = duration > 600 ? 'extended' : duration > 300 ? 'standard' : 'brief';\n    \n    let notes = `Client was ${engagement} during this ${sessionLength} session. `;\n    \n    // Add therapist-specific observations\n    switch (therapist.name) {\n      case 'Dr. Emma':\n        notes += 'Strong therapeutic alliance established. Client shows willingness to explore emotions. ';\n        break;\n      case 'Dr. Alex':\n        notes += 'Client responds well to structured approaches. Consider continuing CBT techniques. ';\n        break;\n      case 'Dr. Sam':\n        notes += 'Client demonstrates inherent resilience. Focus on building upon existing strengths. ';\n        break;\n      case 'Dr. Maya':\n        notes += 'Client shows openness to mindfulness practices. Continue acceptance-based approaches. ';\n        break;\n    }\n    \n    // Add recommendations based on emotions and needs\n    if (emotions.includes('anxiety')) {\n      notes += 'Recommend anxiety management techniques and stress reduction strategies. ';\n    }\n    if (needs.includes('coping')) {\n      notes += 'Focus on developing practical coping skills in future sessions. ';\n    }\n    if (needs.includes('support')) {\n      notes += 'Explore social support systems and consider group therapy options. ';\n    }\n    \n    notes += 'Continue weekly sessions to maintain progress and build therapeutic rapport.';\n    \n    return notes;\n  }\n\n  // Enhanced crisis detection with professional assessment\n  async detectCrisisKeywords(message: string): Promise<string[]> {\n    return this.comprehensiveCrisisDetection(message);\n  }\n\n  private comprehensiveCrisisDetection(message: string): string[] {\n    const lowerMessage = message.toLowerCase();\n    const detectedKeywords: string[] = [];\n    \n    // Suicide and self-harm indicators\n    const suicidalKeywords = [\n      'suicide', 'kill myself', 'end my life', 'want to die', 'not worth living',\n      'better off dead', 'end it all', 'no point in living', 'wish I was dead',\n      'take my own life', 'don\\'t want to be here', 'can\\'t go on'\n    ];\n    \n    const selfHarmKeywords = [\n      'self harm', 'cut myself', 'hurt myself', 'harm myself', 'cutting',\n      'burning myself', 'hitting myself', 'punching walls', 'self-injury'\n    ];\n    \n    const overdoseKeywords = [\n      'overdose', 'too many pills', 'all the pills', 'bottle of pills',\n      'sleeping pills', 'pain medication', 'taking everything'\n    ];\n    \n    const methodKeywords = [\n      'jump off', 'hang myself', 'rope', 'bridge', 'building', 'gun',\n      'knife', 'razor', 'pills', 'car crash', 'train', 'poison'\n    ];\n    \n    // Immediate danger indicators\n    const dangerKeywords = [\n      'going to hurt', 'plan to', 'tonight', 'right now', 'can\\'t wait',\n      'have the', 'ready to', 'about to', 'planning to'\n    ];\n    \n    // Abuse and violence indicators  \n    const abuseKeywords = [\n      'abuse', 'domestic violence', 'being hurt', 'afraid for my safety',\n      'hitting me', 'threatening me', 'scared of', 'violent', 'unsafe'\n    ];\n    \n    // Severe mental health crisis\n    const crisisKeywords = [\n      'losing my mind', 'going crazy', 'can\\'t think straight', 'hallucinating',\n      'hearing voices', 'seeing things', 'psychotic', 'breakdown',\n      'can\\'t function', 'completely lost', 'no hope', 'hopeless'\n    ];\n    \n    // Substance abuse crisis\n    const substanceKeywords = [\n      'overdosed', 'too much alcohol', 'drinking too much', 'using drugs',\n      'can\\'t stop drinking', 'addicted', 'withdrawal', 'detox'\n    ];\n    \n    // Check for different categories of crisis\n    if (suicidalKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('suicidal ideation');\n    }\n    \n    if (selfHarmKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('self-harm');\n    }\n    \n    if (overdoseKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('overdose risk');\n    }\n    \n    if (methodKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('specific method mentioned');\n    }\n    \n    if (dangerKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('immediate danger');\n    }\n    \n    if (abuseKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('abuse or violence');\n    }\n    \n    if (crisisKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('mental health crisis');\n    }\n    \n    if (substanceKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('substance abuse crisis');\n    }\n    \n    // Enhanced contextual analysis\n    if (this.detectImminentRisk(lowerMessage)) {\n      detectedKeywords.push('imminent risk');\n    }\n    \n    if (this.detectHopelessness(lowerMessage)) {\n      detectedKeywords.push('hopelessness');\n    }\n    \n    return Array.from(new Set(detectedKeywords)); // Remove duplicates\n  }\n  \n  private detectImminentRisk(message: string): boolean {\n    const imminentPhrases = [\n      'tonight', 'right now', 'today', 'this moment', 'can\\'t wait',\n      'about to', 'going to do it', 'ready to end', 'final decision',\n      'last time', 'goodbye', 'farewell', 'won\\'t see me again'\n    ];\n    \n    return imminentPhrases.some(phrase => message.includes(phrase)) &&\n           (message.includes('die') || message.includes('end') || message.includes('hurt'));\n  }\n  \n  private detectHopelessness(message: string): boolean {\n    const hopelessPhrases = [\n      'no point', 'nothing matters', 'no future', 'never get better',\n      'no way out', 'trapped', 'stuck forever', 'can\\'t escape',\n      'no hope', 'hopeless', 'pointless', 'meaningless'\n    ];\n    \n    return hopelessPhrases.some(phrase => message.includes(phrase));\n  }\n}\n\n// Export a singleton instance\nexport const therapeuticAI = new TherapeuticAI();","size_bytes":32319},"client/src/components/chat-interface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Send, User, UserCheck } from \"lucide-react\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatInterfaceProps {\n  therapistName: string;\n  onSendMessage: (content: string, isVoice: boolean) => void;\n  messages: Message[];\n  isLoading: boolean;\n}\n\nexport default function ChatInterface({ \n  therapistName, \n  onSendMessage, \n  messages, \n  isLoading \n}: ChatInterfaceProps) {\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Focus input on mount\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSendMessage = () => {\n    if (inputMessage.trim() && !isLoading) {\n      onSendMessage(inputMessage.trim(), false);\n      setInputMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (timestamp: Date) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto space-y-4 min-h-0\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <UserCheck className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              Welcome to your session with {therapistName}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              Start by sharing what's on your mind today. I'm here to listen and support you.\n            </p>\n          </div>\n        ) : (\n          messages.map((message, index) => (\n            <div\n              key={message.id || index}\n              className={`flex items-start space-x-3 ${\n                message.isUser ? 'justify-end' : 'justify-start'\n              }`}\n            >\n              {!message.isUser && (\n                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <UserCheck className=\"w-5 h-5 text-white\" />\n                </div>\n              )}\n              \n              <div className={`flex-1 max-w-xs md:max-w-md ${message.isUser ? 'order-1' : ''}`}>\n                <Card className={`\n                  ${message.isUser \n                    ? 'bg-primary text-primary-foreground' \n                    : 'bg-accent/10 border-accent/20'\n                  }\n                `}>\n                  <CardContent className=\"p-4\">\n                    {!message.isUser && (\n                      <p className=\"text-sm font-semibold text-accent mb-1\">\n                        {therapistName}\n                      </p>\n                    )}\n                    <p className=\"text-sm leading-relaxed\">\n                      {message.content}\n                    </p>\n                  </CardContent>\n                </Card>\n                <p className={`text-xs text-muted-foreground mt-1 ${\n                  message.isUser ? 'text-right' : 'text-left'\n                }`}>\n                  {formatTime(message.createdAt || new Date())}\n                </p>\n              </div>\n              \n              {message.isUser && (\n                <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                  <User className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              )}\n            </div>\n          ))\n        )}\n        \n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-start space-x-3 justify-start\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <UserCheck className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"flex-1\">\n              <Card className=\"bg-accent/10 border-accent/20\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm font-semibold text-accent mb-1\">\n                    {therapistName}\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                    <span className=\"text-sm text-muted-foreground ml-2\">\n                      typing...\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input Area */}\n      <div className=\"border-t border-border p-4 bg-background dark:bg-background\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-1\">\n            <Input\n              ref={inputRef}\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              disabled={isLoading}\n              className=\"pr-12 bg-background border-border\"\n            />\n          </div>\n          <Button\n            onClick={handleSendMessage}\n            disabled={!inputMessage.trim() || isLoading}\n            className=\"bg-primary hover:bg-primary/90\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6289},"client/src/components/crisis-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, Phone, ExternalLink } from \"lucide-react\";\n\ninterface CrisisModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  detectedKeywords: string[];\n}\n\nexport default function CrisisModal({ isOpen, onClose, detectedKeywords }: CrisisModalProps) {\n  const handleCallCrisisLine = () => {\n    window.open('tel:988', '_self');\n  };\n\n  const handleCallEmergency = () => {\n    window.open('tel:911', '_self');\n  };\n\n  const handleFindResources = () => {\n    window.open('https://suicidepreventionlifeline.org/', '_blank');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-4\">\n        <DialogHeader>\n          <div className=\"flex flex-col items-center text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <DialogTitle className=\"text-xl font-bold text-foreground\">\n              We're Concerned About You\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-center text-muted-foreground\">\n            It sounds like you might be going through a really difficult time. Please know that help is available, and you don't have to face this alone.\n          </p>\n          \n          {detectedKeywords.length > 0 && (\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardContent className=\"p-3\">\n                <p className=\"text-sm text-red-800 font-medium\">\n                  We detected some concerning language in your message. Your safety is our priority.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n          \n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleCallCrisisLine}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call 988 - Crisis Lifeline\n            </Button>\n            \n            <Button\n              onClick={handleCallEmergency}\n              className=\"w-full bg-red-800 hover:bg-red-900 text-white\"\n            >\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call 911 - Emergency\n            </Button>\n            \n            <Button\n              onClick={handleFindResources}\n              variant=\"outline\"\n              className=\"w-full border-red-300 text-red-700 hover:bg-red-50\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Find Local Resources\n            </Button>\n          </div>\n          \n          <div className=\"border-t pt-4\">\n            <div className=\"flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Continue Session\n              </Button>\n              <Button\n                onClick={handleFindResources}\n                className=\"flex-1 bg-primary hover:bg-primary/90\"\n              >\n                Get Help Now\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              If you're in immediate danger, please call 911 or go to your nearest emergency room.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3740},"client/src/components/session-summary-modal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Clock, \n  Target, \n  Lightbulb, \n  CheckSquare, \n  Heart,\n  Download,\n  Mail,\n  Check\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Session } from \"@shared/schema\";\n\ninterface SessionSummaryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: number | null;\n  therapistName: string;\n  duration: number;\n  onViewAllSummaries?: () => void;\n  onReturnHome?: () => void;\n}\n\nexport default function SessionSummaryModal({ \n  isOpen, \n  onClose, \n  sessionId, \n  therapistName, \n  duration,\n  onViewAllSummaries,\n  onReturnHome \n}: SessionSummaryModalProps) {\n  const { toast } = useToast();\n\n  const { data: session, isLoading } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId],\n    enabled: isOpen && !!sessionId,\n  });\n\n  const formatDuration = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes} minutes${remainingSeconds > 0 ? ` ${remainingSeconds} seconds` : ''}`;\n  };\n\n  const handleDownloadPDF = () => {\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"PDF download functionality will be available in the next update.\",\n    });\n  };\n\n  const handleEmailSummary = () => {\n    toast({\n      title: \"Feature Coming Soon\", \n      description: \"Email summary functionality will be available in the next update.\",\n    });\n  };\n\n  const handleFinish = () => {\n    toast({\n      title: \"Session Complete\",\n      description: \"Thank you for your session today. Take care of yourself.\",\n    });\n    \n    // Return to home page instead of just closing\n    if (onReturnHome) {\n      onReturnHome();\n    }\n    onClose();\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"text-center\">\n            <DialogTitle className=\"text-2xl font-bold text-foreground mb-2\">\n              Session Summary\n            </DialogTitle>\n            <p className=\"text-muted-foreground\">\n              Here's what we covered in your session with {therapistName}\n            </p>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Session Duration */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <h4 className=\"font-semibold text-blue-900\">Session Duration</h4>\n                  <p className=\"text-blue-800\">{formatDuration(duration)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Key Topics */}\n          {session?.keyTopics && Array.isArray(session.keyTopics) && session.keyTopics.length > 0 && (\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Target className=\"w-5 h-5 text-green-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-green-900 mb-2\">Key Topics Discussed</h4>\n                    <ul className=\"text-green-800 space-y-1\">\n                      {session.keyTopics.map((topic: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-green-600 rounded-full\"></span>\n                          <span>{topic}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* CBT Techniques */}\n          {session?.cbtTechniques && Array.isArray(session.cbtTechniques) && session.cbtTechniques.length > 0 && (\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Lightbulb className=\"w-5 h-5 text-purple-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-purple-900 mb-2\">CBT Techniques Used</h4>\n                    <ul className=\"text-purple-800 space-y-1\">\n                      {session.cbtTechniques.map((technique: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-purple-600 rounded-full\"></span>\n                          <span>{technique}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Homework & Next Steps */}\n          {session?.homework && Array.isArray(session.homework) && session.homework.length > 0 && (\n            <Card className=\"bg-orange-50 border-orange-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <CheckSquare className=\"w-5 h-5 text-orange-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-orange-900 mb-2\">Homework & Next Steps</h4>\n                    <ul className=\"text-orange-800 space-y-1\">\n                      {session.homework.map((task: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-orange-600 rounded-full\"></span>\n                          <span>{task}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Therapist Notes */}\n          {session?.therapistNotes && (\n            <Card className=\"bg-teal-50 border-teal-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Heart className=\"w-5 h-5 text-teal-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-teal-900 mb-2\">\n                      {therapistName}'s Notes\n                    </h4>\n                    <p className=\"text-teal-800 italic\">\n                      \"{session.therapistNotes}\"\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Default content when no session data */}\n          {(!session?.keyTopics || !Array.isArray(session?.keyTopics) || session?.keyTopics.length === 0) && \n           (!session?.cbtTechniques || !Array.isArray(session?.cbtTechniques) || session?.cbtTechniques.length === 0) && \n           (!session?.homework || !Array.isArray(session?.homework) || session?.homework.length === 0) && (\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">\n                  Session summary is being generated. This may take a moment.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"flex space-x-3 pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={handleDownloadPDF}\n            className=\"flex-1\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download PDF\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={handleEmailSummary}\n            className=\"flex-1\"\n          >\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Email Summary\n          </Button>\n          \n          {onViewAllSummaries && (\n            <Button\n              variant=\"outline\"\n              onClick={onViewAllSummaries}\n              className=\"flex-1\"\n            >\n              View All Sessions\n            </Button>\n          )}\n          \n          <Button\n            onClick={handleFinish}\n            className=\"flex-1 bg-primary hover:bg-primary/90\"\n          >\n            <Check className=\"w-4 h-4 mr-2\" />\n            Done\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9241},"client/src/components/sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nimport { \n  MessageCircle, \n  BookOpen, \n  Smile, \n  Wrench, \n  Phone, \n  X,\n  ChevronRight,\n  ChevronDown,\n  FileText,\n  Calendar,\n  Clock,\n  Home,\n  Settings,\n  User\n} from \"lucide-react\";\nimport type { CurrentPage } from \"@/App\";\nimport type { Session } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: number | null;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  onEndSession?: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose, sessionId, onPageChange, currentPage, onEndSession }: SidebarProps) {\n  const [activeSection, setActiveSection] = useState(currentPage);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [pendingNavigation, setPendingNavigation] = useState<CurrentPage | null>(null);\n\n  // Update active section when current page changes\n  useEffect(() => {\n    setActiveSection(currentPage);\n  }, [currentPage]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      if (!sessionId) throw new Error(\"No active session\");\n      \n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Stop any ongoing speech synthesis\n      if (typeof window !== 'undefined' && window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n      \n      // Clear session from localStorage to prevent recreation\n      localStorage.removeItem('eunoia-session-id');\n      \n      // Invalidate sessions cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions/summaries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      \n      // Only show toast if we're ending from a non-session page\n      if (currentPage !== 'session') {\n        toast({\n          title: \"Session Ended\",\n          description: \"Your session has been ended.\",\n        });\n      }\n\n      // Navigate to the pending page\n      if (pendingNavigation) {\n        onPageChange(pendingNavigation);\n        setPendingNavigation(null);\n      } else {\n        // Default to home if no pending navigation\n        onPageChange('home');\n      }\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to end session properly.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleNavigation = (page: CurrentPage) => {\n    // Only show confirmation if we're currently in an active session AND on the session page\n    if (sessionId && currentPage === 'session') {\n      setPendingNavigation(page);\n      setShowConfirmDialog(true);\n    } else if (sessionId && currentPage !== 'session') {\n      // If there's a session but we're not on the session page, auto-end it silently\n      setPendingNavigation(page);\n      endSessionMutation.mutate();\n    } else {\n      // No active session, navigate directly\n      onPageChange(page);\n      onClose();\n    }\n  };\n\n  const handleConfirmEndSession = () => {\n    setShowConfirmDialog(false);\n    // Call the onEndSession callback if available (from session page)\n    if (onEndSession) {\n      onEndSession();\n    } else {\n      endSessionMutation.mutate();\n    }\n  };\n\n  const handleCancelNavigation = () => {\n    setShowConfirmDialog(false);\n    setPendingNavigation(null);\n  };\n\n\n\n  const menuItems = [\n    {\n      id: \"home\",\n      label: \"Home\",\n      icon: Home,\n      active: activeSection === \"home\" && sessionId === null, // Only active when on home without session\n      action: () => handleNavigation('home')\n    },\n    {\n      id: \"session\",\n      label: \"Talk to Eunoia\",\n      icon: MessageCircle,\n      active: activeSection === \"session\", // Show active when on session page\n      action: () => {\n        if (sessionId) {\n          // Navigate to active session\n          handleNavigation('session');\n        } else {\n          // No session, go to home to start one\n          handleNavigation('home');\n        }\n      }\n    },\n    {\n      id: \"journal\",\n      label: \"Journal\", \n      icon: BookOpen,\n      active: activeSection === \"journal\",\n      action: () => handleNavigation('journal')\n    },\n    {\n      id: \"mood\",\n      label: \"Mood Check-in\",\n      icon: Smile,\n      active: activeSection === \"mood\",\n      action: () => handleNavigation('mood')\n    },\n    {\n      id: \"cbt\",\n      label: \"CBT Coping Tools\",\n      icon: Wrench,\n      active: activeSection === \"cbt-tools\",\n      action: () => handleNavigation('cbt-tools')\n    },\n    {\n      id: \"summaries\",\n      label: \"Session Summaries\",\n      icon: FileText,\n      active: activeSection === \"session-summaries\",\n      action: () => handleNavigation('session-summaries')\n    },\n    {\n      id: \"settings\",\n      label: \"Session Settings\",\n      icon: Settings,\n      active: activeSection === \"settings\",\n      action: () => handleNavigation('settings')\n    },\n    {\n      id: \"account\",\n      label: \"Account Settings\",\n      icon: User,\n      active: activeSection === \"account\",\n      action: () => handleNavigation('account')\n    }\n  ];\n\n  const cbtTools = [\n    \"Breathing Exercises\",\n    \"Thought Challenging\",\n    \"Grounding Techniques\",\n    \"Progressive Muscle Relaxation\",\n    \"Cognitive Restructuring\",\n    \"Mindfulness Meditation\"\n  ];\n\n  const journalPrompts = [\n    \"How am I feeling right now?\",\n    \"What am I grateful for today?\",\n    \"What challenged me today?\",\n    \"What did I learn about myself?\",\n    \"What would I like to focus on tomorrow?\"\n  ];\n\n  const SessionSummariesSection = () => {\n    const { data: sessions = [], isLoading } = useQuery<Session[]>({\n      queryKey: [\"/api/sessions/summaries\"],\n    });\n\n    if (isLoading) {\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    const completedSessions = sessions.filter(session => session.summary);\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-medium\">Past Session Summaries</h4>\n            {completedSessions.length > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleNavigation('session-summaries')}\n                className=\"text-xs\"\n              >\n                View All\n              </Button>\n            )}\n          </div>\n          {completedSessions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 mx-auto text-muted-foreground mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                No session summaries yet. Complete a therapy session to see summaries here.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {completedSessions.slice(0, 2).map((session) => (\n                <Card key={session.id} className=\"cursor-pointer hover:bg-accent/5 transition-colors\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-sm\">\n                        Session {session.id}\n                      </h5>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {session.duration ? `${Math.floor(session.duration / 60)}min` : ''}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-2\">\n                      <Calendar className=\"w-3 h-3\" />\n                      {session.startTime ? new Date(session.startTime).toLocaleDateString() : 'Unknown date'}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                      {session.summary ? session.summary.substring(0, 100) + '...' : 'No summary available'}\n                    </p>\n                    {session.keyTopics && session.keyTopics.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {session.keyTopics.slice(0, 2).map((topic, index) => (\n                          <span key={index} className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">\n                            {topic}\n                          </span>\n                        ))}\n                        {session.keyTopics.length > 2 && (\n                          <span className=\"text-xs text-muted-foreground\">+{session.keyTopics.length - 2} more</span>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n              {completedSessions.length > 2 && (\n                <div className=\"text-center pt-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleNavigation('session-summaries')}\n                    className=\"text-xs\"\n                  >\n                    View All {completedSessions.length} Sessions\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"session\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              You're currently in an active therapy session. Use the main interface to communicate with your therapist.\n            </p>\n            <div className=\"bg-primary/10 rounded-lg p-3\">\n              <p className=\"text-sm font-medium text-primary\">Session Active</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Your conversation is being recorded for session summary purposes.\n              </p>\n            </div>\n          </div>\n        );\n      \n      case \"journal\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Journal features are coming soon. In the meantime, you can discuss your thoughts and feelings during a therapy session.\n            </p>\n          </div>\n        );\n      \n      case \"mood\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Mood check-in features are coming soon. In the meantime, you can discuss your feelings during a therapy session.\n            </p>\n          </div>\n        );\n      \n      case \"cbt\":\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-3\">CBT Coping Tools</h4>\n              <div className=\"space-y-2 max-h-64 overflow-y-auto scrollbar-thin scrollbar-thumb-border scrollbar-track-background\">\n                {cbtTools.map((tool, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    className=\"w-full justify-between text-left h-auto py-3 px-4 text-foreground border-border hover:bg-accent/10 break-words\"\n                  >\n                    <span className=\"text-sm leading-relaxed flex-1 text-left\">{tool}</span>\n                    <ChevronRight className=\"h-4 w-4 flex-shrink-0 ml-2\" />\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"bg-accent/10 rounded-lg p-3\">\n              <h5 className=\"font-medium text-accent mb-2\">Quick Exercise</h5>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Try the 4-7-8 breathing technique:\n              </p>\n              <ol className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>1. Inhale for 4 counts</li>\n                <li>2. Hold for 7 counts</li>\n                <li>3. Exhale for 8 counts</li>\n                <li>4. Repeat 3-4 times</li>\n              </ol>\n            </div>\n          </div>\n        );\n      \n      case \"summaries\":\n        return <SessionSummariesSection />;\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed z-50 h-full bg-background shadow-lg border-r border-border\n        w-80 transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        <div className=\"flex flex-col h-full max-h-screen\">\n          {/* Fixed Header */}\n          <div className=\"p-4 border-b border-border flex-shrink-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-lg font-bold text-primary\">Eunoia</h2>\n                <p className=\"text-xs text-muted-foreground\">Your AI Therapeutic Companion</p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Scrollable Content Area */}\n          <div className=\"flex-1 overflow-y-auto min-h-0\">\n            <div className=\"space-y-4 p-4\">\n              {/* Navigation */}\n              <nav className=\"space-y-2\">\n                {menuItems.map((item) => {\n                  const IconComponent = item.icon;\n                  return (\n                    <Button\n                      key={item.id}\n                      variant={item.active ? \"default\" : \"ghost\"}\n                      className=\"w-full justify-start space-x-3 h-12\"\n                      onClick={item.action}\n                    >\n                      <IconComponent className=\"h-5 w-5\" />\n                      <span>{item.label}</span>\n                    </Button>\n                  );\n                })}\n              </nav>\n              \n              {/* Additional Content */}\n              <div className=\"space-y-4\">\n                {renderContent()}\n              </div>\n              \n              {/* Crisis Support */}\n              <div className=\"mt-6\">\n                <Card className=\"bg-red-50 dark:bg-red-950 border-red-200 dark:border-red-800\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Phone className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                      <span className=\"font-semibold text-red-800 dark:text-red-200 text-sm\">Crisis Support</span>\n                    </div>\n                    <div className=\"space-y-1 text-xs\">\n                      <div className=\"font-medium text-red-800 dark:text-red-200\">988 - Suicide & Crisis Lifeline</div>\n                      <div className=\"font-medium text-red-800 dark:text-red-200\">911 - Emergency Services</div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>End Current Session?</AlertDialogTitle>\n            <AlertDialogDescription>\n              You have an active therapy session. Are you sure you want to end it and navigate to a different page? \n              Your session progress will be saved and a summary will be generated.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleCancelNavigation}>\n              Stay in Session\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleConfirmEndSession}\n              disabled={endSessionMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {endSessionMutation.isPending ? \"Ending Session...\" : \"End Session\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":17372},"client/src/components/voice-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Mic, \n  MicOff, \n  Volume2, \n  Pause, \n  Lightbulb, \n  User, \n  UserCheck \n} from \"lucide-react\";\nimport { useSpeech } from \"@/hooks/use-speech\";\nimport type { Message } from \"@shared/schema\";\n\ninterface VoiceInterfaceProps {\n  therapistName: string;\n  onSendMessage: (content: string, isVoice: boolean) => void;\n  messages: Message[];\n  isLoading: boolean;\n  sessionEnded?: boolean;\n}\n\nexport default function VoiceInterface({ \n  therapistName, \n  onSendMessage, \n  messages, \n  isLoading,\n  sessionEnded = false \n}: VoiceInterfaceProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentTranscript, setCurrentTranscript] = useState(\"\");\n  const [lastAIResponse, setLastAIResponse] = useState(\"\");\n  \n  const { \n    startListening, \n    stopListening, \n    speak, \n    stopSpeaking,\n    isListening, \n    isSupported \n  } = useSpeech();\n\n  // Get latest AI response\n  useEffect(() => {\n    const latestAIMessage = messages\n      .filter(m => m.role === 'assistant')\n      .slice(-1)[0];\n    \n    if (latestAIMessage && latestAIMessage.content !== lastAIResponse) {\n      setLastAIResponse(latestAIMessage.content);\n      // Auto-speak the response\n      speak(latestAIMessage.content);\n    }\n  }, [messages, lastAIResponse, speak]);\n\n  // Stop all speech when session ends\n  useEffect(() => {\n    if (sessionEnded) {\n      stopSpeaking();\n      stopListening();\n    }\n  }, [sessionEnded, stopSpeaking, stopListening]);\n\n  // Cleanup effect when component unmounts or mode changes\n  useEffect(() => {\n    return () => {\n      stopSpeaking();\n      stopListening();\n    };\n  }, [stopSpeaking, stopListening]);\n\n  const handleStartRecording = async () => {\n    if (!isSupported) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n    \n    setIsRecording(true);\n    setCurrentTranscript(\"\");\n    \n    try {\n      const transcript = await startListening();\n      setCurrentTranscript(transcript);\n      \n      if (transcript.trim()) {\n        onSendMessage(transcript, true);\n      }\n    } catch (error) {\n      console.error('Speech recognition error:', error);\n    } finally {\n      setIsRecording(false);\n    }\n  };\n\n  const handleStopRecording = () => {\n    setIsRecording(false);\n    stopListening();\n    \n    if (currentTranscript.trim()) {\n      onSendMessage(currentTranscript, true);\n    }\n  };\n\n  const handleRepeatResponse = () => {\n    if (lastAIResponse) {\n      speak(lastAIResponse);\n    }\n  };\n\n  const toggleRecording = () => {\n    if (isRecording) {\n      handleStopRecording();\n    } else {\n      handleStartRecording();\n    }\n  };\n\n  const latestUserMessage = messages.filter(m => m.role === 'user').slice(-1)[0];\n  const latestAIMessage = messages.filter(m => m.role === 'assistant').slice(-1)[0];\n\n  return (\n    <div className=\"h-full flex flex-col items-center justify-center p-8 space-y-8\">\n      <div className=\"max-w-2xl mx-auto text-center\">\n        \n        {/* Therapist Avatar */}\n        <div className=\"mb-8\">\n          <div className=\"w-32 h-32 bg-gradient-primary rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg\">\n            <UserCheck className=\"text-white text-4xl\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n            {therapistName} is listening\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {isRecording ? \"I'm listening...\" : \"Tap the button below to start talking\"}\n          </p>\n        </div>\n        \n        {/* Voice Recording Button */}\n        <div className=\"mb-8\">\n          <Button\n            onClick={toggleRecording}\n            disabled={isLoading || !isSupported}\n            className={`\n              w-24 h-24 rounded-full shadow-lg transition-all transform hover:scale-105 \n              focus:outline-none focus:ring-4 focus:ring-primary/30\n              ${isRecording \n                ? 'bg-red-500 hover:bg-red-600 animate-pulse' \n                : 'bg-primary hover:bg-primary/90'\n              }\n            `}\n          >\n            {isRecording ? (\n              <MicOff className=\"text-white text-2xl\" />\n            ) : (\n              <Mic className=\"text-white text-2xl\" />\n            )}\n          </Button>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            {isRecording ? \"Recording... tap to stop\" : \"Tap to speak\"}\n          </p>\n        </div>\n        \n        {/* Recording Status */}\n        {isRecording && (\n          <Card className=\"mb-6 bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center space-x-2 mb-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm font-medium text-blue-800\">Recording...</span>\n              </div>\n              <p className=\"text-sm text-blue-700\">\n                {currentTranscript || \"Listening for your voice...\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Latest User Message */}\n        {latestUserMessage && !isRecording && (\n          <Card className=\"mb-6 bg-primary/10 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <User className=\"w-6 h-6 text-primary mt-1\" />\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-primary mb-1\">You said:</p>\n                  <p className=\"text-sm text-foreground\">{latestUserMessage.content}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* AI Response */}\n        {latestAIMessage && !isRecording && (\n          <Card className=\"mb-6 bg-accent/10 border-accent/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <UserCheck className=\"w-6 h-6 text-accent mt-1\" />\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-accent mb-1\">{therapistName}</p>\n                  <p className=\"text-sm text-foreground\">{latestAIMessage.content}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Loading State */}\n        {isLoading && (\n          <Card className=\"mb-6 bg-muted/50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                <span className=\"text-sm text-muted-foreground ml-2\">\n                  {therapistName} is thinking...\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Quick Actions */}\n        <div className=\"flex flex-wrap justify-center gap-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsRecording(!isRecording)}\n            disabled={isLoading}\n          >\n            <Pause className=\"w-4 h-4 mr-2\" />\n            {isRecording ? \"Pause\" : \"Resume\"}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleRepeatResponse}\n            disabled={!lastAIResponse}\n          >\n            <Volume2 className=\"w-4 h-4 mr-2\" />\n            Repeat Response\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"bg-accent/10 text-accent hover:bg-accent/20\"\n          >\n            <Lightbulb className=\"w-4 h-4 mr-2\" />\n            Get Coping Tool\n          </Button>\n        </div>\n        \n        {/* Browser Support Warning */}\n        {!isSupported && (\n          <Card className=\"mt-6 bg-warning/10 border-warning/20\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-sm text-warning\">\n                Voice recognition is not supported in your browser. Please use a modern browser like Chrome, Firefox, or Safari for the best experience.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8700},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-speech.ts":{"content":"import { useState, useCallback, useRef } from \"react\";\n\nexport interface SpeechHook {\n  startListening: () => Promise<string>;\n  stopListening: () => void;\n  speak: (text: string) => void;\n  stopSpeaking: () => void;\n  isListening: boolean;\n  isSupported: boolean;\n}\n\nexport function useSpeech(): SpeechHook {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef<any>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n  \n  // Check if browser supports speech recognition and synthesis\n  const isSupported = typeof window !== 'undefined' && \n    ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) &&\n    'speechSynthesis' in window;\n\n  const startListening = useCallback((): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (!isSupported) {\n        reject(new Error(\"Speech recognition not supported\"));\n        return;\n      }\n\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.maxAlternatives = 1;\n      \n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      \n      recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        resolve(transcript);\n      };\n      \n      recognition.onerror = (event: any) => {\n        setIsListening(false);\n        reject(new Error(`Speech recognition error: ${event.error}`));\n      };\n      \n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      \n      recognitionRef.current = recognition;\n      recognition.start();\n    });\n  }, [isSupported]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      recognitionRef.current = null;\n    }\n    setIsListening(false);\n  }, []);\n\n  const stopSpeaking = useCallback(() => {\n    if (isSupported && window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n  }, [isSupported]);\n\n  const speak = useCallback((text: string) => {\n    if (!isSupported || !text.trim()) return;\n\n    // Cancel any ongoing speech\n    if (window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 0.9;\n    utterance.pitch = 1.0;\n    utterance.volume = 0.8;\n    \n    // Try to use a more natural voice\n    const voices = window.speechSynthesis.getVoices();\n    const preferredVoice = voices.find(voice => \n      voice.name.includes('Google') || \n      voice.name.includes('Microsoft') ||\n      voice.name.includes('Alex') ||\n      voice.name.includes('Samantha')\n    );\n    \n    if (preferredVoice) {\n      utterance.voice = preferredVoice;\n    }\n    \n    utterance.onerror = (event) => {\n      console.error('Speech synthesis error:', event.error);\n    };\n    \n    window.speechSynthesis.speak(utterance);\n  }, [isSupported]);\n\n  return {\n    startListening,\n    stopListening,\n    speak,\n    stopSpeaking,\n    isListening,\n    isSupported\n  };\n}\n\n// Extend the Window interface to include speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n","size_bytes":3392},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/crisis-detection.ts":{"content":"export const CRISIS_KEYWORDS = [\n  // Direct suicidal language\n  'suicide', 'kill myself', 'end my life', 'take my life', 'want to die',\n  'better off dead', 'end it all', 'no point living', 'life is pointless',\n  'nothing matters', 'worthless', 'useless', 'burden to everyone',\n  \n  // Self-harm language\n  'hurt myself', 'cut myself', 'self harm', 'self-harm', 'harm myself',\n  'pain myself', 'punish myself', 'cut my arms', 'cut my wrists',\n  \n  // Method-specific language\n  'overdose', 'pills', 'jump off', 'hang myself', 'rope', 'bridge',\n  'gun', 'knife', 'razor', 'bleeding', 'suffocate',\n  \n  // Hopelessness indicators\n  'no hope', 'hopeless', 'helpless', 'trapped', 'stuck forever',\n  'can\\'t go on', 'give up', 'quit trying', 'done trying',\n  \n  // Isolation language\n  'nobody cares', 'all alone', 'no one understands', 'isolated',\n  'abandoned', 'rejected', 'unloved', 'unwanted',\n  \n  // Planning language\n  'plan to hurt', 'plan to die', 'thought about', 'considering',\n  'preparing to', 'ready to', 'time to go', 'final goodbye',\n  \n  // Extreme distress\n  'can\\'t take it', 'too much pain', 'unbearable', 'suffering',\n  'torment', 'agony', 'breaking point', 'at my limit'\n];\n\nexport function detectCrisisKeywords(text: string): string[] {\n  if (!text) return [];\n  \n  const lowerText = text.toLowerCase();\n  const detectedKeywords: string[] = [];\n  \n  for (const keyword of CRISIS_KEYWORDS) {\n    if (lowerText.includes(keyword.toLowerCase())) {\n      detectedKeywords.push(keyword);\n    }\n  }\n  \n  return detectedKeywords;\n}\n\nexport function calculateCrisisScore(text: string): number {\n  const keywords = detectCrisisKeywords(text);\n  const wordCount = text.split(/\\s+/).length;\n  \n  if (keywords.length === 0) return 0;\n  \n  // Base score from keyword density\n  const density = keywords.length / wordCount;\n  let score = density * 100;\n  \n  // Boost score for high-risk keywords\n  const highRiskKeywords = [\n    'suicide', 'kill myself', 'end my life', 'want to die',\n    'plan to hurt', 'plan to die', 'overdose', 'jump off'\n  ];\n  \n  const highRiskCount = keywords.filter(keyword => \n    highRiskKeywords.includes(keyword)\n  ).length;\n  \n  score += highRiskCount * 25;\n  \n  // Cap at 100\n  return Math.min(score, 100);\n}\n\nexport function shouldTriggerCrisisIntervention(text: string): boolean {\n  const keywords = detectCrisisKeywords(text);\n  const score = calculateCrisisScore(text);\n  \n  // Trigger if any high-risk keywords are detected or score is high\n  return keywords.length > 0 || score > 30;\n}\n","size_bytes":2527},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes instead of Infinity for auth queries\n      retry: false,\n      refetchOnMount: true, // Always refetch on mount for fresh data\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1513},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/cbt-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Brain, Wind, Lightbulb, Heart, Target, Clock, Menu } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface CBTToolsPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function CBTToolsPage({ onBack, onPageChange, currentPage, sessionId }: CBTToolsPageProps) {\n  const [breathingActive, setBreathingActive] = useState(false);\n  const [breathingPhase, setBreathingPhase] = useState<'inhale' | 'hold' | 'exhale'>('inhale');\n  const [breathingCount, setBreathingCount] = useState(4);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const startBreathingExercise = () => {\n    setBreathingActive(true);\n    breathingCycle();\n  };\n\n  const breathingCycle = () => {\n    // Inhale for 4 seconds\n    setBreathingPhase('inhale');\n    setBreathingCount(4);\n    \n    const inhaleTimer = setInterval(() => {\n      setBreathingCount(prev => {\n        if (prev <= 1) {\n          clearInterval(inhaleTimer);\n          // Hold for 7 seconds\n          setBreathingPhase('hold');\n          setBreathingCount(7);\n          \n          const holdTimer = setInterval(() => {\n            setBreathingCount(prev => {\n              if (prev <= 1) {\n                clearInterval(holdTimer);\n                // Exhale for 8 seconds\n                setBreathingPhase('exhale');\n                setBreathingCount(8);\n                \n                const exhaleTimer = setInterval(() => {\n                  setBreathingCount(prev => {\n                    if (prev <= 1) {\n                      clearInterval(exhaleTimer);\n                      setBreathingActive(false);\n                      return 0;\n                    }\n                    return prev - 1;\n                  });\n                }, 1000);\n                \n                return prev - 1;\n              }\n              return prev - 1;\n            });\n          }, 1000);\n          \n          return prev - 1;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const thoughtChallengingQuestions = [\n    \"Is this thought based on facts or feelings?\",\n    \"What evidence do I have that this thought is true?\",\n    \"What evidence do I have that this thought might not be true?\",\n    \"What would I tell a friend who had this thought?\",\n    \"What's the worst that could realistically happen?\",\n    \"What's the best that could happen?\",\n    \"What's most likely to happen?\",\n    \"How will this matter in 5 years?\",\n    \"What are some other ways to look at this situation?\",\n    \"What would be a more balanced way to think about this?\"\n  ];\n\n  const groundingTechniques = [\n    {\n      name: \"5-4-3-2-1 Technique\",\n      description: \"Name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste\"\n    },\n    {\n      name: \"Progressive Muscle Relaxation\",\n      description: \"Tense and then relax each muscle group in your body, starting from your toes and working up to your head\"\n    },\n    {\n      name: \"Box Breathing\",\n      description: \"Breathe in for 4 counts, hold for 4, exhale for 4, hold for 4. Repeat several times\"\n    },\n    {\n      name: \"Mindful Observation\",\n      description: \"Choose an object and observe it closely for 2-3 minutes, noticing every detail\"\n    }\n  ];\n\n  const copingStrategies = [\n    {\n      category: \"Anxiety\",\n      strategies: [\n        \"Deep breathing exercises\",\n        \"Progressive muscle relaxation\",\n        \"Grounding techniques (5-4-3-2-1)\",\n        \"Challenge anxious thoughts\",\n        \"Use positive self-talk\",\n        \"Practice mindfulness meditation\"\n      ]\n    },\n    {\n      category: \"Depression\",\n      strategies: [\n        \"Behavioral activation (plan pleasant activities)\",\n        \"Challenge negative thoughts\",\n        \"Maintain a daily routine\",\n        \"Practice gratitude\",\n        \"Exercise regularly\",\n        \"Connect with supportive people\"\n      ]\n    },\n    {\n      category: \"Stress\",\n      strategies: [\n        \"Time management and prioritization\",\n        \"Break large tasks into smaller steps\",\n        \"Practice saying 'no' to excessive demands\",\n        \"Use relaxation techniques\",\n        \"Maintain work-life balance\",\n        \"Seek social support\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral\">\n      <div className=\"flex h-full\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Brain className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">CBT Coping Tools</h1>\n              </div>\n            </div>\n\n        <Tabs defaultValue=\"breathing\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"breathing\">Breathing</TabsTrigger>\n            <TabsTrigger value=\"thoughts\">Thought Challenge</TabsTrigger>\n            <TabsTrigger value=\"grounding\">Grounding</TabsTrigger>\n            <TabsTrigger value=\"strategies\">Coping Strategies</TabsTrigger>\n          </TabsList>\n\n          {/* Breathing Exercises */}\n          <TabsContent value=\"breathing\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Wind className=\"w-5 h-5 mr-2\" />\n                  Breathing Exercises\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Practice controlled breathing to reduce anxiety and promote relaxation\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* 4-7-8 Breathing */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-semibold mb-4\">4-7-8 Breathing Technique</h3>\n                  \n                  {breathingActive ? (\n                    <div className=\"space-y-4\">\n                      <div className={`\n                        w-32 h-32 rounded-full mx-auto flex items-center justify-center text-white font-bold text-2xl\n                        ${breathingPhase === 'inhale' ? 'bg-blue-500 animate-pulse' : \n                          breathingPhase === 'hold' ? 'bg-yellow-500' : 'bg-green-500 animate-pulse'}\n                      `}>\n                        {breathingCount}\n                      </div>\n                      <div className=\"text-lg capitalize font-medium\">\n                        {breathingPhase === 'inhale' ? '🌬️ Breathe In' : \n                         breathingPhase === 'hold' ? '⏸️ Hold' : '💨 Breathe Out'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"w-32 h-32 rounded-full mx-auto bg-muted flex items-center justify-center\">\n                        <Wind className=\"w-12 h-12 text-muted-foreground\" />\n                      </div>\n                      <Button onClick={startBreathingExercise} className=\"mx-auto\">\n                        Start Exercise\n                      </Button>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-6 text-sm text-muted-foreground max-w-md mx-auto\">\n                    <p className=\"mb-2\"><strong>Instructions:</strong></p>\n                    <ol className=\"text-left space-y-1\">\n                      <li>1. Inhale through your nose for 4 counts</li>\n                      <li>2. Hold your breath for 7 counts</li>\n                      <li>3. Exhale through your mouth for 8 counts</li>\n                      <li>4. This completes one cycle</li>\n                    </ol>\n                  </div>\n                </div>\n\n                {/* Other Breathing Techniques */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-8\">\n                  <Card className=\"border-primary/20 bg-primary/5\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2 text-foreground\">Box Breathing</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Inhale 4, Hold 4, Exhale 4, Hold 4\n                      </p>\n                      <p className=\"text-xs text-foreground\">Great for focus and concentration</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"border-accent/20 bg-accent/5\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2 text-foreground\">Deep Belly Breathing</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Slow, deep breaths using your diaphragm\n                      </p>\n                      <p className=\"text-xs text-foreground\">Reduces stress and promotes relaxation</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Thought Challenging */}\n          <TabsContent value=\"thoughts\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Lightbulb className=\"w-5 h-5 mr-2\" />\n                  Thought Challenging\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Use these questions to examine and challenge negative or unhelpful thoughts\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {thoughtChallengingQuestions.map((question, index) => (\n                    <Card key={index} className=\"border-primary/20 bg-primary/5\">\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm font-medium text-foreground\">{question}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6 p-4 bg-accent/10 border border-accent/20 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center text-foreground\">\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    How to Use\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    When you notice a negative or distressing thought, pick 2-3 of these questions and genuinely try to answer them. \n                    This helps you examine the thought objectively and often reveals that it may not be as accurate or helpful as it first seemed.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Grounding Techniques */}\n          <TabsContent value=\"grounding\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"w-5 h-5 mr-2\" />\n                  Grounding Techniques\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Techniques to help you stay present and connected to the moment\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {groundingTechniques.map((technique, index) => (\n                    <Card key={index} className=\"border-accent/20 bg-accent/5\">\n                      <CardContent className=\"p-6\">\n                        <h4 className=\"font-semibold mb-3 text-foreground\">{technique.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{technique.description}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6 p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center text-foreground\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    When to Use Grounding\n                  </h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• When feeling overwhelmed or panicky</li>\n                    <li>• During flashbacks or dissociation</li>\n                    <li>• When anxiety feels out of control</li>\n                    <li>• To reconnect with the present moment</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Coping Strategies */}\n          <TabsContent value=\"strategies\">\n            <div className=\"space-y-6\">\n              {copingStrategies.map((category, index) => (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle>{category.category} Coping Strategies</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {category.strategies.map((strategy, strategyIndex) => (\n                        <div key={strategyIndex} className=\"flex items-center p-3 border border-border rounded-lg bg-muted/30\">\n                          <span className=\"text-sm text-foreground\">{strategy}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14936},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Menu, Settings, Heart, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { SessionSettings, CurrentPage } from \"@/App\";\n\ninterface HomeProps {\n  sessionSettings: SessionSettings;\n  onPageChange: (page: CurrentPage) => void;\n  onSessionStart: (sessionId: number) => void;\n}\n\nexport default function Home({ sessionSettings, onPageChange, onSessionStart }: HomeProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Get current user data for profile pic\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (settings: SessionSettings) => {\n      const response = await apiRequest(\"POST\", \"/api/sessions\", {\n        therapistPersonality: settings.therapistPersonality,\n        selectedVoice: settings.selectedVoice,\n        selectedGoals: settings.selectedGoals,\n      });\n      return response.json();\n    },\n    onSuccess: (session) => {\n      toast({\n        title: \"Session Started\",\n        description: \"Your therapy session has begun successfully.\",\n      });\n      onSessionStart(session.id);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error starting session\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const initializeSession = () => {\n    createSessionMutation.mutate(sessionSettings);\n  };\n\n  const getTherapistName = () => {\n    const personalities: Record<string, string> = {\n      empathetic: \"Dr. Emma\",\n      analytical: \"Dr. Alex\", \n      supportive: \"Dr. Sam\",\n      mindful: \"Dr. Maya\"\n    };\n    return personalities[sessionSettings.therapistPersonality] || \"Dr. Emma\";\n  };\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral relative overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        sessionId={null}\n        onPageChange={onPageChange}\n        currentPage=\"home\"\n      />\n\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-pink-400/20 to-blue-400/20 rounded-full blur-3xl\"></div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col min-h-screen\">\n        {/* Header */}\n        <div className=\"bg-background/80 backdrop-blur-sm shadow-sm border-b border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsSidebarOpen(true)}\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              \n              <h1 className=\"text-xl font-bold text-primary\">Eunoia</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onPageChange('settings')}\n                className=\"flex items-center space-x-2\"\n              >\n                <Settings className=\"h-4 w-4\" />\n                <span>Customize Session</span>\n              </Button>\n              \n              {/* Profile Picture */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onPageChange('account')}\n                className=\"p-1 rounded-full\"\n              >\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                  {(user as any)?.profilePic ? (\n                    <img \n                      src={(user as any).profilePic} \n                      alt=\"Profile\" \n                      className=\"w-full h-full rounded-full object-cover\" \n                    />\n                  ) : (\n                    <User className=\"w-4 h-4 text-white\" />\n                  )}\n                </div>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex items-center justify-center p-6\">\n          <div className=\"max-w-2xl w-full\">\n            <div className=\"text-center mb-12\">\n              {/* Animated Heart Icon */}\n              <div className=\"relative mb-8\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-red-400 to-pink-500 rounded-full flex items-center justify-center shadow-lg animate-pulse\">\n                  <Heart className=\"w-8 h-8 text-white fill-current\" />\n                </div>\n                <div className=\"absolute inset-0 w-16 h-16 mx-auto bg-gradient-to-br from-red-400/30 to-pink-500/30 rounded-full animate-ping\"></div>\n              </div>\n              \n              <h2 className=\"text-4xl font-bold text-gray-800 mb-4\">\n                Welcome to Your Safe Space\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-2\">\n                Ready to start your session with\n              </p>\n              <p className=\"text-xl font-semibold text-gray-800 mb-6\">\n                {getTherapistName()}\n              </p>\n              \n              {/* Session Info */}\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-lg p-6 mb-8 shadow-sm border border-gray-100\">\n                <div className=\"grid grid-cols-1 gap-4 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Therapist Personality:</span>\n                    <span className=\"font-medium text-gray-800 capitalize\">\n                      {sessionSettings.therapistPersonality}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Selected Goals:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {sessionSettings.selectedGoals.length} goal{sessionSettings.selectedGoals.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Voice Mode:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {sessionSettings.selectedVoice}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Start Button */}\n              <Button \n                onClick={initializeSession}\n                disabled={createSessionMutation.isPending}\n                size=\"lg\"\n                className=\"w-full h-12 text-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-200 shadow-lg\"\n              >\n                {createSessionMutation.isPending ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    <span>Starting Session...</span>\n                  </div>\n                ) : (\n                  \"Begin Your Session\"\n                )}\n              </Button>\n              \n              <p className=\"text-sm text-gray-500 mt-4\">\n                Take a moment to get comfortable and prepare for your session\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8120},"client/src/pages/journal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, BookOpen, Plus, Calendar, Menu, Trash2 } from \"lucide-react\";\nimport type { JournalEntry } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface JournalPageProps {\n  sessionId?: number;\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n}\n\nconst journalPrompts = [\n  \"How am I feeling right now?\",\n  \"What am I grateful for today?\",\n  \"What challenged me today?\",\n  \"What did I learn about myself?\",\n  \"What would I like to focus on tomorrow?\",\n  \"What emotions came up for me today?\",\n  \"What is one thing I did well today?\",\n  \"What is something I want to improve?\",\n  \"What brought me joy today?\",\n  \"What am I worried about?\"\n];\n\nexport default function JournalPage({ sessionId, onBack, onPageChange, currentPage }: JournalPageProps) {\n  const [newEntryTitle, setNewEntryTitle] = useState(\"\");\n  const [newEntryContent, setNewEntryContent] = useState(\"\");\n  const [selectedPrompt, setSelectedPrompt] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get journal entries\n  const { data: entries = [], isLoading } = useQuery({\n    queryKey: [\"/api/journal\", sessionId],\n    queryFn: async () => {\n      const url = sessionId ? `/api/journal?sessionId=${sessionId}` : \"/api/journal\";\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n\n  // Create journal entry mutation\n  const createEntryMutation = useMutation({\n    mutationFn: async (entryData: { title?: string; content: string; prompt?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/journal\", {\n        sessionId: sessionId || null,\n        title: entryData.title || null,\n        content: entryData.content,\n        prompt: entryData.prompt || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/journal\", sessionId] });\n      setNewEntryTitle(\"\");\n      setNewEntryContent(\"\");\n      setSelectedPrompt(\"\");\n      toast({\n        title: \"Entry Saved\",\n        description: \"Your journal entry has been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save journal entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete journal entry mutation\n  const deleteEntryMutation = useMutation({\n    mutationFn: async (entryId: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/journal/${entryId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/journal\", sessionId] });\n      toast({\n        title: \"Entry Deleted\",\n        description: \"Your journal entry has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete journal entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handlePromptSelect = (prompt: string) => {\n    setSelectedPrompt(prompt);\n    setNewEntryTitle(prompt);\n    setNewEntryContent(\"\"); // Clear content so user can respond to the prompt\n  };\n\n  const handleSaveEntry = () => {\n    if (!newEntryContent.trim()) {\n      toast({\n        title: \"Content Required\",\n        description: \"Please write something before saving your entry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEntryMutation.mutate({\n      title: newEntryTitle || undefined,\n      content: newEntryContent,\n      prompt: selectedPrompt || undefined,\n    });\n  };\n\n  const formatDate = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral\">\n      <div className=\"flex h-full\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId || null}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <BookOpen className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Journal</h1>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col lg:flex-row gap-6\">\n              {/* New Entry Form */}\n              <div className=\"flex-1 lg:flex-[2]\">\n                <Card className=\"mb-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Plus className=\"w-5 h-5 mr-2\" />\n                      New Journal Entry\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Title (Optional)</label>\n                      <Input\n                        value={newEntryTitle}\n                        onChange={(e) => setNewEntryTitle(e.target.value)}\n                        placeholder=\"Give your entry a title...\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Your Thoughts</label>\n                      <Textarea\n                        value={newEntryContent}\n                        onChange={(e) => setNewEntryContent(e.target.value)}\n                        placeholder=\"Write about your thoughts, feelings, experiences...\"\n                        className=\"min-h-32\"\n                        rows={6}\n                      />\n                    </div>\n                    \n                    <Button\n                      onClick={handleSaveEntry}\n                      disabled={createEntryMutation.isPending || !newEntryContent.trim()}\n                      className=\"w-full\"\n                    >\n                      {createEntryMutation.isPending ? \"Saving...\" : \"Save Entry\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Previous Entries */}\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-xl font-semibold text-foreground mb-4\">Previous Entries</h2>\n                  \n                  {isLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : entries.length === 0 ? (\n                    <Card className=\"text-center py-8\">\n                      <CardContent>\n                        <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No journal entries yet. Start writing your first entry above!</p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    entries.map((entry: JournalEntry) => (\n                      <Card key={entry.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              {entry.title && (\n                                <h3 className=\"font-semibold text-foreground mb-2\">{entry.title}</h3>\n                              )}\n                              {entry.prompt && entry.prompt !== entry.title && (\n                                <p className=\"text-sm text-primary mb-2 italic\">Prompt: {entry.prompt}</p>\n                              )}\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"flex items-center text-sm text-muted-foreground\">\n                                <Calendar className=\"w-4 h-4 mr-1\" />\n                                {formatDate(entry.createdAt || new Date())}\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => deleteEntryMutation.mutate(entry.id)}\n                                disabled={deleteEntryMutation.isPending}\n                                className=\"h-6 w-6 p-0 text-muted-foreground hover:text-destructive\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <p className=\"text-foreground whitespace-pre-wrap\">{entry.content}</p>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Prompts Sidebar */}\n              <div className=\"w-full lg:w-80 lg:flex-shrink-0 space-y-4\">\n                <Card className=\"lg:sticky lg:top-6\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <span className=\"w-5 h-5 mr-2 text-primary\">💡</span>\n                      Writing Prompts\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Click any prompt to start writing\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2 overflow-hidden\">\n                    {journalPrompts.map((prompt, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        className=\"w-full text-left justify-start h-auto py-3 px-4 text-sm font-normal bg-background hover:bg-primary/10 hover:text-primary hover:border-primary/50 border-border dark:bg-background dark:hover:bg-primary/10 dark:border-border dark:hover:border-primary/50 transition-all duration-200 whitespace-normal\"\n                        onClick={() => handlePromptSelect(prompt)}\n                      >\n                        <div className=\"flex items-start space-x-3 w-full min-w-0\">\n                          <div className=\"w-1.5 h-1.5 rounded-full bg-primary/60 mt-2 flex-shrink-0\"></div>\n                          <div className=\"leading-relaxed text-left flex-1 min-w-0 break-words overflow-hidden\">\n                            {prompt}\n                          </div>\n                        </div>\n                      </Button>\n                    ))}\n                    \n                    <div className=\"mt-4 p-3 bg-muted/30 rounded-lg border border-dashed border-border\">\n                      <p className=\"text-xs text-muted-foreground text-center break-words\">\n                        💡 Tip: Prompts help you explore your thoughts and feelings when you're not sure where to start\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12658},"client/src/pages/mood.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Smile, TrendingUp, Calendar, Menu, Trash2 } from \"lucide-react\";\nimport type { MoodEntry } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface MoodPageProps {\n  sessionId?: number;\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n}\n\nconst moodEmojis = [\n  { emoji: \"😊\", label: \"Happy\", value: 8 },\n  { emoji: \"😐\", label: \"Neutral\", value: 5 },\n  { emoji: \"😔\", label: \"Sad\", value: 3 },\n  { emoji: \"😟\", label: \"Worried\", value: 4 },\n  { emoji: \"😴\", label: \"Tired\", value: 4 },\n  { emoji: \"😤\", label: \"Frustrated\", value: 3 },\n  { emoji: \"😰\", label: \"Anxious\", value: 2 },\n  { emoji: \"🤗\", label: \"Loved\", value: 9 },\n  { emoji: \"😡\", label: \"Angry\", value: 2 },\n  { emoji: \"😌\", label: \"Peaceful\", value: 8 },\n  { emoji: \"🥳\", label: \"Excited\", value: 9 },\n  { emoji: \"😭\", label: \"Overwhelmed\", value: 1 }\n];\n\nexport default function MoodPage({ sessionId, onBack, onPageChange, currentPage }: MoodPageProps) {\n  const [selectedMood, setSelectedMood] = useState<{ emoji: string; label: string; value: number } | null>(null);\n  const [moodScore, setMoodScore] = useState<number | null>(null);\n  const [notes, setNotes] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get mood entries\n  const { data: entries = [], isLoading } = useQuery({\n    queryKey: [\"/api/mood\", sessionId],\n    queryFn: async () => {\n      const url = sessionId ? `/api/mood?sessionId=${sessionId}` : \"/api/mood\";\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n\n  // Create mood entry mutation\n  const createMoodMutation = useMutation({\n    mutationFn: async (moodData: { moodScore: number; moodEmoji?: string; notes?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/mood\", {\n        sessionId: sessionId || null,\n        moodScore: moodData.moodScore,\n        moodEmoji: moodData.moodEmoji || null,\n        notes: moodData.notes || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mood\", sessionId] });\n      setSelectedMood(null);\n      setMoodScore(null);\n      setNotes(\"\");\n      toast({\n        title: \"Mood Recorded\",\n        description: \"Your mood has been recorded successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record mood. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete mood entry mutation\n  const deleteMoodMutation = useMutation({\n    mutationFn: async (entryId: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/mood/${entryId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mood\", sessionId] });\n      toast({\n        title: \"Entry Deleted\",\n        description: \"Your mood entry has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete mood entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleMoodSelect = (mood: { emoji: string; label: string; value: number }) => {\n    setSelectedMood(mood);\n    setMoodScore(mood.value);\n  };\n\n  const handleScoreSelect = (score: number) => {\n    setMoodScore(score);\n    // Clear emoji selection when manually selecting score\n    setSelectedMood(null);\n  };\n\n  const handleSaveMood = () => {\n    if (moodScore === null) {\n      toast({\n        title: \"Mood Required\",\n        description: \"Please select a mood or score before saving.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMoodMutation.mutate({\n      moodScore,\n      moodEmoji: selectedMood?.emoji,\n      notes: notes || undefined,\n    });\n  };\n\n  const formatDate = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getMoodColor = (score: number) => {\n    if (score >= 8) return \"text-green-600 bg-green-50 border-green-200\";\n    if (score >= 6) return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n    if (score >= 4) return \"text-orange-600 bg-orange-50 border-orange-200\";\n    return \"text-red-600 bg-red-50 border-red-200\";\n  };\n\n  const getMoodTrend = () => {\n    if (entries.length < 2) return null;\n    const recent = entries.slice(0, 5);\n    const avg = recent.reduce((sum: number, entry: MoodEntry) => sum + entry.moodScore, 0) / recent.length;\n    const older = entries.slice(5, 10);\n    if (older.length === 0) return null;\n    const oldAvg = older.reduce((sum: number, entry: MoodEntry) => sum + entry.moodScore, 0) / older.length;\n    return avg - oldAvg;\n  };\n\n  const trend = getMoodTrend();\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral\">\n      <div className=\"flex h-full\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId || null}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Smile className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Mood Check-in</h1>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Mood Entry Form */}\n              <div>\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>How are you feeling today?</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select an emoji that represents your mood or use the scale below\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Emoji Selection */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Choose your mood:</h3>\n                  <div className=\"grid grid-cols-4 gap-3\">\n                    {moodEmojis.map((mood, index) => (\n                      <Button\n                        key={index}\n                        variant={selectedMood?.emoji === mood.emoji ? \"default\" : \"outline\"}\n                        className=\"aspect-square flex flex-col p-2 h-auto\"\n                        onClick={() => handleMoodSelect(mood)}\n                      >\n                        <span className=\"text-2xl mb-1\">{mood.emoji}</span>\n                        <span className=\"text-xs\">{mood.label}</span>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Manual Score Selection */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Or rate your mood (1-10):</h3>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Very Low</span>\n                    <span className=\"text-sm text-muted-foreground\">Very High</span>\n                  </div>\n                  <div className=\"grid grid-cols-10 gap-1\">\n                    {[1,2,3,4,5,6,7,8,9,10].map((score) => (\n                      <Button\n                        key={score}\n                        variant={moodScore === score ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"aspect-square p-0 text-sm\"\n                        onClick={() => handleScoreSelect(score)}\n                      >\n                        {score}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Notes */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Additional notes (optional)</label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"What's contributing to how you feel today?\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button\n                  onClick={handleSaveMood}\n                  disabled={createMoodMutation.isPending || moodScore === null}\n                  className=\"w-full\"\n                >\n                  {createMoodMutation.isPending ? \"Saving...\" : \"Save Mood Check-in\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Mood History */}\n          <div>\n            {/* Trend Card */}\n            {trend !== null && (\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <TrendingUp className=\"w-5 h-5 text-primary mr-2\" />\n                      <span className=\"font-medium\">Recent Trend</span>\n                    </div>\n                    <div className={`text-sm font-medium ${trend > 0 ? 'text-green-600' : trend < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                      {trend > 0 ? '↗️ Improving' : trend < 0 ? '↘️ Declining' : '→ Stable'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Recent Entries */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Check-ins</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {isLoading ? (\n                    <div className=\"text-center py-4\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : entries.length === 0 ? (\n                    <div className=\"text-center py-6\">\n                      <Smile className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">No mood entries yet. Start by recording your mood above!</p>\n                    </div>\n                  ) : (\n                    entries.slice(0, 10).map((entry: MoodEntry) => (\n                      <div key={entry.id} className={`border rounded-lg p-3 ${getMoodColor(entry.moodScore)}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {entry.moodEmoji && <span className=\"text-xl\">{entry.moodEmoji}</span>}\n                            <span className=\"font-medium\">Score: {entry.moodScore}/10</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex items-center text-xs text-muted-foreground\">\n                              <Calendar className=\"w-3 h-3 mr-1\" />\n                              {formatDate(entry.createdAt)}\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteMoodMutation.mutate(entry.id)}\n                              disabled={deleteMoodMutation.isPending}\n                              className=\"h-6 w-6 p-0 text-muted-foreground hover:text-destructive\"\n                            >\n                              <Trash2 className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                        {entry.notes && (\n                          <p className=\"text-sm\">{entry.notes}</p>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13411},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Heart, Brain, HandHeart, Leaf, Wind, Sun, Mountain, Users, Play } from \"lucide-react\";\nimport type { SessionSettings } from \"@/App\";\n\ninterface OnboardingProps {\n  onComplete: (settings: SessionSettings) => void;\n}\n\nconst therapistPersonalities = [\n  {\n    id: \"empathetic\",\n    name: \"Dr. Emma\",\n    title: \"Empathetic\",\n    description: \"Warm, understanding, and deeply compassionate. Focuses on emotional validation and support.\",\n    icon: Heart,\n    color: \"text-pink-500\"\n  },\n  {\n    id: \"analytical\",\n    name: \"Dr. Alex\",\n    title: \"Analytical\",\n    description: \"Logical, structured, and solution-focused. Emphasizes CBT techniques and practical strategies.\",\n    icon: Brain,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"supportive\",\n    name: \"Dr. Sam\",\n    title: \"Supportive\",\n    description: \"Encouraging, patient, and strength-focused. Helps build confidence and resilience.\",\n    icon: HandHeart,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"mindful\",\n    name: \"Dr. Maya\",\n    title: \"Mindful\",\n    description: \"Calm, present, and wisdom-oriented. Integrates mindfulness and meditation practices.\",\n    icon: Leaf,\n    color: \"text-teal-500\"\n  }\n];\n\nconst voiceOptions = [\n  { id: \"sarah\", name: \"Sarah\", description: \"Warm & Gentle\", gender: \"female\" },\n  { id: \"emily\", name: \"Emily\", description: \"Clear & Professional\", gender: \"female\" },\n  { id: \"anna\", name: \"Anna\", description: \"Soft & Caring\", gender: \"female\" },\n  { id: \"michael\", name: \"Michael\", description: \"Calm & Reassuring\", gender: \"male\" },\n  { id: \"david\", name: \"David\", description: \"Confident & Steady\", gender: \"male\" },\n  { id: \"james\", name: \"James\", description: \"Friendly & Approachable\", gender: \"male\" }\n];\n\nconst goalOptions = [\n  {\n    id: \"anxiety\",\n    title: \"Manage Anxiety\",\n    description: \"Learn coping strategies for anxious thoughts and feelings\",\n    icon: Wind,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"depression\",\n    title: \"Improve Mood\",\n    description: \"Work through depression and find ways to feel better\",\n    icon: Sun,\n    color: \"text-yellow-500\"\n  },\n  {\n    id: \"stress\",\n    title: \"Reduce Stress\",\n    description: \"Find healthy ways to manage life's pressures\",\n    icon: Mountain,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"relationships\",\n    title: \"Relationship Issues\",\n    description: \"Improve communication and connection with others\",\n    icon: Users,\n    color: \"text-purple-500\"\n  },\n  {\n    id: \"self-esteem\",\n    title: \"Build Self-Esteem\",\n    description: \"Develop a more positive relationship with yourself\",\n    icon: Heart,\n    color: \"text-pink-500\"\n  },\n  {\n    id: \"general\",\n    title: \"General Support\",\n    description: \"Just need someone to talk to and process thoughts\",\n    icon: HandHeart,\n    color: \"text-teal-500\"\n  }\n];\n\nexport default function Onboarding({ onComplete }: OnboardingProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedPersonality, setSelectedPersonality] = useState(\"\");\n  const [selectedVoice, setSelectedVoice] = useState(\"\");\n  const [selectedGoals, setSelectedGoals] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Save preferences mutation\n  const savePreferencesMutation = useMutation({\n    mutationFn: async (settings: SessionSettings) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/preferences\", {\n        therapistPersonality: settings.therapistPersonality,\n        selectedVoice: settings.selectedVoice,\n        selectedGoals: settings.selectedGoals,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save preferences\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const nextStep = () => {\n    if (currentStep < 5) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePersonalitySelect = (personality: string) => {\n    setSelectedPersonality(personality);\n  };\n\n  const handleVoiceSelect = (voice: string) => {\n    setSelectedVoice(voice);\n  };\n\n  const handleGoalToggle = (goal: string) => {\n    setSelectedGoals(prev => \n      prev.includes(goal) \n        ? prev.filter(g => g !== goal)\n        : [...prev, goal]\n    );\n  };\n\n  const handleComplete = () => {\n    const settings: SessionSettings = {\n      therapistPersonality: selectedPersonality,\n      selectedVoice: selectedVoice,\n      selectedGoals: selectedGoals\n    };\n    \n    // Save to database and then complete\n    savePreferencesMutation.mutate(settings, {\n      onSuccess: () => {\n        onComplete(settings);\n      }\n    });\n  };\n\n  if (currentStep === 1) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-primary mb-2\">Welcome to Eunoia</h1>\n            <p className=\"text-lg text-muted-foreground\">Your AI-powered therapeutic companion</p>\n          </div>\n          <img \n            src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\" \n            alt=\"Peaceful meditation scene\" \n            className=\"rounded-2xl mb-8 w-full h-48 object-cover shadow-lg\"\n          />\n          <p className=\"text-muted-foreground mb-8\">\n            Let's personalize your therapeutic experience with a few quick questions.\n          </p>\n          <Button onClick={nextStep} className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\">\n            Get Started\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 2) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Choose Your Therapist Style</h2>\n            <p className=\"text-muted-foreground\">Select the personality that resonates most with you</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n            {therapistPersonalities.map((personality) => {\n              const IconComponent = personality.icon;\n              return (\n                <Card\n                  key={personality.id}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedPersonality === personality.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handlePersonalitySelect(personality.id)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <IconComponent className={`w-8 h-8 ${personality.color} mx-auto mb-3`} />\n                    <h3 className=\"text-xl font-semibold mb-2\">{personality.name} - {personality.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{personality.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={!selectedPersonality}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 3) {\n    const femaleVoices = voiceOptions.filter(v => v.gender === \"female\");\n    const maleVoices = voiceOptions.filter(v => v.gender === \"male\");\n\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Choose Your Voice</h2>\n            <p className=\"text-muted-foreground\">Select the voice that feels most comfortable for you</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">Female Voices</h3>\n              <div className=\"space-y-3\">\n                {femaleVoices.map((voice) => (\n                  <Card\n                    key={voice.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedVoice === voice.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => handleVoiceSelect(voice.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{voice.name} - {voice.description}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/90\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">Male Voices</h3>\n              <div className=\"space-y-3\">\n                {maleVoices.map((voice) => (\n                  <Card\n                    key={voice.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedVoice === voice.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => handleVoiceSelect(voice.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{voice.name} - {voice.description}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/90\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={!selectedVoice}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 4) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">What brings you here today?</h2>\n            <p className=\"text-muted-foreground\">Select your primary goals for this session</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n            {goalOptions.map((goal) => {\n              const IconComponent = goal.icon;\n              return (\n                <Card\n                  key={goal.id}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedGoals.includes(goal.id) ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handleGoalToggle(goal.id)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <IconComponent className={`w-8 h-8 ${goal.color} mx-auto mb-3`} />\n                    <h3 className=\"text-lg font-semibold mb-2\">{goal.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{goal.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={selectedGoals.length === 0}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 5) {\n    const selectedPersonalityData = therapistPersonalities.find(p => p.id === selectedPersonality);\n    const selectedVoiceData = voiceOptions.find(v => v.id === selectedVoice);\n    const selectedGoalData = goalOptions.filter(g => selectedGoals.includes(g.id));\n\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">You're all set!</h2>\n            <p className=\"text-muted-foreground mb-6\">Here's your personalized setup:</p>\n            \n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Therapist:</span>\n                  <span className=\"font-semibold\">{selectedPersonalityData?.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Voice:</span>\n                  <span className=\"font-semibold\">{selectedVoiceData?.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Focus:</span>\n                  <span className=\"font-semibold\">{selectedGoalData.map(g => g.title).join(', ')}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <Button\n            onClick={handleComplete}\n            className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 rounded-full font-semibold text-lg\"\n          >\n            Start Your Session\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n","size_bytes":14874},"client/src/pages/session-summaries.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  Calendar, \n  Clock, \n  Target, \n  Lightbulb, \n  CheckSquare,\n  FileText,\n  User,\n  Menu\n} from \"lucide-react\";\nimport type { Session } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface SessionSummariesPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function SessionSummariesPage({ onBack }: SessionSummariesPageProps) {\n  const { data: sessions = [], isLoading, error } = useQuery<Session[]>({\n    queryKey: [\"/api/sessions/summaries\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen bg-gradient-neutral p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex gap-2\">\n                    <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded w-24\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"h-screen bg-gradient-neutral p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n          </div>\n          \n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-red-600\">Failed to load session summaries. Please try again.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const completedSessions = sessions.filter(session => session.summary);\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral p-6 overflow-y-auto\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n        </div>\n\n        {completedSessions.length === 0 ? (\n          <Card className=\"border-dashed border-2 border-gray-200\">\n            <CardContent className=\"p-12 text-center\">\n              <FileText className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">No Session Summaries Yet</h3>\n              <p className=\"text-gray-500 mb-6\">\n                Complete a therapy session to see detailed summaries with key topics, insights, and recommendations.\n              </p>\n              <Button onClick={onBack} variant=\"outline\">\n                Start a New Session\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {completedSessions.map((session) => (\n              <Card key={session.id} className=\"shadow-lg\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-xl\">\n                      Session {session.id}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {session.startTime ? new Date(session.startTime).toLocaleDateString() : 'Unknown date'}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        {session.duration ? `${Math.floor(session.duration / 60)}m ${session.duration % 60}s` : 'Unknown duration'}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"w-4 h-4\" />\n                        {session.therapistPersonality || 'Unknown therapist'}\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-6\">\n                  {/* Session Summary */}\n                  {session.summary && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4\" />\n                        Session Overview\n                      </h4>\n                      <p className=\"text-muted-foreground leading-relaxed bg-gray-50 p-4 rounded-lg\">\n                        {session.summary}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Key Topics */}\n                  {session.keyTopics && Array.isArray(session.keyTopics) && session.keyTopics.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-green-600\" />\n                        Key Topics Discussed\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.keyTopics.map((topic, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200\">\n                            {topic}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* CBT Techniques */}\n                  {session.cbtTechniques && Array.isArray(session.cbtTechniques) && session.cbtTechniques.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Lightbulb className=\"w-4 h-4 text-purple-600\" />\n                        CBT Techniques Used\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.cbtTechniques.map((technique, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                            {technique}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Homework & Next Steps */}\n                  {session.homework && Array.isArray(session.homework) && session.homework.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <CheckSquare className=\"w-4 h-4 text-orange-600\" />\n                        Homework & Next Steps\n                      </h4>\n                      <ul className=\"space-y-2\">\n                        {session.homework.map((task, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <CheckSquare className=\"w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-muted-foreground\">{task}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {/* Therapist Notes */}\n                  {session.therapistNotes && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4 text-blue-600\" />\n                        Therapist Notes\n                      </h4>\n                      <p className=\"text-muted-foreground bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                        {session.therapistNotes}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Goals Progress */}\n                  {session.selectedGoals && Array.isArray(session.selectedGoals) && session.selectedGoals.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-blue-600\" />\n                        Session Goals\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.selectedGoals.map((goal, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"border-blue-200 text-blue-700\">\n                            {goal}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10143},"client/src/pages/session.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport Sidebar from \"@/components/sidebar\";\nimport VoiceInterface from \"@/components/voice-interface\";\nimport ChatInterface from \"@/components/chat-interface\";\nimport CrisisModal from \"@/components/crisis-modal\";\nimport SessionSummaryModal from \"@/components/session-summary-modal\";\nimport { detectCrisisKeywords, shouldTriggerCrisisIntervention } from \"@/lib/crisis-detection\";\nimport type { SessionSettings, CurrentPage } from \"@/App\";\nimport type { Session, Message } from \"@shared/schema\";\n\ninterface SessionPageProps {\n  sessionId: number;\n  sessionSettings: SessionSettings;\n  onPageChange: (page: CurrentPage) => void;\n  onSessionEnd: () => void;\n}\n\nexport default function SessionPage({ sessionId, sessionSettings, onPageChange, onSessionEnd }: SessionPageProps) {\n  const [isVoiceMode, setIsVoiceMode] = useState(true);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [sessionTimer, setSessionTimer] = useState(0);\n  const [showCrisisModal, setShowCrisisModal] = useState(false);\n  const [detectedKeywords, setDetectedKeywords] = useState<string[]>([]);\n  const [showSessionSummary, setShowSessionSummary] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Timer effect\n  useEffect(() => {\n    if (sessionEnded) return;\n\n    const timer = setInterval(() => {\n      setSessionTimer(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [sessionEnded]);\n\n  // Get session data\n  const { data: session } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/sessions/${sessionId}`);\n      return response.json();\n    },\n    enabled: !!sessionId,\n  });\n\n  // Get messages\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId, \"messages\"],\n    queryFn: async () => {\n      if (!session?.messages) return [];\n      return session.messages;\n    },\n    enabled: !!session,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ content, isVoice }: { content: string; isVoice: boolean }) => {\n      // Check for crisis keywords before sending\n      const keywords = detectCrisisKeywords(content);\n      if (keywords.length > 0) {\n        setDetectedKeywords(keywords);\n        if (shouldTriggerCrisisIntervention(content)) {\n          setShowCrisisModal(true);\n        }\n      }\n\n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/messages`, {\n        content,\n        isVoice,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\", sessionId, \"messages\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error sending message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"PATCH\", `/api/sessions/${sessionId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      setSessionEnded(true);\n      setShowSessionSummary(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\", sessionId] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error ending session\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (content: string, isVoice: boolean = false) => {\n    if (!content.trim()) return;\n    sendMessageMutation.mutate({ content, isVoice });\n  };\n\n  const handleEndSession = () => {\n    endSessionMutation.mutate();\n  };\n\n  const handleSessionSummaryClose = () => {\n    setShowSessionSummary(false);\n    onSessionEnd();\n  };\n\n  const handleViewAllSummaries = () => {\n    setShowSessionSummary(false);\n    onPageChange('session-summaries');\n  };\n\n  const handleReturnHome = () => {\n    setShowSessionSummary(false);\n    onSessionEnd();\n  };\n\n  const getTherapistName = () => {\n    const personalities: Record<string, string> = {\n      empathetic: \"Dr. Emma\",\n      analytical: \"Dr. Alex\",\n      supportive: \"Dr. Sam\", \n      mindful: \"Dr. Maya\"\n    };\n    return personalities[sessionSettings.therapistPersonality] || \"Dr. Emma\";\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral\">\n      <div className=\"flex h-full\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage=\"session\"\n          onEndSession={handleEndSession}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Header */}\n          <div className=\"bg-background dark:bg-background shadow-sm border-b border-border p-4 flex-shrink-0\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsSidebarOpen(true)}\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n                \n                <h1 className=\"text-xl font-bold text-primary\">Session with {getTherapistName()}</h1>\n              </div>\n              \n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm text-muted-foreground\">Communication Mode:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`text-sm ${!isVoiceMode ? 'text-primary' : 'text-muted-foreground'}`}>\n                      Text\n                    </span>\n                    <Switch\n                      checked={isVoiceMode}\n                      onCheckedChange={setIsVoiceMode}\n                    />\n                    <span className={`text-sm ${isVoiceMode ? 'text-primary' : 'text-muted-foreground'}`}>\n                      Voice\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <span>Session Time:</span>\n                  <span className=\"font-mono\">{formatTime(sessionTimer)}</span>\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleEndSession}\n                  disabled={endSessionMutation.isPending}\n                >\n                  {endSessionMutation.isPending ? \"Ending...\" : \"End Session\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Interface */}\n          <div className=\"flex-1 p-6 min-h-0\">\n            {isVoiceMode ? (\n              <VoiceInterface\n                therapistName={getTherapistName()}\n                onSendMessage={handleSendMessage}\n                messages={messages}\n                isLoading={sendMessageMutation.isPending}\n                sessionEnded={sessionEnded}\n              />\n            ) : (\n              <ChatInterface\n                therapistName={getTherapistName()}\n                onSendMessage={handleSendMessage}\n                messages={messages}\n                isLoading={sendMessageMutation.isPending}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Crisis Modal */}\n      <CrisisModal\n        isOpen={showCrisisModal}\n        onClose={() => setShowCrisisModal(false)}\n        detectedKeywords={detectedKeywords}\n      />\n\n      {/* Session Summary Modal */}\n      <SessionSummaryModal\n        isOpen={showSessionSummary}\n        onClose={handleSessionSummaryClose}\n        sessionId={sessionId}\n        therapistName={getTherapistName()}\n        duration={sessionTimer}\n        onViewAllSummaries={handleViewAllSummaries}\n        onReturnHome={handleReturnHome}\n      />\n    </div>\n  );\n}","size_bytes":9019},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Settings, User, Volume2, Target, Menu } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage, SessionSettings } from \"@/App\";\n\ninterface SettingsPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n  sessionSettings: SessionSettings | null;\n  onUpdateSettings: (settings: SessionSettings) => void;\n}\n\nconst therapistPersonalities = [\n  {\n    id: \"empathetic\",\n    name: \"Dr. Emma\",\n    description: \"Warm, understanding, and focuses on emotional support\"\n  },\n  {\n    id: \"analytical\",\n    name: \"Dr. Alex\",\n    description: \"Logical, structured, and helps with problem-solving\"\n  },\n  {\n    id: \"supportive\",\n    name: \"Dr. Sam\",\n    description: \"Encouraging, motivational, and strength-focused\"\n  },\n  {\n    id: \"mindful\",\n    name: \"Dr. Maya\",\n    description: \"Calm, present-focused, and mindfulness-oriented\"\n  }\n];\n\nconst voiceOptions = [\n  { id: \"alloy\", name: \"Alloy\", description: \"Natural and balanced\" },\n  { id: \"echo\", name: \"Echo\", description: \"Warm and engaging\" },\n  { id: \"fable\", name: \"Fable\", description: \"Calm and soothing\" },\n  { id: \"onyx\", name: \"Onyx\", description: \"Deep and authoritative\" },\n  { id: \"nova\", name: \"Nova\", description: \"Bright and energetic\" },\n  { id: \"shimmer\", name: \"Shimmer\", description: \"Gentle and friendly\" }\n];\n\nconst goalOptions = [\n  \"Reduce anxiety and stress\",\n  \"Improve mood and emotional regulation\",\n  \"Develop coping strategies\",\n  \"Better sleep habits\",\n  \"Increase self-confidence\",\n  \"Manage depression symptoms\",\n  \"Improve relationships\",\n  \"Work through trauma\",\n  \"Manage anger\",\n  \"Build mindfulness practices\",\n  \"Career and life transitions\",\n  \"Grief and loss support\"\n];\n\nexport default function SettingsPage({ \n  onBack, \n  onPageChange, \n  currentPage, \n  sessionId, \n  sessionSettings,\n  onUpdateSettings \n}: SettingsPageProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [tempSettings, setTempSettings] = useState<SessionSettings>(\n    sessionSettings || {\n      therapistPersonality: \"empathetic\",\n      selectedVoice: \"alloy\",\n      selectedGoals: []\n    }\n  );\n\n  const handlePersonalityChange = (personality: string) => {\n    setTempSettings(prev => ({ ...prev, therapistPersonality: personality }));\n  };\n\n  const handleVoiceChange = (voice: string) => {\n    setTempSettings(prev => ({ ...prev, selectedVoice: voice }));\n  };\n\n  const handleGoalToggle = (goal: string) => {\n    setTempSettings(prev => ({\n      ...prev,\n      selectedGoals: prev.selectedGoals.includes(goal)\n        ? prev.selectedGoals.filter(g => g !== goal)\n        : [...prev.selectedGoals, goal]\n    }));\n  };\n\n  const handleSaveSettings = () => {\n    onUpdateSettings(tempSettings);\n    onBack();\n  };\n\n  const selectedPersonality = therapistPersonalities.find(p => p.id === tempSettings.therapistPersonality);\n  const selectedVoice = voiceOptions.find(v => v.id === tempSettings.selectedVoice);\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral\">\n      <div className=\"flex h-full\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Settings className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Settings</h1>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Therapist Personality */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    Therapist Personality\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose the therapist personality that best suits your needs\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Select value={tempSettings.therapistPersonality} onValueChange={handlePersonalityChange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {therapistPersonalities.map((personality) => (\n                        <SelectItem key={personality.id} value={personality.id} className=\"h-auto py-3\">\n                          <div className=\"flex flex-col space-y-1 text-left\">\n                            <span className=\"font-medium text-foreground\">{personality.name}</span>\n                            <span className=\"text-sm text-muted-foreground leading-tight\">{personality.description}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedPersonality && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm\"><strong>{selectedPersonality.name}:</strong> {selectedPersonality.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Voice Selection */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Volume2 className=\"w-5 h-5 mr-2\" />\n                    Voice Selection\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose the voice for your therapy sessions\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Select value={tempSettings.selectedVoice} onValueChange={handleVoiceChange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {voiceOptions.map((voice) => (\n                        <SelectItem key={voice.id} value={voice.id} className=\"h-auto py-3\">\n                          <div className=\"flex flex-col space-y-1 text-left\">\n                            <span className=\"font-medium text-foreground\">{voice.name}</span>\n                            <span className=\"text-sm text-muted-foreground leading-tight\">{voice.description}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedVoice && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm\"><strong>{selectedVoice.name}:</strong> {selectedVoice.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Therapy Goals */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Target className=\"w-5 h-5 mr-2\" />\n                    Therapy Goals\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select the areas you'd like to focus on (choose multiple)\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {goalOptions.map((goal) => (\n                      <div\n                        key={goal}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          tempSettings.selectedGoals.includes(goal)\n                            ? 'border-primary bg-primary/10'\n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onClick={() => handleGoalToggle(goal)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">{goal}</span>\n                          {tempSettings.selectedGoals.includes(goal) && (\n                            <Badge variant=\"default\" className=\"ml-2\">Selected</Badge>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {tempSettings.selectedGoals.length > 0 && (\n                    <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm font-medium mb-2\">Selected Goals:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {tempSettings.selectedGoals.map((goal) => (\n                          <Badge key={goal} variant=\"secondary\">{goal}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Save Button */}\n              <div className=\"flex justify-end gap-4\">\n                <Button variant=\"outline\" onClick={onBack}>\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveSettings}>\n                  Save Settings\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10611},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"EunoiaFirst/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"EunoiaFirst/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"EunoiaFirst/replit.md":{"content":"# Eunoia - AI Therapy Chat Application\n\n## Overview\n\nEunoia is a comprehensive AI-powered therapy chat application that provides users with personalized therapy sessions through various AI therapist personalities. The application combines real-time chat, voice interaction, crisis detection, and session management to create a supportive mental health platform.\n\n## User Preferences\n\nPreferred communication style: Customizable, default is english.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: React Query (TanStack Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **AI Integration**: OpenAI API for therapist responses and session analysis\n- **Session Management**: In-memory storage with planned database persistence\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Location**: `shared/schema.ts` for type sharing between frontend and backend\n- **Tables**: Users, Sessions, Messages, Crisis Events\n- **Migrations**: Auto-generated in `./migrations` directory\n\n## Key Components\n\n### AI Therapist System\n- **Multiple Personalities**: Four distinct therapist personas (Empathetic, Analytical, Supportive, Mindful)\n- **Personalized Responses**: Each therapist has unique system prompts and response styles\n- **CBT Integration**: Cognitive Behavioral Therapy techniques embedded in responses\n- **Crisis Detection**: Real-time monitoring for mental health crisis keywords\n\n### Communication Interfaces\n- **Text Chat**: Traditional text-based therapy sessions\n- **Voice Interface**: Speech-to-text and text-to-speech capabilities\n- **Real-time Interaction**: Immediate response system with loading states\n\n### Session Management\n- **Session Tracking**: Complete conversation history and metadata\n- **Summary Generation**: AI-powered session summaries with key topics and techniques\n- **Goal Setting**: User-defined therapy goals and progress tracking\n- **Duration Monitoring**: Session timing and engagement metrics\n\n### Crisis Intervention\n- **Keyword Detection**: Real-time monitoring for crisis-related language\n- **Immediate Response**: Automatic crisis modal with resources\n- **Emergency Resources**: Direct access to crisis hotlines and support services\n- **Documentation**: Crisis event logging for continuity of care\n\n## Data Flow\n\n1. **User Onboarding**: Personality selection → Voice selection → Goal setting\n2. **Session Creation**: Settings validation → Database session creation → Initial therapist greeting\n3. **Message Exchange**: User input → crisis detection → AI processing → Response generation → Storage\n4. **Session Conclusion**: Summary generation → Progress tracking → Resource recommendations\n\n## External Dependencies\n\n### AI Services\n- **Enhanced Therapeutic AI**: Sophisticated rule-based system with four distinct therapist personalities\n- **Context-Aware Responses**: Emotional content analysis, therapeutic needs assessment, and personalized interventions\n- **Professional Crisis Detection**: Comprehensive multi-category crisis assessment with imminent risk evaluation\n\n### Database\n- **Neon Database**: Serverless PostgreSQL for production\n- **Connection**: Environment variable-based configuration\n\n### UI Components\n- **Radix UI**: Headless component primitives\n- **Embla Carousel**: Interactive component carousels\n- **Lucide React**: Icon library\n\n### Development Tools\n- **Vite**: Development server and build tool\n- **Replit Integration**: Development environment optimization\n- **TypeScript**: Type safety across full stack\n\n## Deployment Strategy\n\n### Development Environment\n- **Hot Reloading**: Vite HMR for rapid development\n- **Type Checking**: Continuous TypeScript validation\n- **Database Sync**: Drizzle kit for schema management\n\n### Production Build\n- **Frontend**: Vite build to `dist/public`\n- **Backend**: esbuild bundling to `dist/index.js`\n- **Environment**: NODE_ENV-based configuration switching\n\n### Database Management\n- **Schema Sync**: `drizzle-kit push` for production deployments\n- **Migrations**: Automatic generation and application\n- **Connection**: DATABASE_URL environment variable required\n\n## Recent Changes\n\n### July 13, 2025\n- **Fixed message sending errors** - Resolved schema validation issues preventing users from sending messages\n- **Implemented popup session summaries** - Session ending now shows popup summary with options to view all or return home\n- **Fixed session summaries navigation** - Sidebar \"Session Summaries\" now directly opens full-page database view\n- **Enhanced session completion flow** - \"Done\" button returns to home with sidebar accessible for new sessions\n- **Created collapsible homepage sidebar** - Home page now has accessible sidebar with proper collapse/expand functionality\n- **Implemented automatic session ending** - Session end immediately stops timer, audio synthesis, and voice recognition\n- **Fixed audio control on session end** - Voice interface automatically stops all speech when session ends\n- **Improved error handling** - Better fallback responses when OpenAI API is unavailable\n- **Session flow optimization** - End session → popup summary → home page or all summaries view\n- **Fixed timer continuation bug** - Timer now properly stops when session summary popup appears\n- **Enhanced home screen design** - Added gradient backgrounds, animated heart icon, session info card, and improved typography\n- **Fixed voice control mode switching** - Voice interface now properly stops speaking and listening when switching to text mode\n- **Fixed \"View All Sessions\" navigation** - Modal now correctly navigates to session summaries page instead of home\n- **Implemented selective session ending behavior** - Confirmation popup now only appears when navigating away from active session page; other pages have direct navigation with auto-session ending\n- **Enhanced navigation UX** - Sessions automatically end when navigating from non-session pages, but require confirmation when leaving active therapy session\n- **Removed quick journal and mood check-in from sidebar** - Simplified sidebar by removing interactive quick journal entry and mood check-in components, keeping only essential navigation and information\n- **Fixed session end popup appearing incorrectly** - Session summary modal now only appears when ending session from actual session page, not from navigation between other pages\n- **Fixed \"View All Sessions\" navigation from session summary modal** - Removed conflicting onClose call that was redirecting to home instead of session summaries page\n- **Implemented professional therapeutic AI** - Created comprehensive rule-based therapeutic system with four distinct personalities, CBT techniques, context-aware responses, enhanced crisis detection, and intelligent session summaries\n\n### Previous Updates\n- Enhanced AI therapist system with multiple personalities and CBT integration\n- Added crisis detection and intervention system\n- Implemented session management with summaries and progress tracking\n- Created comprehensive UI with voice and text interfaces\n- Added journal, mood tracking, and CBT tools integration\n\nThe application prioritizes user safety through crisis detection, provides personalized therapy experiences through AI personalities, and maintains professional therapeutic standards while being accessible through modern web technologies.","size_bytes":7712},"EunoiaFirst/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"EunoiaFirst/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"New-Eunoia/README.md":{"content":"# New-Eunoia - UI Version Without AI\n\nThis is a clean version of the Eunoia therapy application with all UI components but without AI functionality. The chat interface is preserved but messages don't generate AI responses yet.\n\n## Features Preserved\n\n- Complete UI interface with chat system\n- Session management\n- Voice interface components (UI only)\n- Crisis detection modal (UI only)\n- Sidebar navigation\n- All pages (home, session, journal, mood, etc.)\n- Session summaries\n- CBT tools interface\n\n## Features Removed\n\n- AI/ML API integration\n- Automatic AI responses in chat\n- Smart crisis detection\n- AI-powered session summaries\n\n## Running the Application\n\nFrom the New-Eunoia directory:\n\n```bash\nnpm install\nnpm run dev\n```\n\nOr use the provided script:\n\n```bash\n./start.sh\n```\n\nThe application will start on port 5000 by default.\n\n## Next Steps\n\nYou can now integrate your own chat response system by modifying:\n\n1. `server/routes.ts` - Add your response logic in the message endpoint\n2. `client/src/components/chat-interface.tsx` - Modify if needed for your response format\n3. `client/src/pages/session.tsx` - Update session handling as needed\n\nThe entire UI framework is ready for your custom implementation!","size_bytes":1217},"New-Eunoia/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  schema: \"./shared/schema.ts\",\n  out: \"./migrations\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL || \"\",\n  },\n});","size_bytes":223},"New-Eunoia/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"New-Eunoia/start.sh":{"content":"#!/bin/bash\ncd \"$(dirname \"$0\")\"\nnpm run dev","size_bytes":44},"New-Eunoia/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"New-Eunoia/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"EunoiaFirst/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"EunoiaFirst/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertSessionSchema, \n  insertMessageSchema, \n  insertCrisisEventSchema,\n  insertJournalEntrySchema,\n  insertMoodEntrySchema\n} from \"@shared/schema\";\nimport { therapeuticAI } from \"./services/therapeutic-ai\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Create a new therapy session\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const sessionData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(sessionData);\n      \n      // Create initial therapist greeting using AI\n      let greeting: string;\n      try {\n        greeting = await therapeuticAI.getTherapistResponse(\n          sessionData.therapistPersonality,\n          [{ role: 'system', content: 'This is the start of a new therapy session. Provide a warm, professional greeting.' }],\n          sessionData.selectedGoals\n        );\n      } catch (error) {\n        // Fallback greeting if AI fails\n        const therapistName = therapeuticAI.therapistPersonalities[sessionData.therapistPersonality]?.name || 'Dr. Emma';\n        greeting = `Hello! I'm ${therapistName}. I'm here to support you through whatever you're experiencing today. How are you feeling right now?`;\n      }\n      \n      await storage.createMessage({\n        sessionId: session.id,\n        role: 'assistant',\n        content: greeting,\n        isVoice: false\n      });\n      \n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create session\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Get all session summaries (must be before :id route)\n  app.get(\"/api/sessions/summaries\", async (req, res) => {\n    try {\n      const sessions = await storage.getAllSessions();\n      // Only return sessions that have been completed (have summaries)\n      const completedSessions = sessions.filter(session => session.summary);\n      res.json(completedSessions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get session summaries\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Get session details\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const session = await storage.getSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get session\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Get session messages\n  app.get(\"/api/sessions/:id/messages\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const messages = await storage.getSessionMessages(sessionId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get messages\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Send message to therapist\n  app.post(\"/api/sessions/:id/messages\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      \n      // Get session first to ensure it exists\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      const messageData = {\n        sessionId,\n        role: 'user' as const,\n        content: req.body.content,\n        isVoice: req.body.isVoice || false\n      };\n      \n      // Check for crisis keywords\n      const crisisKeywords = await therapeuticAI.detectCrisisKeywords(messageData.content);\n      if (crisisKeywords.length > 0) {\n        // Log crisis event\n        await storage.createCrisisEvent({\n          sessionId,\n          detectedKeywords: crisisKeywords,\n          userMessage: messageData.content,\n          actionTaken: \"Crisis modal triggered\"\n        });\n        \n        // Return crisis response\n        return res.json({\n          message: await storage.createMessage(messageData),\n          crisis: true,\n          crisisKeywords\n        });\n      }\n      \n      // Create user message\n      const userMessage = await storage.createMessage(messageData);\n      \n      // Get conversation history\n      const messages = await storage.getSessionMessages(sessionId);\n      const conversationHistory = messages.map(m => ({\n        role: m.role,\n        content: m.content\n      }));\n      \n      // Get AI response with fallback\n      let aiResponse: string;\n      try {\n        aiResponse = await therapeuticAI.getTherapistResponse(\n          session.therapistPersonality,\n          conversationHistory,\n          session.selectedGoals\n        );\n      } catch (aiError) {\n        console.error(\"AI Response Error:\", aiError);\n        // Fallback response when AI is not available\n        aiResponse = \"I understand you're reaching out, and I'm here to listen. While I'm having some technical difficulties with my AI responses right now, I want you to know that your feelings are valid and important. Please feel free to continue sharing, and consider reaching out to a human therapist or crisis hotline if you need immediate support. You can also use the CBT tools, journal, and mood tracking features in the sidebar to help process your thoughts and feelings.\";\n      }\n      \n      // Create AI message\n      const aiMessage = await storage.createMessage({\n        sessionId,\n        role: 'assistant',\n        content: aiResponse,\n        isVoice: messageData.isVoice\n      });\n      \n      res.json({\n        userMessage,\n        aiMessage,\n        crisis: false\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send message\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // End session and generate summary\n  app.post(\"/api/sessions/:id/end\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const session = await storage.getSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      \n      // Get all messages for summary\n      const messages = await storage.getSessionMessages(sessionId);\n      const conversationHistory = messages.map(m => ({\n        role: m.role,\n        content: m.content,\n        timestamp: m.timestamp\n      }));\n      \n      // Calculate duration\n      const duration = session.startTime ? Math.floor((Date.now() - session.startTime.getTime()) / 1000) : 0;\n      \n      // Generate session summary\n      const summary = await therapeuticAI.generateSessionSummary(\n        conversationHistory,\n        session.therapistPersonality,\n        duration\n      );\n      \n      // End session with summary\n      const endedSession = await storage.endSession(\n        sessionId,\n        `Session completed successfully. Duration: ${Math.floor(duration / 60)} minutes.`,\n        summary.keyTopics,\n        summary.cbtTechniques,\n        summary.homework,\n        summary.therapistNotes\n      );\n      \n      res.json(endedSession);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to end session\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Get crisis events for a session\n  app.get(\"/api/sessions/:id/crisis\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const crisisEvents = await storage.getCrisisEvents(sessionId);\n      res.json(crisisEvents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get crisis events\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Journal routes\n  app.post(\"/api/journal\", async (req, res) => {\n    try {\n      const entryData = insertJournalEntrySchema.parse(req.body);\n      const entry = await storage.createJournalEntry(entryData);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create journal entry\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/journal\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId ? parseInt(req.query.sessionId as string) : undefined;\n      const entries = await storage.getJournalEntries(sessionId);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get journal entries\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // Mood routes  \n  app.post(\"/api/mood\", async (req, res) => {\n    try {\n      const entryData = insertMoodEntrySchema.parse(req.body);\n      const entry = await storage.createMoodEntry(entryData);\n      res.json(entry);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create mood entry\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  app.get(\"/api/mood\", async (req, res) => {\n    try {\n      const sessionId = req.query.sessionId ? parseInt(req.query.sessionId as string) : undefined;\n      const entries = await storage.getMoodEntries(sessionId);\n      res.json(entries);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get mood entries\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9607},"EunoiaFirst/server/storage.ts":{"content":"import { \n  users, sessions, messages, crisisEvents, journalEntries, moodEntries,\n  type User, type InsertUser,\n  type Session, type InsertSession,\n  type Message, type InsertMessage,\n  type CrisisEvent, type InsertCrisisEvent,\n  type JournalEntry, type InsertJournalEntry,\n  type MoodEntry, type InsertMoodEntry\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Session operations\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(id: number): Promise<Session | undefined>;\n  getAllSessions(): Promise<Session[]>;\n  updateSession(id: number, updates: Partial<Session>): Promise<Session>;\n  endSession(id: number, summary: string, keyTopics: string[], cbtTechniques: string[], homework: string[], therapistNotes: string): Promise<Session>;\n  \n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getSessionMessages(sessionId: number): Promise<Message[]>;\n  \n  // Crisis event operations\n  createCrisisEvent(event: InsertCrisisEvent): Promise<CrisisEvent>;\n  getCrisisEvents(sessionId: number): Promise<CrisisEvent[]>;\n  \n  // Journal operations\n  createJournalEntry(entry: InsertJournalEntry): Promise<JournalEntry>;\n  getJournalEntries(sessionId?: number): Promise<JournalEntry[]>;\n  \n  // Mood operations\n  createMoodEntry(entry: InsertMoodEntry): Promise<MoodEntry>;\n  getMoodEntries(sessionId?: number): Promise<MoodEntry[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private sessions: Map<number, Session>;\n  private messages: Map<number, Message>;\n  private crisisEvents: Map<number, CrisisEvent>;\n  private journalEntries: Map<number, JournalEntry>;\n  private moodEntries: Map<number, MoodEntry>;\n  \n  private userIdCounter: number;\n  private sessionIdCounter: number;\n  private messageIdCounter: number;\n  private crisisEventIdCounter: number;\n  private journalEntryIdCounter: number;\n  private moodEntryIdCounter: number;\n\n  constructor() {\n    this.users = new Map();\n    this.sessions = new Map();\n    this.messages = new Map();\n    this.crisisEvents = new Map();\n    this.journalEntries = new Map();\n    this.moodEntries = new Map();\n    \n    this.userIdCounter = 1;\n    this.sessionIdCounter = 1;\n    this.messageIdCounter = 1;\n    this.crisisEventIdCounter = 1;\n    this.journalEntryIdCounter = 1;\n    this.moodEntryIdCounter = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userIdCounter++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = this.sessionIdCounter++;\n    const session: Session = {\n      ...insertSession,\n      id,\n      userId: insertSession.userId || null,\n      isVoiceMode: insertSession.isVoiceMode || false,\n      selectedGoals: insertSession.selectedGoals as string[],\n      startTime: new Date(),\n      endTime: null,\n      duration: null,\n      summary: null,\n      keyTopics: null,\n      cbtTechniques: null,\n      homework: null,\n      therapistNotes: null,\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async getSession(id: number): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async getAllSessions(): Promise<Session[]> {\n    return Array.from(this.sessions.values()).sort((a, b) => {\n      const dateA = new Date(a.startTime || 0).getTime();\n      const dateB = new Date(b.startTime || 0).getTime();\n      return dateB - dateA; // Most recent first\n    });\n  }\n\n  async updateSession(id: number, updates: Partial<Session>): Promise<Session> {\n    const session = this.sessions.get(id);\n    if (!session) {\n      throw new Error(`Session with id ${id} not found`);\n    }\n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async endSession(\n    id: number,\n    summary: string,\n    keyTopics: string[],\n    cbtTechniques: string[],\n    homework: string[],\n    therapistNotes: string\n  ): Promise<Session> {\n    const session = this.sessions.get(id);\n    if (!session) {\n      throw new Error(`Session with id ${id} not found`);\n    }\n    \n    const endTime = new Date();\n    const duration = session.startTime ? Math.floor((endTime.getTime() - session.startTime.getTime()) / 1000) : 0;\n    \n    const updatedSession: Session = {\n      ...session,\n      endTime,\n      duration,\n      summary,\n      keyTopics,\n      cbtTechniques,\n      homework,\n      therapistNotes,\n    };\n    \n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = this.messageIdCounter++;\n    const message: Message = {\n      ...insertMessage,\n      id,\n      timestamp: new Date(),\n      isVoice: insertMessage.isVoice || false,\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async getSessionMessages(sessionId: number): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(message => message.sessionId === sessionId)\n      .sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));\n  }\n\n  async createCrisisEvent(insertEvent: InsertCrisisEvent): Promise<CrisisEvent> {\n    const id = this.crisisEventIdCounter++;\n    const event: CrisisEvent = {\n      ...insertEvent,\n      id,\n      timestamp: new Date(),\n      detectedKeywords: insertEvent.detectedKeywords as string[],\n      actionTaken: insertEvent.actionTaken || null,\n    };\n    this.crisisEvents.set(id, event);\n    return event;\n  }\n\n  async getCrisisEvents(sessionId: number): Promise<CrisisEvent[]> {\n    return Array.from(this.crisisEvents.values())\n      .filter(event => event.sessionId === sessionId)\n      .sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));\n  }\n\n  async createJournalEntry(insertEntry: InsertJournalEntry): Promise<JournalEntry> {\n    const id = this.journalEntryIdCounter++;\n    const entry: JournalEntry = {\n      ...insertEntry,\n      id,\n      timestamp: new Date(),\n      sessionId: insertEntry.sessionId || null,\n      title: insertEntry.title || null,\n      prompt: insertEntry.prompt || null,\n    };\n    this.journalEntries.set(id, entry);\n    return entry;\n  }\n\n  async getJournalEntries(sessionId?: number): Promise<JournalEntry[]> {\n    const entries = Array.from(this.journalEntries.values());\n    if (sessionId) {\n      return entries\n        .filter(entry => entry.sessionId === sessionId)\n        .sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n    }\n    return entries.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n  }\n\n  async createMoodEntry(insertEntry: InsertMoodEntry): Promise<MoodEntry> {\n    const id = this.moodEntryIdCounter++;\n    const entry: MoodEntry = {\n      ...insertEntry,\n      id,\n      timestamp: new Date(),\n      sessionId: insertEntry.sessionId || null,\n      moodEmoji: insertEntry.moodEmoji || null,\n      notes: insertEntry.notes || null,\n    };\n    this.moodEntries.set(id, entry);\n    return entry;\n  }\n\n  async getMoodEntries(sessionId?: number): Promise<MoodEntry[]> {\n    const entries = Array.from(this.moodEntries.values());\n    if (sessionId) {\n      return entries\n        .filter(entry => entry.sessionId === sessionId)\n        .sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n    }\n    return entries.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":8059},"EunoiaFirst/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"EunoiaFirst/shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\"),\n  therapistPersonality: text(\"therapist_personality\").notNull(),\n  selectedVoice: text(\"selected_voice\").notNull(),\n  selectedGoals: json(\"selected_goals\").$type<string[]>().notNull(),\n  isVoiceMode: boolean(\"is_voice_mode\").default(true),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration_seconds\"),\n  summary: text(\"summary\"),\n  keyTopics: json(\"key_topics\").$type<string[]>(),\n  cbtTechniques: json(\"cbt_techniques\").$type<string[]>(),\n  homework: json(\"homework\").$type<string[]>(),\n  therapistNotes: text(\"therapist_notes\"),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  role: text(\"role\").notNull(), // 'user' or 'assistant'\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  isVoice: boolean(\"is_voice\").default(false),\n});\n\nexport const crisisEvents = pgTable(\"crisis_events\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  detectedKeywords: json(\"detected_keywords\").$type<string[]>().notNull(),\n  userMessage: text(\"user_message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  actionTaken: text(\"action_taken\"),\n});\n\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\"),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  prompt: text(\"prompt\"),\n});\n\nexport const moodEntries = pgTable(\"mood_entries\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\"),\n  moodScore: integer(\"mood_score\").notNull(), // 1-10\n  moodEmoji: text(\"mood_emoji\"),\n  notes: text(\"notes\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).pick({\n  userId: true,\n  therapistPersonality: true,\n  selectedVoice: true,\n  selectedGoals: true,\n  isVoiceMode: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  sessionId: true,\n  role: true,\n  content: true,\n  isVoice: true,\n}).partial({ role: true }); // Make role optional since it's set by the server\n\nexport const insertCrisisEventSchema = createInsertSchema(crisisEvents).pick({\n  sessionId: true,\n  detectedKeywords: true,\n  userMessage: true,\n  actionTaken: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).pick({\n  sessionId: true,\n  title: true,\n  content: true,\n  prompt: true,\n});\n\nexport const insertMoodEntrySchema = createInsertSchema(moodEntries).pick({\n  sessionId: true,\n  moodScore: true,\n  moodEmoji: true,\n  notes: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertCrisisEvent = z.infer<typeof insertCrisisEventSchema>;\nexport type CrisisEvent = typeof crisisEvents.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertMoodEntry = z.infer<typeof insertMoodEntrySchema>;\nexport type MoodEntry = typeof moodEntries.$inferSelect;\n","size_bytes":4004},"New-Eunoia/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":2065},"New-Eunoia/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer } from \"http\";\nimport { db } from \"../shared/db\";\nimport { sessions, messages, users } from \"../shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport function registerRoutes(app: Express) {\n  const server = createServer(app);\n\n  // Get all sessions\n  app.get(\"/api/sessions\", async (req, res) => {\n    try {\n      const allSessions = await db.select().from(sessions).orderBy(desc(sessions.createdAt));\n      res.json(allSessions);\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch sessions\" });\n    }\n  });\n\n  // Get session by ID with messages\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const session = await db.select().from(sessions).where(eq(sessions.id, sessionId)).limit(1);\n      \n      if (!session.length) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n\n      const sessionMessages = await db\n        .select()\n        .from(messages)\n        .where(eq(messages.sessionId, sessionId))\n        .orderBy(messages.createdAt);\n\n      res.json({ ...session[0], messages: sessionMessages });\n    } catch (error) {\n      console.error(\"Error fetching session:\", error);\n      res.status(500).json({ message: \"Failed to fetch session\" });\n    }\n  });\n\n  // Create new session\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const { therapistPersonality, voiceEnabled, goals } = req.body;\n      \n      const [newSession] = await db\n        .insert(sessions)\n        .values({\n          therapistPersonality: therapistPersonality || \"empathetic\",\n          voiceEnabled: voiceEnabled || false,\n          goals: goals || [],\n          status: \"active\"\n        })\n        .returning();\n\n      res.json(newSession);\n    } catch (error) {\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ message: \"Failed to create session\" });\n    }\n  });\n\n  // Send message (without AI response for now)\n  app.post(\"/api/sessions/:sessionId/messages\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.sessionId);\n      const { content, isUser } = req.body;\n\n      // Save user message\n      const [userMessage] = await db\n        .insert(messages)\n        .values({\n          sessionId,\n          content,\n          isUser: true,\n          createdAt: new Date()\n        })\n        .returning();\n\n      // For now, just return the user message without AI response\n      // In the future, you can add your own response logic here\n      res.json({ userMessage });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // End session\n  app.patch(\"/api/sessions/:id/end\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      \n      const [updatedSession] = await db\n        .update(sessions)\n        .set({ \n          status: \"completed\",\n          endedAt: new Date(),\n          summary: \"Session completed\" // Simple summary for now\n        })\n        .where(eq(sessions.id, sessionId))\n        .returning();\n\n      res.json(updatedSession);\n    } catch (error) {\n      console.error(\"Error ending session:\", error);\n      res.status(500).json({ message: \"Failed to end session\" });\n    }\n  });\n\n  return server;\n}","size_bytes":3473},"New-Eunoia/server/storage.ts":{"content":"// Simple storage interface - keeping for compatibility\n// The actual storage is handled by Drizzle ORM and database\n\nexport interface IStorage {\n  // This can be extended later if needed for additional storage operations\n}\n\nexport class MemStorage implements IStorage {\n  // Placeholder for any in-memory storage needs\n  constructor() {}\n}","size_bytes":340},"New-Eunoia/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"New-Eunoia/shared/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"./schema\";\n\nconst sql = neon(process.env.DATABASE_URL || \"\");\nexport const db = drizzle(sql, { schema });","size_bytes":228},"New-Eunoia/shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\"),\n  therapistPersonality: text(\"therapist_personality\").notNull(),\n  voiceEnabled: boolean(\"voice_enabled\").default(false),\n  goals: json(\"goals\").$type<string[]>().notNull().default([]),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, paused\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  endedAt: timestamp(\"ended_at\"),\n  duration: integer(\"duration_seconds\"),\n  summary: text(\"summary\"),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  content: text(\"content\").notNull(),\n  isUser: boolean(\"is_user\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const crisisEvents = pgTable(\"crisis_events\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  detectedKeywords: json(\"detected_keywords\").$type<string[]>().notNull(),\n  userMessage: text(\"user_message\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  actionTaken: text(\"action_taken\"),\n});\n\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\"),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const moodEntries = pgTable(\"mood_entries\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\"),\n  moodScore: integer(\"mood_score\").notNull(), // 1-10\n  moodEmoji: text(\"mood_emoji\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n  endedAt: true,\n  duration: true,\n  summary: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCrisisEventSchema = createInsertSchema(crisisEvents).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMoodEntrySchema = createInsertSchema(moodEntries).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertCrisisEvent = z.infer<typeof insertCrisisEventSchema>;\nexport type CrisisEvent = typeof crisisEvents.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertMoodEntry = z.infer<typeof insertMoodEntrySchema>;\nexport type MoodEntry = typeof moodEntries.$inferSelect;","size_bytes":3543},"EunoiaFirst/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Home from \"@/pages/home\";\nimport JournalPage from \"@/pages/journal\";\nimport MoodPage from \"@/pages/mood\";\nimport CBTToolsPage from \"@/pages/cbt-tools\";\nimport SessionSummariesPage from \"@/pages/session-summaries\";\nimport SettingsPage from \"@/pages/settings\";\nimport SessionPage from \"@/pages/session\";\n\nexport interface SessionSettings {\n  therapistPersonality: string;\n  selectedVoice: string;\n  selectedGoals: string[];\n}\n\nexport type CurrentPage = 'home' | 'session' | 'journal' | 'mood' | 'cbt-tools' | 'session-summaries' | 'settings';\n\nfunction Router() {\n  const [sessionSettings, setSessionSettings] = useState<SessionSettings | null>(null);\n  const [currentPage, setCurrentPage] = useState<CurrentPage>('home');\n  const [sessionId, setSessionId] = useState<number | null>(null);\n\n  const renderCurrentPage = () => {\n    if (!sessionSettings) {\n      return <Onboarding onComplete={setSessionSettings} />;\n    }\n\n    switch (currentPage) {\n      case 'home':\n        return <Home \n          sessionSettings={sessionSettings} \n          onPageChange={setCurrentPage}\n          onSessionStart={(id) => {\n            setSessionId(id);\n            setCurrentPage('session');\n          }}\n        />;\n      case 'session':\n        return sessionId && sessionSettings ? (\n          <SessionPage \n            sessionId={sessionId}\n            sessionSettings={sessionSettings}\n            onPageChange={setCurrentPage}\n            onSessionEnd={() => {\n              setSessionId(null);\n              setCurrentPage('home');\n            }}\n          />\n        ) : (\n          <Home \n            sessionSettings={sessionSettings} \n            onPageChange={setCurrentPage}\n            onSessionStart={(id) => {\n              setSessionId(id);\n              setCurrentPage('session');\n            }}\n          />\n        );\n      case 'journal':\n        return <JournalPage \n          sessionId={sessionId || undefined} \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n        />;\n      case 'mood':\n        return <MoodPage \n          sessionId={sessionId || undefined} \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n        />;\n      case 'cbt-tools':\n        return <CBTToolsPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      case 'session-summaries':\n        return <SessionSummariesPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      case 'settings':\n        return <SettingsPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n          sessionSettings={sessionSettings}\n          onUpdateSettings={setSessionSettings}\n        />;\n      default:\n        return <Home \n          sessionSettings={sessionSettings} \n          onPageChange={setCurrentPage}\n          onSessionStart={(id) => {\n            setSessionId(id);\n            setCurrentPage('session');\n          }}\n        />;\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={renderCurrentPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4070},"EunoiaFirst/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(255, 91%, 69%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(186, 100%, 39%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(122, 39%, 49%);\n  --warning: hsl(43, 96%, 56%);\n  --error: hsl(4, 90%, 58%);\n  --neutral: hsl(210, 20%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(255, 91%, 69%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(186, 100%, 39%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-gradient-primary {\n    background: linear-gradient(135deg, hsl(255, 91%, 69%) 0%, hsl(291, 78%, 60%) 100%);\n  }\n  \n  .bg-gradient-neutral {\n    background: linear-gradient(135deg, hsl(251, 100%, 96%) 0%, hsl(207, 100%, 96%) 100%);\n  }\n  \n  .animate-pulse-soft {\n    animation: pulse-soft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  @keyframes pulse-soft {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n  }\n}\n","size_bytes":2269},"EunoiaFirst/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"EunoiaFirst/server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\" \n});\n\nexport interface TherapistPersonality {\n  name: string;\n  description: string;\n  systemPrompt: string;\n}\n\nexport const therapistPersonalities: Record<string, TherapistPersonality> = {\n  empathetic: {\n    name: \"Dr. Emma\",\n    description: \"Warm, understanding, and deeply compassionate. Focuses on emotional validation and support.\",\n    systemPrompt: `You are Dr. Emma, a highly empathetic and compassionate AI therapist. Your approach is warm, understanding, and deeply caring. You always:\n    - Validate emotions and feelings without judgment\n    - Use gentle, supportive language\n    - Focus on emotional support and understanding\n    - Offer comfort and reassurance\n    - Help users feel heard and understood\n    - Use CBT techniques when appropriate, but prioritize emotional validation\n    - Detect crisis situations and respond with immediate care and resources\n    - Keep responses conversational and supportive, not clinical\n    - Remember you're having a real conversation with someone who needs help`\n  },\n  analytical: {\n    name: \"Dr. Alex\",\n    description: \"Logical, structured, and solution-focused. Emphasizes CBT techniques and practical strategies.\",\n    systemPrompt: `You are Dr. Alex, a logical and structured AI therapist specializing in Cognitive Behavioral Therapy. Your approach is analytical and solution-focused. You always:\n    - Use evidence-based CBT techniques\n    - Help identify thought patterns and cognitive distortions\n    - Provide practical, actionable strategies\n    - Structure conversations with clear goals\n    - Offer homework assignments and exercises\n    - Focus on problem-solving and skill-building\n    - Maintain a professional but caring demeanor\n    - Detect crisis situations and respond immediately with appropriate resources\n    - Keep responses focused on practical solutions while remaining empathetic\n    - Remember you're helping someone develop coping skills and strategies`\n  },\n  supportive: {\n    name: \"Dr. Sam\",\n    description: \"Encouraging, patient, and strength-focused. Helps build confidence and resilience.\",\n    systemPrompt: `You are Dr. Sam, a supportive and encouraging AI therapist focused on building strength and resilience. Your approach is patient and strength-based. You always:\n    - Highlight client strengths and capabilities\n    - Provide encouragement and positive reinforcement\n    - Help build confidence and self-efficacy\n    - Focus on resilience and coping skills\n    - Celebrate progress and small victories\n    - Maintain an optimistic but realistic perspective\n    - Use motivational interviewing techniques\n    - Detect crisis situations and respond with immediate support and resources\n    - Keep responses uplifting while acknowledging challenges\n    - Remember you're helping someone build their inner strength`\n  },\n  mindful: {\n    name: \"Dr. Maya\",\n    description: \"Calm, present, and wisdom-oriented. Integrates mindfulness and meditation practices.\",\n    systemPrompt: `You are Dr. Maya, a mindful and present AI therapist who integrates mindfulness and meditation practices. Your approach is calm and wisdom-oriented. You always:\n    - Incorporate mindfulness and meditation techniques\n    - Focus on present-moment awareness\n    - Help clients develop self-compassion\n    - Use gentle, contemplative language\n    - Offer breathing exercises and grounding techniques\n    - Emphasize acceptance and non-judgment\n    - Draw from mindfulness-based therapies\n    - Detect crisis situations and respond with immediate care and resources\n    - Keep responses peaceful and centered while being helpful\n    - Remember you're guiding someone toward inner peace and self-awareness`\n  }\n};\n\nexport async function getTherapistResponse(\n  personality: string,\n  userMessage: string,\n  conversationHistory: Array<{role: string, content: string}>,\n  userGoals: string[]\n): Promise<string> {\n  const therapist = therapistPersonalities[personality];\n  if (!therapist) {\n    throw new Error(`Unknown therapist personality: ${personality}`);\n  }\n\n  const systemPrompt = `${therapist.systemPrompt}\n\nThe user's goals for this session are: ${userGoals.join(', ')}\n\nImportant guidelines:\n- Keep responses conversational and supportive (2-4 sentences typically)\n- Use CBT techniques naturally in conversation\n- If you detect crisis language (suicide, self-harm, hopelessness), acknowledge immediately and suggest crisis resources\n- Stay in character as ${therapist.name}\n- Be helpful and therapeutic while maintaining appropriate boundaries`;\n\n  const messages = [\n    { role: \"system\", content: systemPrompt },\n    ...conversationHistory,\n    { role: \"user\", content: userMessage }\n  ];\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: messages as any,\n      max_tokens: 500,\n      temperature: 0.7,\n    });\n\n    return response.choices[0].message.content || \"I'm here to help. Could you tell me more about what's on your mind?\";\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    // Return a therapeutic fallback response instead of throwing\n    return \"I understand you're reaching out, and I'm here to listen. While I'm having some technical difficulties with my responses right now, I want you to know that your feelings are valid and important. Please feel free to continue sharing, and consider using the CBT tools, journal, and mood tracking features in the sidebar to help process your thoughts and feelings. If you need immediate support, please reach out to a crisis hotline or mental health professional.\";\n  }\n}\n\nexport async function generateSessionSummary(\n  messages: Array<{role: string, content: string}>,\n  personality: string,\n  goals: string[],\n  duration: number\n): Promise<{\n  keyTopics: string[];\n  cbtTechniques: string[];\n  homework: string[];\n  therapistNotes: string;\n}> {\n  const therapist = therapistPersonalities[personality];\n  \n  const prompt = `As ${therapist.name}, analyze this therapy session and provide a summary. The session lasted ${Math.floor(duration / 60)} minutes and focused on: ${goals.join(', ')}.\n\nSession messages:\n${messages.map(m => `${m.role}: ${m.content}`).join('\\n')}\n\nPlease provide a JSON response with:\n- keyTopics: Array of 3-5 main topics discussed\n- cbtTechniques: Array of CBT techniques used\n- homework: Array of 2-3 suggested homework assignments\n- therapistNotes: A brief note from the therapist perspective\n\nFormat as valid JSON.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n      max_tokens: 800,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      keyTopics: result.keyTopics || [],\n      cbtTechniques: result.cbtTechniques || [],\n      homework: result.homework || [],\n      therapistNotes: result.therapistNotes || \"Session completed successfully.\"\n    };\n  } catch (error) {\n    console.error('Failed to generate session summary:', error);\n    return {\n      keyTopics: [\"General discussion\"],\n      cbtTechniques: [\"Active listening\"],\n      homework: [\"Practice self-care\"],\n      therapistNotes: \"Session completed successfully.\"\n    };\n  }\n}\n\nexport function detectCrisisKeywords(message: string): string[] {\n  const crisisKeywords = [\n    'suicide', 'kill myself', 'end it all', 'no point', 'hurt myself',\n    'self harm', 'cut myself', 'overdose', 'jump off', 'hang myself',\n    'better off dead', 'want to die', 'end my life', 'hopeless',\n    'worthless', 'burden', 'everyone would be better', 'plan to hurt',\n    'thoughts of death', 'suicidal'\n  ];\n  \n  const lowerMessage = message.toLowerCase();\n  return crisisKeywords.filter(keyword => lowerMessage.includes(keyword));\n}\n","size_bytes":8107},"EunoiaFirst/server/services/therapeutic-ai.ts":{"content":"import { TherapistPersonality } from './openai';\n\n// Therapeutic AI service using AI/ML API with Claude and DeepSeek models\nexport class TherapeuticAI {\n  private apiKey: string;\n  private baseUrl = 'https://api.aimlapi.com/v1';\n\n  constructor() {\n    this.apiKey = process.env.AIML_API_KEY || '';\n    if (!this.apiKey) {\n      throw new Error('AIML_API_KEY environment variable is required');\n    }\n  }\n\n  // Enhanced therapeutic personalities with professional training\n  public therapistPersonalities: Record<string, TherapistPersonality> = {\n    empathetic: {\n      name: \"Dr. Emma\",\n      description: \"A warm, understanding therapist who focuses on emotional validation and support\",\n      systemPrompt: `You are Dr. Emma, a licensed clinical psychologist specializing in empathetic therapy. You have 15 years of experience helping clients process emotions and build resilience.\n\nCore therapeutic principles:\n- Always validate the client's feelings and experiences\n- Use reflective listening and emotional mirroring\n- Apply person-centered therapy approaches\n- Incorporate trauma-informed care principles\n- Focus on emotional processing and self-compassion\n\nYour responses should:\n- Start with emotional validation (\"That sounds really difficult...\")\n- Use warm, supportive language\n- Ask open-ended questions about feelings\n- Normalize emotional experiences\n- Suggest gentle self-care practices\n- Always maintain professional boundaries\n\nCrisis protocol: If client mentions self-harm, suicide, or immediate danger, immediately provide crisis resources and encourage professional help.\n\nRemember: You are a supportive AI companion, not a replacement for human therapy. Always encourage clients to seek professional help for serious concerns.`\n    },\n    \n    analytical: {\n      name: \"Dr. Alex\",\n      description: \"A structured, solution-focused therapist who uses CBT and evidence-based approaches\",\n      systemPrompt: `You are Dr. Alex, a cognitive-behavioral therapist with expertise in analytical approaches to mental health. You have specialized training in CBT, DBT, and solution-focused therapy.\n\nCore therapeutic principles:\n- Use cognitive-behavioral therapy (CBT) techniques\n- Help identify thought patterns and cognitive distortions\n- Focus on practical coping strategies\n- Apply behavioral activation techniques\n- Use structured problem-solving approaches\n- Incorporate mindfulness and grounding exercises\n\nYour responses should:\n- Help identify negative thought patterns\n- Suggest cognitive restructuring techniques\n- Provide practical homework assignments\n- Use the thought-feeling-behavior triangle\n- Offer evidence-based coping strategies\n- Ask about specific situations and triggers\n\nCommon CBT techniques to use:\n- Thought challenging (evidence for/against thoughts)\n- Behavioral experiments\n- Activity scheduling\n- Mood tracking\n- Progressive muscle relaxation\n- Breathing exercises\n\nCrisis protocol: For crisis situations, provide immediate safety planning and professional resources.\n\nRemember: Focus on teachable skills and practical tools while maintaining therapeutic rapport.`\n    },\n    \n    supportive: {\n      name: \"Dr. Sam\",\n      description: \"An encouraging therapist who focuses on strengths, resilience, and positive psychology\",\n      systemPrompt: `You are Dr. Sam, a licensed therapist specializing in strengths-based therapy and positive psychology. You help clients build resilience and discover their inherent capabilities.\n\nCore therapeutic principles:\n- Strength-based and solution-focused approaches\n- Positive psychology interventions\n- Resilience building techniques\n- Goal-setting and motivation enhancement\n- Self-efficacy development\n- Growth mindset cultivation\n\nYour responses should:\n- Highlight client strengths and past successes\n- Focus on what's working and build upon it\n- Use motivational interviewing techniques\n- Encourage self-advocacy and empowerment\n- Suggest achievable next steps\n- Celebrate progress and small wins\n\nTherapeutic techniques to incorporate:\n- Strengths inventory and identification\n- Values clarification exercises\n- Goal-setting frameworks (SMART goals)\n- Gratitude and appreciation practices\n- Future-focused visioning\n- Resilience building activities\n\nCrisis protocol: Maintain safety while emphasizing client's survival strengths and available resources.\n\nRemember: Balance optimism with validation of real struggles. Avoid toxic positivity while genuinely highlighting capabilities.`\n    },\n    \n    mindful: {\n      name: \"Dr. Maya\",\n      description: \"A mindfulness-based therapist who integrates meditation, acceptance, and present-moment awareness\",\n      systemPrompt: `You are Dr. Maya, a mindfulness-based therapist with training in MBSR, ACT (Acceptance and Commitment Therapy), and contemplative psychotherapy. You help clients develop present-moment awareness and psychological flexibility.\n\nCore therapeutic principles:\n- Mindfulness-based interventions\n- Acceptance and Commitment Therapy (ACT)\n- Present-moment awareness cultivation\n- Non-judgmental observation of thoughts/feelings\n- Values-based living\n- Psychological flexibility development\n\nYour responses should:\n- Guide clients to present-moment awareness\n- Teach mindfulness techniques and exercises\n- Help develop non-judgmental self-observation\n- Focus on acceptance rather than elimination of difficult emotions\n- Explore values and committed action\n- Suggest brief mindfulness practices\n\nMindfulness techniques to offer:\n- Breathing awareness exercises\n- Body scan meditations\n- Mindful observation practices\n- Loving-kindness meditation\n- Values clarification exercises\n- Defusion techniques for difficult thoughts\n\nCrisis protocol: Use grounding techniques and present-moment awareness to create safety, while providing professional resources.\n\nRemember: Emphasize acceptance and mindful awareness while maintaining therapeutic presence and safety.`\n    }\n  };\n\n  async getTherapistResponse(\n    personality: string,\n    messages: Array<{ role: string; content: string }>,\n    sessionGoals: string[] = []\n  ): Promise<string> {\n    const therapist = this.therapistPersonalities[personality] || this.therapistPersonalities.empathetic;\n    \n    // Get the last user message for context-aware responses\n    const lastUserMessage = messages.filter(m => m.role === 'user').pop()?.content || '';\n    const isFirstMessage = messages.filter(m => m.role === 'user').length <= 1;\n    \n    // Enhanced rule-based therapeutic responses with AI-like sophistication\n    return this.generateTherapeuticResponse(therapist, lastUserMessage, sessionGoals, isFirstMessage);\n  }\n\n  private generateTherapeuticResponse(\n    therapist: TherapistPersonality,\n    userMessage: string,\n    sessionGoals: string[],\n    isFirstMessage: boolean\n  ): string {\n    if (isFirstMessage) {\n      return this.generateGreeting(therapist, sessionGoals);\n    }\n\n    // Analyze user message for therapeutic cues\n    const lowerMessage = userMessage.toLowerCase();\n    const emotionalWords = this.identifyEmotionalContent(lowerMessage);\n    const therapeuticNeeds = this.identifyTherapeuticNeeds(lowerMessage);\n    \n    // Generate response based on therapist personality and user needs\n    switch (therapist.name) {\n      case 'Dr. Emma': // Empathetic\n        return this.generateEmpathicResponse(userMessage, emotionalWords, therapeuticNeeds);\n      case 'Dr. Alex': // Analytical\n        return this.generateAnalyticalResponse(userMessage, emotionalWords, therapeuticNeeds);\n      case 'Dr. Sam': // Supportive\n        return this.generateSupportiveResponse(userMessage, emotionalWords, therapeuticNeeds);\n      case 'Dr. Maya': // Mindful\n        return this.generateMindfulResponse(userMessage, emotionalWords, therapeuticNeeds);\n      default:\n        return this.generateEmpathicResponse(userMessage, emotionalWords, therapeuticNeeds);\n    }\n  }\n\n  private generateGreeting(therapist: TherapistPersonality, sessionGoals: string[]): string {\n    const goalText = sessionGoals.length > 0 \n      ? ` I see you're interested in working on ${sessionGoals.join(' and ').toLowerCase()}.`\n      : '';\n    \n    switch (therapist.name) {\n      case 'Dr. Emma':\n        return `Hello, and welcome. I'm Dr. Emma, and I'm really glad you've taken this step to reach out today.${goalText} I want you to know this is a safe space where you can share whatever is on your mind. How are you feeling right now?`;\n      case 'Dr. Alex':\n        return `Good to meet you. I'm Dr. Alex, and I specialize in helping people develop practical strategies for life's challenges.${goalText} I'm here to help you understand patterns and develop effective coping tools. What would you like to focus on in our time together?`;\n      case 'Dr. Sam':\n        return `Hi there! I'm Dr. Sam, and I'm genuinely excited to work with you today.${goalText} I believe in focusing on your strengths and the positive changes you want to make. What's going well in your life right now, and what would you like to see improve?`;\n      case 'Dr. Maya':\n        return `Welcome. I'm Dr. Maya. Take a moment to notice your breathing and how you're feeling right now.${goalText} I'm here to help you develop mindful awareness and acceptance. What brought you to seek support today?`;\n      default:\n        return `Hello, I'm here to support you through whatever you're experiencing.${goalText} How are you feeling today?`;\n    }\n  }\n\n  private generateEmpathicResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const validationPhrase = this.getValidationPhrase(emotions);\n    const empathicReflection = this.getEmpathicReflection(userMessage);\n    const supportiveQuestion = this.getSupportiveQuestion(needs);\n    \n    return `${validationPhrase} ${empathicReflection} \n\nI can hear that you're going through something difficult, and I want you to know that your feelings are completely valid. It takes courage to share these experiences. ${supportiveQuestion}`;\n  }\n\n  private generateAnalyticalResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const thoughtPattern = this.identifyThoughtPatterns(userMessage);\n    const cbtTechnique = this.suggestCBTTechnique(needs);\n    const practicalQuestion = this.getPracticalQuestion(userMessage);\n    \n    return `I notice ${thoughtPattern} in what you're sharing. This is actually quite common, and there are specific techniques we can use to address this. ${cbtTechnique}\n\nLet's explore this together: ${practicalQuestion} Understanding these patterns can help us develop more effective coping strategies.`;\n  }\n\n  private generateSupportiveResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const strengthAcknowledgment = this.identifyStrengths(userMessage);\n    const encouragingPerspective = this.getEncouragingPerspective(needs);\n    const goalOrientedQuestion = this.getGoalOrientedQuestion();\n    \n    return `${strengthAcknowledgment} I can see the effort you're putting into understanding and improving your situation. ${encouragingPerspective}\n\nRemember, growth happens one step at a time, and you're already taking important steps by being here. ${goalOrientedQuestion}`;\n  }\n\n  private generateMindfulResponse(userMessage: string, emotions: string[], needs: string[]): string {\n    const mindfulObservation = this.getMindfulObservation(userMessage);\n    const acceptanceReframe = this.getAcceptanceReframe(emotions);\n    const mindfulQuestion = this.getMindfulQuestion();\n    \n    return `${mindfulObservation} Notice how these thoughts and feelings are present right now, without needing to change them immediately. ${acceptanceReframe}\n\nTake a breath with me. ${mindfulQuestion} Sometimes simply observing our inner experience with kindness can be profoundly healing.`;\n  }\n\n  // Helper methods for generating therapeutic responses\n  private identifyEmotionalContent(message: string): string[] {\n    const emotionalKeywords = {\n      anxiety: ['anxious', 'worried', 'nervous', 'scared', 'panic', 'stress'],\n      sadness: ['sad', 'depressed', 'down', 'hopeless', 'empty', 'lonely'],\n      anger: ['angry', 'mad', 'frustrated', 'annoyed', 'furious', 'irritated'],\n      overwhelm: ['overwhelmed', 'too much', 'can\\'t handle', 'exhausted', 'burned out']\n    };\n    \n    const found: string[] = [];\n    for (const [emotion, keywords] of Object.entries(emotionalKeywords)) {\n      if (keywords.some(keyword => message.includes(keyword))) {\n        found.push(emotion);\n      }\n    }\n    return found;\n  }\n\n  private identifyTherapeuticNeeds(message: string): string[] {\n    const needsKeywords = {\n      coping: ['don\\'t know how', 'can\\'t handle', 'struggling with', 'overwhelmed'],\n      support: ['alone', 'no one understands', 'isolated', 'need help'],\n      clarity: ['confused', 'don\\'t understand', 'mixed up', 'unclear'],\n      change: ['want to change', 'need to improve', 'better', 'different']\n    };\n    \n    const found: string[] = [];\n    for (const [need, keywords] of Object.entries(needsKeywords)) {\n      if (keywords.some(keyword => message.includes(keyword))) {\n        found.push(need);\n      }\n    }\n    return found;\n  }\n\n  private getValidationPhrase(emotions: string[]): string {\n    if (emotions.includes('anxiety')) return \"I can hear the anxiety in what you're sharing, and that must feel really overwhelming.\";\n    if (emotions.includes('sadness')) return \"It sounds like you're carrying some heavy feelings right now.\";\n    if (emotions.includes('anger')) return \"I can sense the frustration you're experiencing.\";\n    return \"Thank you for sharing something so personal with me.\";\n  }\n\n  private getEmpathicReflection(message: string): string {\n    const reflections = [\n      \"It sounds like you've been dealing with a lot lately.\",\n      \"I can imagine how difficult this situation must be for you.\",\n      \"That sounds really challenging to navigate.\",\n      \"It takes strength to acknowledge these feelings.\"\n    ];\n    return reflections[Math.floor(Math.random() * reflections.length)];\n  }\n\n  private getSupportiveQuestion(needs: string[]): string {\n    if (needs.includes('coping')) return \"What have you tried so far that's helped, even a little bit?\";\n    if (needs.includes('support')) return \"Who in your life do you feel most comfortable talking to?\";\n    if (needs.includes('clarity')) return \"What part of this situation would be most helpful to understand better?\";\n    return \"What would feel most supportive for you right now?\";\n  }\n\n  private identifyThoughtPatterns(message: string): string {\n    if (message.includes('always') || message.includes('never')) {\n      return \"some all-or-nothing thinking patterns\";\n    }\n    if (message.includes('should') || message.includes('must')) {\n      return \"some self-critical expectations\";\n    }\n    if (message.includes('what if')) {\n      return \"anticipatory worry patterns\";\n    }\n    return \"some thought patterns we can explore\";\n  }\n\n  private suggestCBTTechnique(needs: string[]): string {\n    if (needs.includes('anxiety')) {\n      return \"One technique that can be helpful is the 5-4-3-2-1 grounding method: notice 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, and 1 you can taste.\";\n    }\n    return \"We can work on thought challenging - examining the evidence for and against these thoughts.\";\n  }\n\n  private getPracticalQuestion(message: string): string {\n    return \"What evidence do you have that supports this thought, and what evidence might challenge it?\";\n  }\n\n  private identifyStrengths(message: string): string {\n    return \"I notice that you're being really honest and self-aware about your situation, which shows incredible insight.\";\n  }\n\n  private getEncouragingPerspective(needs: string[]): string {\n    return \"Every challenge is also an opportunity to develop new skills and resilience.\";\n  }\n\n  private getGoalOrientedQuestion(): string {\n    const questions = [\n      \"What would you most like to be different in your life?\",\n      \"If this situation improved, what would that look like for you?\",\n      \"What small step could you take this week toward feeling better?\"\n    ];\n    return questions[Math.floor(Math.random() * questions.length)];\n  }\n\n  private getMindfulObservation(message: string): string {\n    return \"I notice the thoughts and feelings you're describing seem to be taking up a lot of space in your awareness right now.\";\n  }\n\n  private getAcceptanceReframe(emotions: string[]): string {\n    return \"These feelings are information about your inner experience - they don't define you, and they will change.\";\n  }\n\n  private getMindfulQuestion(): string {\n    const questions = [\n      \"What do you notice happening in your body as we talk about this?\",\n      \"If you could send compassion to the part of you that's struggling, what would you say?\",\n      \"What would it feel like to hold these difficult emotions with kindness?\"\n    ];\n    return questions[Math.floor(Math.random() * questions.length)];\n  }\n\n  async generateSessionSummary(\n    messages: Array<{ role: string; content: string; timestamp: Date }>,\n    therapistPersonality: string,\n    sessionDuration: number\n  ): Promise<{\n    summary: string;\n    keyTopics: string[];\n    cbtTechniques: string[];\n    homework: string[];\n    therapistNotes: string;\n  }> {\n    const therapist = this.therapistPersonalities[therapistPersonality] || this.therapistPersonalities.empathetic;\n    \n    // Analyze the conversation for therapeutic content\n    const userMessages = messages.filter(msg => msg.role === 'user').map(msg => msg.content.toLowerCase());\n    const allText = userMessages.join(' ');\n    \n    // Generate intelligent summary based on conversation analysis\n    return this.analyzeSessionContent(therapist, allText, sessionDuration, userMessages.length);\n  }\n\n  private analyzeSessionContent(\n    therapist: TherapistPersonality,\n    conversationText: string,\n    duration: number,\n    messageCount: number\n  ): {\n    summary: string;\n    keyTopics: string[];\n    cbtTechniques: string[];\n    homework: string[];\n    therapistNotes: string;\n  } {\n    // Identify key themes and emotions from the conversation\n    const emotions = this.identifyEmotionalContent(conversationText);\n    const needs = this.identifyTherapeuticNeeds(conversationText);\n    const topics = this.identifyDiscussionTopics(conversationText);\n    \n    // Generate summary based on therapist personality and session content\n    const summary = this.generateSessionSummaryText(therapist, emotions, topics, duration);\n    const keyTopics = this.generateKeyTopics(emotions, needs, topics);\n    const cbtTechniques = this.generateCBTTechniques(therapist, emotions, needs);\n    const homework = this.generateHomework(therapist, emotions, needs);\n    const therapistNotes = this.generateTherapistNotes(therapist, emotions, needs, messageCount, duration);\n    \n    return {\n      summary,\n      keyTopics,\n      cbtTechniques,\n      homework,\n      therapistNotes\n    };\n  }\n\n  private identifyDiscussionTopics(text: string): string[] {\n    const topicKeywords = {\n      relationships: ['relationship', 'partner', 'family', 'friend', 'marriage', 'divorce', 'dating'],\n      work: ['work', 'job', 'career', 'boss', 'colleague', 'workplace', 'employment'],\n      anxiety: ['anxious', 'worry', 'nervous', 'panic', 'stress', 'fear', 'overwhelmed'],\n      depression: ['sad', 'depressed', 'hopeless', 'empty', 'lonely', 'down', 'worthless'],\n      trauma: ['trauma', 'abuse', 'ptsd', 'flashback', 'nightmare', 'triggered'],\n      grief: ['grief', 'loss', 'death', 'mourning', 'bereavement', 'passing'],\n      selfEsteem: ['self-esteem', 'confidence', 'worth', 'value', 'shame', 'inadequate'],\n      sleep: ['sleep', 'insomnia', 'tired', 'exhausted', 'rest', 'fatigue'],\n      eating: ['eating', 'food', 'weight', 'appetite', 'body image', 'diet']\n    };\n    \n    const foundTopics: string[] = [];\n    for (const [topic, keywords] of Object.entries(topicKeywords)) {\n      if (keywords.some(keyword => text.includes(keyword))) {\n        foundTopics.push(topic);\n      }\n    }\n    return foundTopics;\n  }\n\n  private generateSessionSummaryText(\n    therapist: TherapistPersonality,\n    emotions: string[],\n    topics: string[],\n    duration: number\n  ): string {\n    const minutes = Math.round(duration / 60);\n    const primaryTheme = topics[0] || 'personal exploration';\n    const emotionalTone = emotions.length > 0 ? emotions.join(' and ') : 'mixed emotions';\n    \n    switch (therapist.name) {\n      case 'Dr. Emma':\n        return `Client engaged in a ${minutes}-minute session focused on ${primaryTheme}, expressing ${emotionalTone}. Strong therapeutic rapport established with emphasis on emotional validation and support.`;\n      case 'Dr. Alex':\n        return `${minutes}-minute structured session addressing ${primaryTheme} using cognitive-behavioral approaches. Client demonstrated engagement with analytical frameworks and practical coping strategies.`;\n      case 'Dr. Sam':\n        return `Strengths-focused ${minutes}-minute session exploring ${primaryTheme}. Client showed resilience and openness to growth-oriented interventions and positive psychology techniques.`;\n      case 'Dr. Maya':\n        return `Mindfulness-centered ${minutes}-minute session with focus on ${primaryTheme}. Client practiced present-moment awareness and explored acceptance-based approaches to challenges.`;\n      default:\n        return `Productive ${minutes}-minute therapeutic session addressing ${primaryTheme} with supportive, client-centered approach.`;\n    }\n  }\n\n  private generateKeyTopics(emotions: string[], needs: string[], topics: string[]): string[] {\n    const keyTopics: string[] = [];\n    \n    // Add identified discussion topics\n    const topicMapping = {\n      relationships: 'Relationship dynamics',\n      work: 'Work-related stress',\n      anxiety: 'Anxiety management',\n      depression: 'Mood and depression',\n      trauma: 'Trauma processing',\n      grief: 'Grief and loss',\n      selfEsteem: 'Self-esteem and self-worth',\n      sleep: 'Sleep difficulties',\n      eating: 'Body image and eating'\n    };\n    \n    topics.forEach(topic => {\n      if (topicMapping[topic]) {\n        keyTopics.push(topicMapping[topic]);\n      }\n    });\n    \n    // Add emotional themes\n    if (emotions.includes('anxiety')) keyTopics.push('Anxiety and worry patterns');\n    if (emotions.includes('sadness')) keyTopics.push('Emotional processing');\n    if (emotions.includes('anger')) keyTopics.push('Anger management');\n    if (emotions.includes('overwhelm')) keyTopics.push('Stress and overwhelm');\n    \n    // Add therapeutic needs\n    if (needs.includes('coping')) keyTopics.push('Coping strategy development');\n    if (needs.includes('support')) keyTopics.push('Building support systems');\n    if (needs.includes('clarity')) keyTopics.push('Gaining clarity and insight');\n    if (needs.includes('change')) keyTopics.push('Personal growth and change');\n    \n    // Ensure we have some key topics\n    if (keyTopics.length === 0) {\n      keyTopics.push('Emotional support', 'Self-reflection', 'Personal growth');\n    }\n    \n    return keyTopics.slice(0, 5); // Limit to 5 key topics\n  }\n\n  private generateCBTTechniques(therapist: TherapistPersonality, emotions: string[], needs: string[]): string[] {\n    const techniques: string[] = ['Active listening', 'Emotional validation'];\n    \n    switch (therapist.name) {\n      case 'Dr. Alex':\n        techniques.push('Cognitive restructuring', 'Thought challenging', 'Behavioral activation');\n        if (emotions.includes('anxiety')) techniques.push('Grounding techniques');\n        break;\n      case 'Dr. Maya':\n        techniques.push('Mindfulness meditation', 'Present-moment awareness', 'Acceptance techniques');\n        break;\n      case 'Dr. Sam':\n        techniques.push('Strengths identification', 'Goal setting', 'Positive reframing');\n        break;\n      default:\n        techniques.push('Empathetic reflection', 'Supportive questioning');\n    }\n    \n    // Add specific techniques based on needs\n    if (needs.includes('coping')) techniques.push('Coping skills training');\n    if (emotions.includes('anxiety')) techniques.push('Breathing exercises');\n    if (emotions.includes('overwhelm')) techniques.push('Time management strategies');\n    \n    return Array.from(new Set(techniques)).slice(0, 4); // Remove duplicates and limit to 4\n  }\n\n  private generateHomework(therapist: TherapistPersonality, emotions: string[], needs: string[]): string[] {\n    const homework: string[] = [];\n    \n    // Base homework based on therapist approach\n    switch (therapist.name) {\n      case 'Dr. Emma':\n        homework.push('Practice daily self-compassion exercises');\n        break;\n      case 'Dr. Alex':\n        homework.push('Complete thought records for negative thoughts');\n        homework.push('Practice the 5-4-3-2-1 grounding technique when anxious');\n        break;\n      case 'Dr. Sam':\n        homework.push('Write down three personal strengths each day');\n        homework.push('Set one small, achievable goal for the week');\n        break;\n      case 'Dr. Maya':\n        homework.push('Practice 5 minutes of mindful breathing daily');\n        homework.push('Try mindful observation exercises');\n        break;\n    }\n    \n    // Add emotion-specific homework\n    if (emotions.includes('anxiety')) {\n      homework.push('Use progressive muscle relaxation before bed');\n    }\n    if (emotions.includes('sadness')) {\n      homework.push('Engage in one pleasant activity each day');\n    }\n    if (emotions.includes('overwhelm')) {\n      homework.push('Practice breaking large tasks into smaller steps');\n    }\n    \n    // Add need-specific homework\n    if (needs.includes('support')) {\n      homework.push('Reach out to one supportive person this week');\n    }\n    if (needs.includes('clarity')) {\n      homework.push('Journal about your thoughts and feelings for 10 minutes daily');\n    }\n    \n    return Array.from(new Set(homework)).slice(0, 3); // Remove duplicates and limit to 3\n  }\n\n  private generateTherapistNotes(\n    therapist: TherapistPersonality,\n    emotions: string[],\n    needs: string[],\n    messageCount: number,\n    duration: number\n  ): string {\n    const engagement = messageCount > 5 ? 'highly engaged' : messageCount > 2 ? 'moderately engaged' : 'tentatively engaged';\n    const sessionLength = duration > 600 ? 'extended' : duration > 300 ? 'standard' : 'brief';\n    \n    let notes = `Client was ${engagement} during this ${sessionLength} session. `;\n    \n    // Add therapist-specific observations\n    switch (therapist.name) {\n      case 'Dr. Emma':\n        notes += 'Strong therapeutic alliance established. Client shows willingness to explore emotions. ';\n        break;\n      case 'Dr. Alex':\n        notes += 'Client responds well to structured approaches. Consider continuing CBT techniques. ';\n        break;\n      case 'Dr. Sam':\n        notes += 'Client demonstrates inherent resilience. Focus on building upon existing strengths. ';\n        break;\n      case 'Dr. Maya':\n        notes += 'Client shows openness to mindfulness practices. Continue acceptance-based approaches. ';\n        break;\n    }\n    \n    // Add recommendations based on emotions and needs\n    if (emotions.includes('anxiety')) {\n      notes += 'Recommend anxiety management techniques and stress reduction strategies. ';\n    }\n    if (needs.includes('coping')) {\n      notes += 'Focus on developing practical coping skills in future sessions. ';\n    }\n    if (needs.includes('support')) {\n      notes += 'Explore social support systems and consider group therapy options. ';\n    }\n    \n    notes += 'Continue weekly sessions to maintain progress and build therapeutic rapport.';\n    \n    return notes;\n  }\n\n  // Enhanced crisis detection with professional assessment\n  async detectCrisisKeywords(message: string): Promise<string[]> {\n    return this.comprehensiveCrisisDetection(message);\n  }\n\n  private comprehensiveCrisisDetection(message: string): string[] {\n    const lowerMessage = message.toLowerCase();\n    const detectedKeywords: string[] = [];\n    \n    // Suicide and self-harm indicators\n    const suicidalKeywords = [\n      'suicide', 'kill myself', 'end my life', 'want to die', 'not worth living',\n      'better off dead', 'end it all', 'no point in living', 'wish I was dead',\n      'take my own life', 'don\\'t want to be here', 'can\\'t go on'\n    ];\n    \n    const selfHarmKeywords = [\n      'self harm', 'cut myself', 'hurt myself', 'harm myself', 'cutting',\n      'burning myself', 'hitting myself', 'punching walls', 'self-injury'\n    ];\n    \n    const overdoseKeywords = [\n      'overdose', 'too many pills', 'all the pills', 'bottle of pills',\n      'sleeping pills', 'pain medication', 'taking everything'\n    ];\n    \n    const methodKeywords = [\n      'jump off', 'hang myself', 'rope', 'bridge', 'building', 'gun',\n      'knife', 'razor', 'pills', 'car crash', 'train', 'poison'\n    ];\n    \n    // Immediate danger indicators\n    const dangerKeywords = [\n      'going to hurt', 'plan to', 'tonight', 'right now', 'can\\'t wait',\n      'have the', 'ready to', 'about to', 'planning to'\n    ];\n    \n    // Abuse and violence indicators  \n    const abuseKeywords = [\n      'abuse', 'domestic violence', 'being hurt', 'afraid for my safety',\n      'hitting me', 'threatening me', 'scared of', 'violent', 'unsafe'\n    ];\n    \n    // Severe mental health crisis\n    const crisisKeywords = [\n      'losing my mind', 'going crazy', 'can\\'t think straight', 'hallucinating',\n      'hearing voices', 'seeing things', 'psychotic', 'breakdown',\n      'can\\'t function', 'completely lost', 'no hope', 'hopeless'\n    ];\n    \n    // Substance abuse crisis\n    const substanceKeywords = [\n      'overdosed', 'too much alcohol', 'drinking too much', 'using drugs',\n      'can\\'t stop drinking', 'addicted', 'withdrawal', 'detox'\n    ];\n    \n    // Check for different categories of crisis\n    if (suicidalKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('suicidal ideation');\n    }\n    \n    if (selfHarmKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('self-harm');\n    }\n    \n    if (overdoseKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('overdose risk');\n    }\n    \n    if (methodKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('specific method mentioned');\n    }\n    \n    if (dangerKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('immediate danger');\n    }\n    \n    if (abuseKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('abuse or violence');\n    }\n    \n    if (crisisKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('mental health crisis');\n    }\n    \n    if (substanceKeywords.some(keyword => lowerMessage.includes(keyword))) {\n      detectedKeywords.push('substance abuse crisis');\n    }\n    \n    // Enhanced contextual analysis\n    if (this.detectImminentRisk(lowerMessage)) {\n      detectedKeywords.push('imminent risk');\n    }\n    \n    if (this.detectHopelessness(lowerMessage)) {\n      detectedKeywords.push('hopelessness');\n    }\n    \n    return Array.from(new Set(detectedKeywords)); // Remove duplicates\n  }\n  \n  private detectImminentRisk(message: string): boolean {\n    const imminentPhrases = [\n      'tonight', 'right now', 'today', 'this moment', 'can\\'t wait',\n      'about to', 'going to do it', 'ready to end', 'final decision',\n      'last time', 'goodbye', 'farewell', 'won\\'t see me again'\n    ];\n    \n    return imminentPhrases.some(phrase => message.includes(phrase)) &&\n           (message.includes('die') || message.includes('end') || message.includes('hurt'));\n  }\n  \n  private detectHopelessness(message: string): boolean {\n    const hopelessPhrases = [\n      'no point', 'nothing matters', 'no future', 'never get better',\n      'no way out', 'trapped', 'stuck forever', 'can\\'t escape',\n      'no hope', 'hopeless', 'pointless', 'meaningless'\n    ];\n    \n    return hopelessPhrases.some(phrase => message.includes(phrase));\n  }\n}\n\n// Export a singleton instance\nexport const therapeuticAI = new TherapeuticAI();","size_bytes":32319},"New-Eunoia/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Home from \"@/pages/home\";\nimport JournalPage from \"@/pages/journal\";\nimport MoodPage from \"@/pages/mood\";\nimport CBTToolsPage from \"@/pages/cbt-tools\";\nimport SessionSummariesPage from \"@/pages/session-summaries\";\nimport SettingsPage from \"@/pages/settings\";\nimport SessionPage from \"@/pages/session\";\n\nexport interface SessionSettings {\n  therapistPersonality: string;\n  selectedVoice: string;\n  selectedGoals: string[];\n}\n\nexport type CurrentPage = 'home' | 'session' | 'journal' | 'mood' | 'cbt-tools' | 'session-summaries' | 'settings';\n\nfunction Router() {\n  const [sessionSettings, setSessionSettings] = useState<SessionSettings | null>(null);\n  const [currentPage, setCurrentPage] = useState<CurrentPage>('home');\n  const [sessionId, setSessionId] = useState<number | null>(null);\n\n  const renderCurrentPage = () => {\n    if (!sessionSettings) {\n      return <Onboarding onComplete={setSessionSettings} />;\n    }\n\n    switch (currentPage) {\n      case 'home':\n        return <Home \n          sessionSettings={sessionSettings} \n          onPageChange={setCurrentPage}\n          onSessionStart={(id) => {\n            setSessionId(id);\n            setCurrentPage('session');\n          }}\n        />;\n      case 'session':\n        return sessionId && sessionSettings ? (\n          <SessionPage \n            sessionId={sessionId}\n            sessionSettings={sessionSettings}\n            onPageChange={setCurrentPage}\n            onSessionEnd={() => {\n              setSessionId(null);\n              setCurrentPage('home');\n            }}\n          />\n        ) : (\n          <Home \n            sessionSettings={sessionSettings} \n            onPageChange={setCurrentPage}\n            onSessionStart={(id) => {\n              setSessionId(id);\n              setCurrentPage('session');\n            }}\n          />\n        );\n      case 'journal':\n        return <JournalPage \n          sessionId={sessionId || undefined} \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n        />;\n      case 'mood':\n        return <MoodPage \n          sessionId={sessionId || undefined} \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n        />;\n      case 'cbt-tools':\n        return <CBTToolsPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      case 'session-summaries':\n        return <SessionSummariesPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n        />;\n      case 'settings':\n        return <SettingsPage \n          onBack={() => setCurrentPage('home')} \n          onPageChange={setCurrentPage}\n          currentPage={currentPage}\n          sessionId={sessionId}\n          sessionSettings={sessionSettings}\n          onUpdateSettings={setSessionSettings}\n        />;\n      default:\n        return <Home \n          sessionSettings={sessionSettings} \n          onPageChange={setCurrentPage}\n          onSessionStart={(id) => {\n            setSessionId(id);\n            setCurrentPage('session');\n          }}\n        />;\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={renderCurrentPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4070},"New-Eunoia/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(255, 91%, 69%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(186, 100%, 39%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(122, 39%, 49%);\n  --warning: hsl(43, 96%, 56%);\n  --error: hsl(4, 90%, 58%);\n  --neutral: hsl(210, 20%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(255, 91%, 69%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(186, 100%, 39%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-gradient-primary {\n    background: linear-gradient(135deg, hsl(255, 91%, 69%) 0%, hsl(291, 78%, 60%) 100%);\n  }\n  \n  .bg-gradient-neutral {\n    background: linear-gradient(135deg, hsl(251, 100%, 96%) 0%, hsl(207, 100%, 96%) 100%);\n  }\n  \n  .animate-pulse-soft {\n    animation: pulse-soft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  @keyframes pulse-soft {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.7;\n    }\n  }\n}\n","size_bytes":2269},"New-Eunoia/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"EunoiaFirst/client/src/components/chat-interface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Send, User, UserCheck } from \"lucide-react\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatInterfaceProps {\n  therapistName: string;\n  onSendMessage: (content: string, isVoice: boolean) => void;\n  messages: Message[];\n  isLoading: boolean;\n}\n\nexport default function ChatInterface({ \n  therapistName, \n  onSendMessage, \n  messages, \n  isLoading \n}: ChatInterfaceProps) {\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Focus input on mount\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSendMessage = () => {\n    if (inputMessage.trim() && !isLoading) {\n      onSendMessage(inputMessage.trim(), false);\n      setInputMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (timestamp: Date) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col h-full\">\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4 min-h-0\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <UserCheck className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              Welcome to your session with {therapistName}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              Start by sharing what's on your mind today. I'm here to listen and support you.\n            </p>\n          </div>\n        ) : (\n          messages.map((message, index) => (\n            <div\n              key={message.id || index}\n              className={`flex items-start space-x-3 ${\n                message.role === 'user' ? 'justify-end' : 'justify-start'\n              }`}\n            >\n              {message.role === 'assistant' && (\n                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <UserCheck className=\"w-5 h-5 text-white\" />\n                </div>\n              )}\n              \n              <div className={`flex-1 max-w-xs md:max-w-md ${message.role === 'user' ? 'order-1' : ''}`}>\n                <Card className={`\n                  ${message.role === 'user' \n                    ? 'bg-primary text-primary-foreground' \n                    : 'bg-accent/10 border-accent/20'\n                  }\n                `}>\n                  <CardContent className=\"p-4\">\n                    {message.role === 'assistant' && (\n                      <p className=\"text-sm font-semibold text-accent mb-1\">\n                        {therapistName}\n                      </p>\n                    )}\n                    <p className=\"text-sm leading-relaxed\">\n                      {message.content}\n                    </p>\n                  </CardContent>\n                </Card>\n                <p className={`text-xs text-muted-foreground mt-1 ${\n                  message.role === 'user' ? 'text-right' : 'text-left'\n                }`}>\n                  {formatTime(message.timestamp || new Date())}\n                </p>\n              </div>\n              \n              {message.role === 'user' && (\n                <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                  <User className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              )}\n            </div>\n          ))\n        )}\n        \n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-start space-x-3 justify-start\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <UserCheck className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"flex-1\">\n              <Card className=\"bg-accent/10 border-accent/20\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm font-semibold text-accent mb-1\">\n                    {therapistName}\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                    <span className=\"text-sm text-muted-foreground ml-2\">\n                      typing...\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input Area */}\n      <div className=\"border-t border-border p-4 bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-1\">\n            <Input\n              ref={inputRef}\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              disabled={isLoading}\n              className=\"pr-12\"\n            />\n          </div>\n          <Button\n            onClick={handleSendMessage}\n            disabled={!inputMessage.trim() || isLoading}\n            className=\"bg-primary hover:bg-primary/90\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6319},"EunoiaFirst/client/src/components/crisis-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, Phone, ExternalLink } from \"lucide-react\";\n\ninterface CrisisModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  detectedKeywords: string[];\n}\n\nexport default function CrisisModal({ isOpen, onClose, detectedKeywords }: CrisisModalProps) {\n  const handleCallCrisisLine = () => {\n    window.open('tel:988', '_self');\n  };\n\n  const handleCallEmergency = () => {\n    window.open('tel:911', '_self');\n  };\n\n  const handleFindResources = () => {\n    window.open('https://suicidepreventionlifeline.org/', '_blank');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-4\">\n        <DialogHeader>\n          <div className=\"flex flex-col items-center text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <DialogTitle className=\"text-xl font-bold text-foreground\">\n              We're Concerned About You\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-center text-muted-foreground\">\n            It sounds like you might be going through a really difficult time. Please know that help is available, and you don't have to face this alone.\n          </p>\n          \n          {detectedKeywords.length > 0 && (\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardContent className=\"p-3\">\n                <p className=\"text-sm text-red-800 font-medium\">\n                  We detected some concerning language in your message. Your safety is our priority.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n          \n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleCallCrisisLine}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call 988 - Crisis Lifeline\n            </Button>\n            \n            <Button\n              onClick={handleCallEmergency}\n              className=\"w-full bg-red-800 hover:bg-red-900 text-white\"\n            >\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call 911 - Emergency\n            </Button>\n            \n            <Button\n              onClick={handleFindResources}\n              variant=\"outline\"\n              className=\"w-full border-red-300 text-red-700 hover:bg-red-50\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Find Local Resources\n            </Button>\n          </div>\n          \n          <div className=\"border-t pt-4\">\n            <div className=\"flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Continue Session\n              </Button>\n              <Button\n                onClick={handleFindResources}\n                className=\"flex-1 bg-primary hover:bg-primary/90\"\n              >\n                Get Help Now\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              If you're in immediate danger, please call 911 or go to your nearest emergency room.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3740},"EunoiaFirst/client/src/components/session-summary-modal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Clock, \n  Target, \n  Lightbulb, \n  CheckSquare, \n  Heart,\n  Download,\n  Mail,\n  Check\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Session } from \"@shared/schema\";\n\ninterface SessionSummaryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: number | null;\n  therapistName: string;\n  duration: number;\n  onViewAllSummaries?: () => void;\n  onReturnHome?: () => void;\n}\n\nexport default function SessionSummaryModal({ \n  isOpen, \n  onClose, \n  sessionId, \n  therapistName, \n  duration,\n  onViewAllSummaries,\n  onReturnHome \n}: SessionSummaryModalProps) {\n  const { toast } = useToast();\n\n  const { data: session, isLoading } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId],\n    enabled: isOpen && !!sessionId,\n  });\n\n  const formatDuration = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes} minutes${remainingSeconds > 0 ? ` ${remainingSeconds} seconds` : ''}`;\n  };\n\n  const handleDownloadPDF = () => {\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"PDF download functionality will be available in the next update.\",\n    });\n  };\n\n  const handleEmailSummary = () => {\n    toast({\n      title: \"Feature Coming Soon\", \n      description: \"Email summary functionality will be available in the next update.\",\n    });\n  };\n\n  const handleFinish = () => {\n    toast({\n      title: \"Session Complete\",\n      description: \"Thank you for your session today. Take care of yourself.\",\n    });\n    \n    // Return to home page instead of just closing\n    if (onReturnHome) {\n      onReturnHome();\n    }\n    onClose();\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"text-center\">\n            <DialogTitle className=\"text-2xl font-bold text-foreground mb-2\">\n              Session Summary\n            </DialogTitle>\n            <p className=\"text-muted-foreground\">\n              Here's what we covered in your session with {therapistName}\n            </p>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Session Duration */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <h4 className=\"font-semibold text-blue-900\">Session Duration</h4>\n                  <p className=\"text-blue-800\">{formatDuration(duration)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Key Topics */}\n          {session?.keyTopics && Array.isArray(session.keyTopics) && session.keyTopics.length > 0 && (\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Target className=\"w-5 h-5 text-green-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-green-900 mb-2\">Key Topics Discussed</h4>\n                    <ul className=\"text-green-800 space-y-1\">\n                      {session.keyTopics.map((topic: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-green-600 rounded-full\"></span>\n                          <span>{topic}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* CBT Techniques */}\n          {session?.cbtTechniques && Array.isArray(session.cbtTechniques) && session.cbtTechniques.length > 0 && (\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Lightbulb className=\"w-5 h-5 text-purple-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-purple-900 mb-2\">CBT Techniques Used</h4>\n                    <ul className=\"text-purple-800 space-y-1\">\n                      {session.cbtTechniques.map((technique: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-purple-600 rounded-full\"></span>\n                          <span>{technique}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Homework & Next Steps */}\n          {session?.homework && Array.isArray(session.homework) && session.homework.length > 0 && (\n            <Card className=\"bg-orange-50 border-orange-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <CheckSquare className=\"w-5 h-5 text-orange-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-orange-900 mb-2\">Homework & Next Steps</h4>\n                    <ul className=\"text-orange-800 space-y-1\">\n                      {session.homework.map((task: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-orange-600 rounded-full\"></span>\n                          <span>{task}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Therapist Notes */}\n          {session?.therapistNotes && (\n            <Card className=\"bg-teal-50 border-teal-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Heart className=\"w-5 h-5 text-teal-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-teal-900 mb-2\">\n                      {therapistName}'s Notes\n                    </h4>\n                    <p className=\"text-teal-800 italic\">\n                      \"{session.therapistNotes}\"\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Default content when no session data */}\n          {(!session?.keyTopics || !Array.isArray(session?.keyTopics) || session?.keyTopics.length === 0) && \n           (!session?.cbtTechniques || !Array.isArray(session?.cbtTechniques) || session?.cbtTechniques.length === 0) && \n           (!session?.homework || !Array.isArray(session?.homework) || session?.homework.length === 0) && (\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">\n                  Session summary is being generated. This may take a moment.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"flex space-x-3 pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={handleDownloadPDF}\n            className=\"flex-1\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download PDF\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={handleEmailSummary}\n            className=\"flex-1\"\n          >\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Email Summary\n          </Button>\n          \n          {onViewAllSummaries && (\n            <Button\n              variant=\"outline\"\n              onClick={onViewAllSummaries}\n              className=\"flex-1\"\n            >\n              View All Sessions\n            </Button>\n          )}\n          \n          <Button\n            onClick={handleFinish}\n            className=\"flex-1 bg-primary hover:bg-primary/90\"\n          >\n            <Check className=\"w-4 h-4 mr-2\" />\n            Done\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9241},"EunoiaFirst/client/src/components/sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nimport { \n  MessageCircle, \n  BookOpen, \n  Smile, \n  Wrench, \n  Phone, \n  X,\n  ChevronRight,\n  ChevronDown,\n  FileText,\n  Calendar,\n  Clock,\n  Home,\n  Settings\n} from \"lucide-react\";\nimport type { CurrentPage } from \"@/App\";\nimport type { Session } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: number | null;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  onEndSession?: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose, sessionId, onPageChange, currentPage, onEndSession }: SidebarProps) {\n  const [activeSection, setActiveSection] = useState(currentPage);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [pendingNavigation, setPendingNavigation] = useState<CurrentPage | null>(null);\n\n  // Update active section when current page changes\n  useEffect(() => {\n    setActiveSection(currentPage);\n  }, [currentPage]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      if (!sessionId) throw new Error(\"No active session\");\n      \n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Stop any ongoing speech synthesis\n      if (typeof window !== 'undefined' && window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n      \n      // Clear session from localStorage to prevent recreation\n      localStorage.removeItem('eunoia-session-id');\n      \n      // Invalidate sessions cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions/summaries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      \n      // Only show toast if we're ending from a non-session page\n      if (currentPage !== 'session') {\n        toast({\n          title: \"Session Ended\",\n          description: \"Your session has been ended.\",\n        });\n      }\n\n      // Navigate to the pending page\n      if (pendingNavigation) {\n        onPageChange(pendingNavigation);\n        setPendingNavigation(null);\n      } else {\n        // Default to home if no pending navigation\n        onPageChange('home');\n      }\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to end session properly.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleNavigation = (page: CurrentPage) => {\n    // Only show confirmation if we're currently in an active session AND on the session page\n    if (sessionId && currentPage === 'session') {\n      setPendingNavigation(page);\n      setShowConfirmDialog(true);\n    } else if (sessionId && currentPage !== 'session') {\n      // If there's a session but we're not on the session page, auto-end it silently\n      setPendingNavigation(page);\n      endSessionMutation.mutate();\n    } else {\n      // No active session, navigate directly\n      onPageChange(page);\n      onClose();\n    }\n  };\n\n  const handleConfirmEndSession = () => {\n    setShowConfirmDialog(false);\n    // Call the onEndSession callback if available (from session page)\n    if (onEndSession) {\n      onEndSession();\n    } else {\n      endSessionMutation.mutate();\n    }\n  };\n\n  const handleCancelNavigation = () => {\n    setShowConfirmDialog(false);\n    setPendingNavigation(null);\n  };\n\n\n\n  const menuItems = [\n    {\n      id: \"home\",\n      label: \"Home\",\n      icon: Home,\n      active: activeSection === \"home\" && sessionId === null, // Only active when on home without session\n      action: () => handleNavigation('home')\n    },\n    {\n      id: \"session\",\n      label: \"Talk to Eunoia\",\n      icon: MessageCircle,\n      active: activeSection === \"session\", // Show active when on session page\n      action: () => {\n        if (sessionId) {\n          // Navigate to active session\n          handleNavigation('session');\n        } else {\n          // No session, go to home to start one\n          handleNavigation('home');\n        }\n      }\n    },\n    {\n      id: \"journal\",\n      label: \"Journal\", \n      icon: BookOpen,\n      active: activeSection === \"journal\",\n      action: () => handleNavigation('journal')\n    },\n    {\n      id: \"mood\",\n      label: \"Mood Check-in\",\n      icon: Smile,\n      active: activeSection === \"mood\",\n      action: () => handleNavigation('mood')\n    },\n    {\n      id: \"cbt\",\n      label: \"CBT Coping Tools\",\n      icon: Wrench,\n      active: activeSection === \"cbt-tools\",\n      action: () => handleNavigation('cbt-tools')\n    },\n    {\n      id: \"summaries\",\n      label: \"Session Summaries\",\n      icon: FileText,\n      active: activeSection === \"session-summaries\",\n      action: () => handleNavigation('session-summaries')\n    },\n    {\n      id: \"settings\",\n      label: \"Settings\",\n      icon: Settings,\n      active: activeSection === \"settings\",\n      action: () => handleNavigation('settings')\n    }\n  ];\n\n  const cbtTools = [\n    \"Breathing Exercises\",\n    \"Thought Challenging\",\n    \"Grounding Techniques\",\n    \"Progressive Muscle Relaxation\",\n    \"Cognitive Restructuring\",\n    \"Mindfulness Meditation\"\n  ];\n\n  const journalPrompts = [\n    \"How am I feeling right now?\",\n    \"What am I grateful for today?\",\n    \"What challenged me today?\",\n    \"What did I learn about myself?\",\n    \"What would I like to focus on tomorrow?\"\n  ];\n\n  const SessionSummariesSection = () => {\n    const { data: sessions = [], isLoading } = useQuery<Session[]>({\n      queryKey: [\"/api/sessions/summaries\"],\n    });\n\n    if (isLoading) {\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    const completedSessions = sessions.filter(session => session.summary);\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-medium\">Past Session Summaries</h4>\n            {completedSessions.length > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleNavigation('session-summaries')}\n                className=\"text-xs\"\n              >\n                View All\n              </Button>\n            )}\n          </div>\n          {completedSessions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 mx-auto text-muted-foreground mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                No session summaries yet. Complete a therapy session to see summaries here.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {completedSessions.slice(0, 2).map((session) => (\n                <Card key={session.id} className=\"cursor-pointer hover:bg-accent/5 transition-colors\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-sm\">\n                        Session {session.id}\n                      </h5>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {session.duration ? `${Math.floor(session.duration / 60)}min` : ''}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-2\">\n                      <Calendar className=\"w-3 h-3\" />\n                      {session.startTime ? new Date(session.startTime).toLocaleDateString() : 'Unknown date'}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                      {session.summary ? session.summary.substring(0, 100) + '...' : 'No summary available'}\n                    </p>\n                    {session.keyTopics && session.keyTopics.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {session.keyTopics.slice(0, 2).map((topic, index) => (\n                          <span key={index} className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">\n                            {topic}\n                          </span>\n                        ))}\n                        {session.keyTopics.length > 2 && (\n                          <span className=\"text-xs text-muted-foreground\">+{session.keyTopics.length - 2} more</span>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n              {completedSessions.length > 2 && (\n                <div className=\"text-center pt-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleNavigation('session-summaries')}\n                    className=\"text-xs\"\n                  >\n                    View All {completedSessions.length} Sessions\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"session\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              You're currently in an active therapy session. Use the main interface to communicate with your therapist.\n            </p>\n            <div className=\"bg-primary/10 rounded-lg p-3\">\n              <p className=\"text-sm font-medium text-primary\">Session Active</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Your conversation is being recorded for session summary purposes.\n              </p>\n            </div>\n          </div>\n        );\n      \n      case \"journal\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Journal features are coming soon. In the meantime, you can discuss your thoughts and feelings during a therapy session.\n            </p>\n          </div>\n        );\n      \n      case \"mood\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Mood check-in features are coming soon. In the meantime, you can discuss your feelings during a therapy session.\n            </p>\n          </div>\n        );\n      \n      case \"cbt\":\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-3\">CBT Coping Tools</h4>\n              <div className=\"space-y-2\">\n                {cbtTools.map((tool, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    className=\"w-full justify-between text-left h-auto py-3 px-4\"\n                  >\n                    <span className=\"text-sm\">{tool}</span>\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"bg-accent/10 rounded-lg p-3\">\n              <h5 className=\"font-medium text-accent mb-2\">Quick Exercise</h5>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Try the 4-7-8 breathing technique:\n              </p>\n              <ol className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>1. Inhale for 4 counts</li>\n                <li>2. Hold for 7 counts</li>\n                <li>3. Exhale for 8 counts</li>\n                <li>4. Repeat 3-4 times</li>\n              </ol>\n            </div>\n          </div>\n        );\n      \n      case \"summaries\":\n        return <SessionSummariesSection />;\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed z-50 h-full bg-white shadow-lg border-r border-border\n        w-80 transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-xl font-bold text-primary\">Eunoia</h2>\n                <p className=\"text-sm text-muted-foreground\">Your AI Therapeutic Companion</p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"p-4 space-y-2\">\n            {menuItems.map((item) => {\n              const IconComponent = item.icon;\n              return (\n                <Button\n                  key={item.id}\n                  variant={item.active ? \"default\" : \"ghost\"}\n                  className=\"w-full justify-start space-x-3 h-12\"\n                  onClick={item.action}\n                >\n                  <IconComponent className=\"h-5 w-5\" />\n                  <span>{item.label}</span>\n                </Button>\n              );\n            })}\n          </nav>\n          \n          {/* Content Area */}\n          <div className=\"flex-1 px-4 pb-4 overflow-y-auto\">\n            {renderContent()}\n          </div>\n          \n          {/* Crisis Support */}\n          <div className=\"p-4 border-t border-border\">\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardContent className=\"p-3\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Phone className=\"h-4 w-4 text-red-600\" />\n                  <span className=\"font-semibold text-red-800 text-sm\">Crisis Support</span>\n                </div>\n                <div className=\"space-y-1 text-xs\">\n                  <div className=\"font-medium text-red-800\">988 - Suicide & Crisis Lifeline</div>\n                  <div className=\"font-medium text-red-800\">911 - Emergency Services</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>End Current Session?</AlertDialogTitle>\n            <AlertDialogDescription>\n              You have an active therapy session. Are you sure you want to end it and navigate to a different page? \n              Your session progress will be saved and a summary will be generated.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleCancelNavigation}>\n              Stay in Session\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleConfirmEndSession}\n              disabled={endSessionMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {endSessionMutation.isPending ? \"Ending Session...\" : \"End Session\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":16541},"EunoiaFirst/client/src/components/voice-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Mic, \n  MicOff, \n  Volume2, \n  Pause, \n  Lightbulb, \n  User, \n  UserCheck \n} from \"lucide-react\";\nimport { useSpeech } from \"@/hooks/use-speech\";\nimport type { Message } from \"@shared/schema\";\n\ninterface VoiceInterfaceProps {\n  therapistName: string;\n  onSendMessage: (content: string, isVoice: boolean) => void;\n  messages: Message[];\n  isLoading: boolean;\n  sessionEnded?: boolean;\n}\n\nexport default function VoiceInterface({ \n  therapistName, \n  onSendMessage, \n  messages, \n  isLoading,\n  sessionEnded = false \n}: VoiceInterfaceProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentTranscript, setCurrentTranscript] = useState(\"\");\n  const [lastAIResponse, setLastAIResponse] = useState(\"\");\n  \n  const { \n    startListening, \n    stopListening, \n    speak, \n    stopSpeaking,\n    isListening, \n    isSupported \n  } = useSpeech();\n\n  // Get latest AI response\n  useEffect(() => {\n    const latestAIMessage = messages\n      .filter(m => m.role === 'assistant')\n      .slice(-1)[0];\n    \n    if (latestAIMessage && latestAIMessage.content !== lastAIResponse) {\n      setLastAIResponse(latestAIMessage.content);\n      // Auto-speak the response\n      speak(latestAIMessage.content);\n    }\n  }, [messages, lastAIResponse, speak]);\n\n  // Stop all speech when session ends\n  useEffect(() => {\n    if (sessionEnded) {\n      stopSpeaking();\n      stopListening();\n    }\n  }, [sessionEnded, stopSpeaking, stopListening]);\n\n  // Cleanup effect when component unmounts or mode changes\n  useEffect(() => {\n    return () => {\n      stopSpeaking();\n      stopListening();\n    };\n  }, [stopSpeaking, stopListening]);\n\n  const handleStartRecording = async () => {\n    if (!isSupported) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n    \n    setIsRecording(true);\n    setCurrentTranscript(\"\");\n    \n    try {\n      const transcript = await startListening();\n      setCurrentTranscript(transcript);\n      \n      if (transcript.trim()) {\n        onSendMessage(transcript, true);\n      }\n    } catch (error) {\n      console.error('Speech recognition error:', error);\n    } finally {\n      setIsRecording(false);\n    }\n  };\n\n  const handleStopRecording = () => {\n    setIsRecording(false);\n    stopListening();\n    \n    if (currentTranscript.trim()) {\n      onSendMessage(currentTranscript, true);\n    }\n  };\n\n  const handleRepeatResponse = () => {\n    if (lastAIResponse) {\n      speak(lastAIResponse);\n    }\n  };\n\n  const toggleRecording = () => {\n    if (isRecording) {\n      handleStopRecording();\n    } else {\n      handleStartRecording();\n    }\n  };\n\n  const latestUserMessage = messages.filter(m => m.role === 'user').slice(-1)[0];\n  const latestAIMessage = messages.filter(m => m.role === 'assistant').slice(-1)[0];\n\n  return (\n    <div className=\"flex-1 flex flex-col items-center justify-center p-8 space-y-8\">\n      <div className=\"max-w-2xl mx-auto text-center\">\n        \n        {/* Therapist Avatar */}\n        <div className=\"mb-8\">\n          <div className=\"w-32 h-32 bg-gradient-primary rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg\">\n            <UserCheck className=\"text-white text-4xl\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n            {therapistName} is listening\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {isRecording ? \"I'm listening...\" : \"Tap the button below to start talking\"}\n          </p>\n        </div>\n        \n        {/* Voice Recording Button */}\n        <div className=\"mb-8\">\n          <Button\n            onClick={toggleRecording}\n            disabled={isLoading || !isSupported}\n            className={`\n              w-24 h-24 rounded-full shadow-lg transition-all transform hover:scale-105 \n              focus:outline-none focus:ring-4 focus:ring-primary/30\n              ${isRecording \n                ? 'bg-red-500 hover:bg-red-600 animate-pulse' \n                : 'bg-primary hover:bg-primary/90'\n              }\n            `}\n          >\n            {isRecording ? (\n              <MicOff className=\"text-white text-2xl\" />\n            ) : (\n              <Mic className=\"text-white text-2xl\" />\n            )}\n          </Button>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            {isRecording ? \"Recording... tap to stop\" : \"Tap to speak\"}\n          </p>\n        </div>\n        \n        {/* Recording Status */}\n        {isRecording && (\n          <Card className=\"mb-6 bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center space-x-2 mb-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm font-medium text-blue-800\">Recording...</span>\n              </div>\n              <p className=\"text-sm text-blue-700\">\n                {currentTranscript || \"Listening for your voice...\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Latest User Message */}\n        {latestUserMessage && !isRecording && (\n          <Card className=\"mb-6 bg-primary/10 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <User className=\"w-6 h-6 text-primary mt-1\" />\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-primary mb-1\">You said:</p>\n                  <p className=\"text-sm text-foreground\">{latestUserMessage.content}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* AI Response */}\n        {latestAIMessage && !isRecording && (\n          <Card className=\"mb-6 bg-accent/10 border-accent/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <UserCheck className=\"w-6 h-6 text-accent mt-1\" />\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-accent mb-1\">{therapistName}</p>\n                  <p className=\"text-sm text-foreground\">{latestAIMessage.content}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Loading State */}\n        {isLoading && (\n          <Card className=\"mb-6 bg-muted/50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                <span className=\"text-sm text-muted-foreground ml-2\">\n                  {therapistName} is thinking...\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Quick Actions */}\n        <div className=\"flex flex-wrap justify-center gap-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsRecording(!isRecording)}\n            disabled={isLoading}\n          >\n            <Pause className=\"w-4 h-4 mr-2\" />\n            {isRecording ? \"Pause\" : \"Resume\"}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleRepeatResponse}\n            disabled={!lastAIResponse}\n          >\n            <Volume2 className=\"w-4 h-4 mr-2\" />\n            Repeat Response\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"bg-accent/10 text-accent hover:bg-accent/20\"\n          >\n            <Lightbulb className=\"w-4 h-4 mr-2\" />\n            Get Coping Tool\n          </Button>\n        </div>\n        \n        {/* Browser Support Warning */}\n        {!isSupported && (\n          <Card className=\"mt-6 bg-warning/10 border-warning/20\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-sm text-warning\">\n                Voice recognition is not supported in your browser. Please use a modern browser like Chrome, Firefox, or Safari for the best experience.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8700},"EunoiaFirst/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"EunoiaFirst/client/src/hooks/use-speech.ts":{"content":"import { useState, useCallback, useRef } from \"react\";\n\nexport interface SpeechHook {\n  startListening: () => Promise<string>;\n  stopListening: () => void;\n  speak: (text: string) => void;\n  stopSpeaking: () => void;\n  isListening: boolean;\n  isSupported: boolean;\n}\n\nexport function useSpeech(): SpeechHook {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef<any>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n  \n  // Check if browser supports speech recognition and synthesis\n  const isSupported = typeof window !== 'undefined' && \n    ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) &&\n    'speechSynthesis' in window;\n\n  const startListening = useCallback((): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (!isSupported) {\n        reject(new Error(\"Speech recognition not supported\"));\n        return;\n      }\n\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.maxAlternatives = 1;\n      \n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      \n      recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        resolve(transcript);\n      };\n      \n      recognition.onerror = (event: any) => {\n        setIsListening(false);\n        reject(new Error(`Speech recognition error: ${event.error}`));\n      };\n      \n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      \n      recognitionRef.current = recognition;\n      recognition.start();\n    });\n  }, [isSupported]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      recognitionRef.current = null;\n    }\n    setIsListening(false);\n  }, []);\n\n  const stopSpeaking = useCallback(() => {\n    if (isSupported && window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n  }, [isSupported]);\n\n  const speak = useCallback((text: string) => {\n    if (!isSupported || !text.trim()) return;\n\n    // Cancel any ongoing speech\n    if (window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 0.9;\n    utterance.pitch = 1.0;\n    utterance.volume = 0.8;\n    \n    // Try to use a more natural voice\n    const voices = window.speechSynthesis.getVoices();\n    const preferredVoice = voices.find(voice => \n      voice.name.includes('Google') || \n      voice.name.includes('Microsoft') ||\n      voice.name.includes('Alex') ||\n      voice.name.includes('Samantha')\n    );\n    \n    if (preferredVoice) {\n      utterance.voice = preferredVoice;\n    }\n    \n    utterance.onerror = (event) => {\n      console.error('Speech synthesis error:', event.error);\n    };\n    \n    window.speechSynthesis.speak(utterance);\n  }, [isSupported]);\n\n  return {\n    startListening,\n    stopListening,\n    speak,\n    stopSpeaking,\n    isListening,\n    isSupported\n  };\n}\n\n// Extend the Window interface to include speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n","size_bytes":3392},"EunoiaFirst/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"EunoiaFirst/client/src/lib/crisis-detection.ts":{"content":"export const CRISIS_KEYWORDS = [\n  // Direct suicidal language\n  'suicide', 'kill myself', 'end my life', 'take my life', 'want to die',\n  'better off dead', 'end it all', 'no point living', 'life is pointless',\n  'nothing matters', 'worthless', 'useless', 'burden to everyone',\n  \n  // Self-harm language\n  'hurt myself', 'cut myself', 'self harm', 'self-harm', 'harm myself',\n  'pain myself', 'punish myself', 'cut my arms', 'cut my wrists',\n  \n  // Method-specific language\n  'overdose', 'pills', 'jump off', 'hang myself', 'rope', 'bridge',\n  'gun', 'knife', 'razor', 'bleeding', 'suffocate',\n  \n  // Hopelessness indicators\n  'no hope', 'hopeless', 'helpless', 'trapped', 'stuck forever',\n  'can\\'t go on', 'give up', 'quit trying', 'done trying',\n  \n  // Isolation language\n  'nobody cares', 'all alone', 'no one understands', 'isolated',\n  'abandoned', 'rejected', 'unloved', 'unwanted',\n  \n  // Planning language\n  'plan to hurt', 'plan to die', 'thought about', 'considering',\n  'preparing to', 'ready to', 'time to go', 'final goodbye',\n  \n  // Extreme distress\n  'can\\'t take it', 'too much pain', 'unbearable', 'suffering',\n  'torment', 'agony', 'breaking point', 'at my limit'\n];\n\nexport function detectCrisisKeywords(text: string): string[] {\n  if (!text) return [];\n  \n  const lowerText = text.toLowerCase();\n  const detectedKeywords: string[] = [];\n  \n  for (const keyword of CRISIS_KEYWORDS) {\n    if (lowerText.includes(keyword.toLowerCase())) {\n      detectedKeywords.push(keyword);\n    }\n  }\n  \n  return detectedKeywords;\n}\n\nexport function calculateCrisisScore(text: string): number {\n  const keywords = detectCrisisKeywords(text);\n  const wordCount = text.split(/\\s+/).length;\n  \n  if (keywords.length === 0) return 0;\n  \n  // Base score from keyword density\n  const density = keywords.length / wordCount;\n  let score = density * 100;\n  \n  // Boost score for high-risk keywords\n  const highRiskKeywords = [\n    'suicide', 'kill myself', 'end my life', 'want to die',\n    'plan to hurt', 'plan to die', 'overdose', 'jump off'\n  ];\n  \n  const highRiskCount = keywords.filter(keyword => \n    highRiskKeywords.includes(keyword)\n  ).length;\n  \n  score += highRiskCount * 25;\n  \n  // Cap at 100\n  return Math.min(score, 100);\n}\n\nexport function shouldTriggerCrisisIntervention(text: string): boolean {\n  const keywords = detectCrisisKeywords(text);\n  const score = calculateCrisisScore(text);\n  \n  // Trigger if any high-risk keywords are detected or score is high\n  return keywords.length > 0 || score > 30;\n}\n","size_bytes":2527},"EunoiaFirst/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"EunoiaFirst/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"EunoiaFirst/client/src/pages/cbt-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Brain, Wind, Lightbulb, Heart, Target, Clock, Menu } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface CBTToolsPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function CBTToolsPage({ onBack, onPageChange, currentPage, sessionId }: CBTToolsPageProps) {\n  const [breathingActive, setBreathingActive] = useState(false);\n  const [breathingPhase, setBreathingPhase] = useState<'inhale' | 'hold' | 'exhale'>('inhale');\n  const [breathingCount, setBreathingCount] = useState(4);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const startBreathingExercise = () => {\n    setBreathingActive(true);\n    breathingCycle();\n  };\n\n  const breathingCycle = () => {\n    // Inhale for 4 seconds\n    setBreathingPhase('inhale');\n    setBreathingCount(4);\n    \n    const inhaleTimer = setInterval(() => {\n      setBreathingCount(prev => {\n        if (prev <= 1) {\n          clearInterval(inhaleTimer);\n          // Hold for 7 seconds\n          setBreathingPhase('hold');\n          setBreathingCount(7);\n          \n          const holdTimer = setInterval(() => {\n            setBreathingCount(prev => {\n              if (prev <= 1) {\n                clearInterval(holdTimer);\n                // Exhale for 8 seconds\n                setBreathingPhase('exhale');\n                setBreathingCount(8);\n                \n                const exhaleTimer = setInterval(() => {\n                  setBreathingCount(prev => {\n                    if (prev <= 1) {\n                      clearInterval(exhaleTimer);\n                      setBreathingActive(false);\n                      return 0;\n                    }\n                    return prev - 1;\n                  });\n                }, 1000);\n                \n                return prev - 1;\n              }\n              return prev - 1;\n            });\n          }, 1000);\n          \n          return prev - 1;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const thoughtChallengingQuestions = [\n    \"Is this thought based on facts or feelings?\",\n    \"What evidence do I have that this thought is true?\",\n    \"What evidence do I have that this thought might not be true?\",\n    \"What would I tell a friend who had this thought?\",\n    \"What's the worst that could realistically happen?\",\n    \"What's the best that could happen?\",\n    \"What's most likely to happen?\",\n    \"How will this matter in 5 years?\",\n    \"What are some other ways to look at this situation?\",\n    \"What would be a more balanced way to think about this?\"\n  ];\n\n  const groundingTechniques = [\n    {\n      name: \"5-4-3-2-1 Technique\",\n      description: \"Name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste\"\n    },\n    {\n      name: \"Progressive Muscle Relaxation\",\n      description: \"Tense and then relax each muscle group in your body, starting from your toes and working up to your head\"\n    },\n    {\n      name: \"Box Breathing\",\n      description: \"Breathe in for 4 counts, hold for 4, exhale for 4, hold for 4. Repeat several times\"\n    },\n    {\n      name: \"Mindful Observation\",\n      description: \"Choose an object and observe it closely for 2-3 minutes, noticing every detail\"\n    }\n  ];\n\n  const copingStrategies = [\n    {\n      category: \"Anxiety\",\n      strategies: [\n        \"Deep breathing exercises\",\n        \"Progressive muscle relaxation\",\n        \"Grounding techniques (5-4-3-2-1)\",\n        \"Challenge anxious thoughts\",\n        \"Use positive self-talk\",\n        \"Practice mindfulness meditation\"\n      ]\n    },\n    {\n      category: \"Depression\",\n      strategies: [\n        \"Behavioral activation (plan pleasant activities)\",\n        \"Challenge negative thoughts\",\n        \"Maintain a daily routine\",\n        \"Practice gratitude\",\n        \"Exercise regularly\",\n        \"Connect with supportive people\"\n      ]\n    },\n    {\n      category: \"Stress\",\n      strategies: [\n        \"Time management and prioritization\",\n        \"Break large tasks into smaller steps\",\n        \"Practice saying 'no' to excessive demands\",\n        \"Use relaxation techniques\",\n        \"Maintain work-life balance\",\n        \"Seek social support\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Brain className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">CBT Coping Tools</h1>\n              </div>\n            </div>\n\n        <Tabs defaultValue=\"breathing\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"breathing\">Breathing</TabsTrigger>\n            <TabsTrigger value=\"thoughts\">Thought Challenge</TabsTrigger>\n            <TabsTrigger value=\"grounding\">Grounding</TabsTrigger>\n            <TabsTrigger value=\"strategies\">Coping Strategies</TabsTrigger>\n          </TabsList>\n\n          {/* Breathing Exercises */}\n          <TabsContent value=\"breathing\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Wind className=\"w-5 h-5 mr-2\" />\n                  Breathing Exercises\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Practice controlled breathing to reduce anxiety and promote relaxation\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* 4-7-8 Breathing */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-semibold mb-4\">4-7-8 Breathing Technique</h3>\n                  \n                  {breathingActive ? (\n                    <div className=\"space-y-4\">\n                      <div className={`\n                        w-32 h-32 rounded-full mx-auto flex items-center justify-center text-white font-bold text-2xl\n                        ${breathingPhase === 'inhale' ? 'bg-blue-500 animate-pulse' : \n                          breathingPhase === 'hold' ? 'bg-yellow-500' : 'bg-green-500 animate-pulse'}\n                      `}>\n                        {breathingCount}\n                      </div>\n                      <div className=\"text-lg capitalize font-medium\">\n                        {breathingPhase === 'inhale' ? '🌬️ Breathe In' : \n                         breathingPhase === 'hold' ? '⏸️ Hold' : '💨 Breathe Out'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"w-32 h-32 rounded-full mx-auto bg-gray-200 flex items-center justify-center\">\n                        <Wind className=\"w-12 h-12 text-gray-400\" />\n                      </div>\n                      <Button onClick={startBreathingExercise} className=\"mx-auto\">\n                        Start Exercise\n                      </Button>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-6 text-sm text-muted-foreground max-w-md mx-auto\">\n                    <p className=\"mb-2\"><strong>Instructions:</strong></p>\n                    <ol className=\"text-left space-y-1\">\n                      <li>1. Inhale through your nose for 4 counts</li>\n                      <li>2. Hold your breath for 7 counts</li>\n                      <li>3. Exhale through your mouth for 8 counts</li>\n                      <li>4. This completes one cycle</li>\n                    </ol>\n                  </div>\n                </div>\n\n                {/* Other Breathing Techniques */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-8\">\n                  <Card className=\"border-blue-200 bg-blue-50\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">Box Breathing</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Inhale 4, Hold 4, Exhale 4, Hold 4\n                      </p>\n                      <p className=\"text-xs\">Great for focus and concentration</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"border-green-200 bg-green-50\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">Deep Belly Breathing</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Slow, deep breaths using your diaphragm\n                      </p>\n                      <p className=\"text-xs\">Reduces stress and promotes relaxation</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Thought Challenging */}\n          <TabsContent value=\"thoughts\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Lightbulb className=\"w-5 h-5 mr-2\" />\n                  Thought Challenging\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Use these questions to examine and challenge negative or unhelpful thoughts\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {thoughtChallengingQuestions.map((question, index) => (\n                    <Card key={index} className=\"border-purple-200 bg-purple-50\">\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm font-medium\">{question}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    How to Use\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    When you notice a negative or distressing thought, pick 2-3 of these questions and genuinely try to answer them. \n                    This helps you examine the thought objectively and often reveals that it may not be as accurate or helpful as it first seemed.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Grounding Techniques */}\n          <TabsContent value=\"grounding\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"w-5 h-5 mr-2\" />\n                  Grounding Techniques\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Techniques to help you stay present and connected to the moment\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {groundingTechniques.map((technique, index) => (\n                    <Card key={index} className=\"border-teal-200 bg-teal-50\">\n                      <CardContent className=\"p-6\">\n                        <h4 className=\"font-semibold mb-3\">{technique.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{technique.description}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    When to Use Grounding\n                  </h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• When feeling overwhelmed or panicky</li>\n                    <li>• During flashbacks or dissociation</li>\n                    <li>• When anxiety feels out of control</li>\n                    <li>• To reconnect with the present moment</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Coping Strategies */}\n          <TabsContent value=\"strategies\">\n            <div className=\"space-y-6\">\n              {copingStrategies.map((category, index) => (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle>{category.category} Coping Strategies</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {category.strategies.map((strategy, strategyIndex) => (\n                        <div key={strategyIndex} className=\"flex items-center p-3 border border-gray-200 rounded-lg bg-gray-50\">\n                          <span className=\"text-sm\">{strategy}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14768},"EunoiaFirst/client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Menu, Settings, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { SessionSettings, CurrentPage } from \"@/App\";\n\ninterface HomeProps {\n  sessionSettings: SessionSettings;\n  onPageChange: (page: CurrentPage) => void;\n  onSessionStart: (sessionId: number) => void;\n}\n\nexport default function Home({ sessionSettings, onPageChange, onSessionStart }: HomeProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (settings: SessionSettings) => {\n      const response = await apiRequest(\"POST\", \"/api/sessions\", {\n        therapistPersonality: settings.therapistPersonality,\n        selectedVoice: settings.selectedVoice,\n        selectedGoals: settings.selectedGoals,\n      });\n      return response.json();\n    },\n    onSuccess: (session) => {\n      toast({\n        title: \"Session Started\",\n        description: \"Your therapy session has begun successfully.\",\n      });\n      onSessionStart(session.id);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error starting session\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const initializeSession = () => {\n    createSessionMutation.mutate(sessionSettings);\n  };\n\n  const getTherapistName = () => {\n    const personalities: Record<string, string> = {\n      empathetic: \"Dr. Emma\",\n      analytical: \"Dr. Alex\", \n      supportive: \"Dr. Sam\",\n      mindful: \"Dr. Maya\"\n    };\n    return personalities[sessionSettings.therapistPersonality] || \"Dr. Emma\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 relative overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        sessionId={null}\n        onPageChange={onPageChange}\n        currentPage=\"home\"\n      />\n\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-pink-400/20 to-blue-400/20 rounded-full blur-3xl\"></div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col min-h-screen\">\n        {/* Header */}\n        <div className=\"bg-white/80 backdrop-blur-sm shadow-sm border-b border-gray-200/50 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsSidebarOpen(true)}\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              \n              <h1 className=\"text-xl font-bold text-primary\">Eunoia</h1>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange('settings')}\n              className=\"flex items-center space-x-2\"\n            >\n              <Settings className=\"h-4 w-4\" />\n              <span>Customize Session</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex items-center justify-center p-6\">\n          <div className=\"max-w-2xl w-full\">\n            <div className=\"text-center mb-12\">\n              {/* Animated Heart Icon */}\n              <div className=\"relative mb-8\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-red-400 to-pink-500 rounded-full flex items-center justify-center shadow-lg animate-pulse\">\n                  <Heart className=\"w-8 h-8 text-white fill-current\" />\n                </div>\n                <div className=\"absolute inset-0 w-16 h-16 mx-auto bg-gradient-to-br from-red-400/30 to-pink-500/30 rounded-full animate-ping\"></div>\n              </div>\n              \n              <h2 className=\"text-4xl font-bold text-gray-800 mb-4\">\n                Welcome to Your Safe Space\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-2\">\n                Ready to start your session with\n              </p>\n              <p className=\"text-xl font-semibold text-gray-800 mb-6\">\n                {getTherapistName()}\n              </p>\n              \n              {/* Session Info */}\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-lg p-6 mb-8 shadow-sm border border-gray-100\">\n                <div className=\"grid grid-cols-1 gap-4 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Therapist Personality:</span>\n                    <span className=\"font-medium text-gray-800 capitalize\">\n                      {sessionSettings.therapistPersonality}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Selected Goals:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {sessionSettings.selectedGoals.length} goal{sessionSettings.selectedGoals.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Voice Mode:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {sessionSettings.selectedVoice}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Start Button */}\n              <Button \n                onClick={initializeSession}\n                disabled={createSessionMutation.isPending}\n                size=\"lg\"\n                className=\"w-full h-12 text-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-200 shadow-lg\"\n              >\n                {createSessionMutation.isPending ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    <span>Starting Session...</span>\n                  </div>\n                ) : (\n                  \"Begin Your Session\"\n                )}\n              </Button>\n              \n              <p className=\"text-sm text-gray-500 mt-4\">\n                Take a moment to get comfortable and prepare for your session\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7129},"EunoiaFirst/client/src/pages/journal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, BookOpen, Plus, Calendar, Menu } from \"lucide-react\";\nimport type { JournalEntry } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface JournalPageProps {\n  sessionId?: number;\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n}\n\nconst journalPrompts = [\n  \"How am I feeling right now?\",\n  \"What am I grateful for today?\",\n  \"What challenged me today?\",\n  \"What did I learn about myself?\",\n  \"What would I like to focus on tomorrow?\",\n  \"What emotions came up for me today?\",\n  \"What is one thing I did well today?\",\n  \"What is something I want to improve?\",\n  \"What brought me joy today?\",\n  \"What am I worried about?\"\n];\n\nexport default function JournalPage({ sessionId, onBack, onPageChange, currentPage }: JournalPageProps) {\n  const [newEntryTitle, setNewEntryTitle] = useState(\"\");\n  const [newEntryContent, setNewEntryContent] = useState(\"\");\n  const [selectedPrompt, setSelectedPrompt] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get journal entries\n  const { data: entries = [], isLoading } = useQuery({\n    queryKey: [\"/api/journal\", sessionId],\n    queryFn: async () => {\n      const url = sessionId ? `/api/journal?sessionId=${sessionId}` : \"/api/journal\";\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n\n  // Create journal entry mutation\n  const createEntryMutation = useMutation({\n    mutationFn: async (entryData: { title?: string; content: string; prompt?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/journal\", {\n        sessionId: sessionId || null,\n        title: entryData.title || null,\n        content: entryData.content,\n        prompt: entryData.prompt || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/journal\", sessionId] });\n      setNewEntryTitle(\"\");\n      setNewEntryContent(\"\");\n      setSelectedPrompt(\"\");\n      toast({\n        title: \"Entry Saved\",\n        description: \"Your journal entry has been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save journal entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handlePromptSelect = (prompt: string) => {\n    setSelectedPrompt(prompt);\n    setNewEntryTitle(prompt);\n    setNewEntryContent(\"\"); // Clear content so user can respond to the prompt\n  };\n\n  const handleSaveEntry = () => {\n    if (!newEntryContent.trim()) {\n      toast({\n        title: \"Content Required\",\n        description: \"Please write something before saving your entry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEntryMutation.mutate({\n      title: newEntryTitle || undefined,\n      content: newEntryContent,\n      prompt: selectedPrompt || undefined,\n    });\n  };\n\n  const formatDate = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId || null}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <BookOpen className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Journal</h1>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* New Entry Form */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"mb-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Plus className=\"w-5 h-5 mr-2\" />\n                      New Journal Entry\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Title (Optional)</label>\n                      <Input\n                        value={newEntryTitle}\n                        onChange={(e) => setNewEntryTitle(e.target.value)}\n                        placeholder=\"Give your entry a title...\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Your Thoughts</label>\n                      <Textarea\n                        value={newEntryContent}\n                        onChange={(e) => setNewEntryContent(e.target.value)}\n                        placeholder=\"Write about your thoughts, feelings, experiences...\"\n                        className=\"min-h-32\"\n                        rows={6}\n                      />\n                    </div>\n                    \n                    <Button\n                      onClick={handleSaveEntry}\n                      disabled={createEntryMutation.isPending || !newEntryContent.trim()}\n                      className=\"w-full\"\n                    >\n                      {createEntryMutation.isPending ? \"Saving...\" : \"Save Entry\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Previous Entries */}\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-xl font-semibold text-foreground mb-4\">Previous Entries</h2>\n                  \n                  {isLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : entries.length === 0 ? (\n                    <Card className=\"text-center py-8\">\n                      <CardContent>\n                        <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No journal entries yet. Start writing your first entry above!</p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    entries.map((entry: JournalEntry) => (\n                      <Card key={entry.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              {entry.title && (\n                                <h3 className=\"font-semibold text-foreground mb-2\">{entry.title}</h3>\n                              )}\n                              {entry.prompt && entry.prompt !== entry.title && (\n                                <p className=\"text-sm text-primary mb-2 italic\">Prompt: {entry.prompt}</p>\n                              )}\n                            </div>\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Calendar className=\"w-4 h-4 mr-1\" />\n                              {formatDate(entry.timestamp || new Date())}\n                            </div>\n                          </div>\n                          <p className=\"text-foreground whitespace-pre-wrap\">{entry.content}</p>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Prompts Sidebar */}\n              <div>\n                <Card className=\"sticky top-6\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Writing Prompts</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Use these prompts to get started with your journaling\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {journalPrompts.map((prompt, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full justify-start text-left h-auto py-3 px-3\"\n                          onClick={() => handlePromptSelect(prompt)}\n                        >\n                          <span className=\"text-sm\">{prompt}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10247},"EunoiaFirst/client/src/pages/mood.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Smile, TrendingUp, Calendar, Menu } from \"lucide-react\";\nimport type { MoodEntry } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface MoodPageProps {\n  sessionId?: number;\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n}\n\nconst moodEmojis = [\n  { emoji: \"😊\", label: \"Happy\", value: 8 },\n  { emoji: \"😐\", label: \"Neutral\", value: 5 },\n  { emoji: \"😔\", label: \"Sad\", value: 3 },\n  { emoji: \"😟\", label: \"Worried\", value: 4 },\n  { emoji: \"😴\", label: \"Tired\", value: 4 },\n  { emoji: \"😤\", label: \"Frustrated\", value: 3 },\n  { emoji: \"😰\", label: \"Anxious\", value: 2 },\n  { emoji: \"🤗\", label: \"Loved\", value: 9 },\n  { emoji: \"😡\", label: \"Angry\", value: 2 },\n  { emoji: \"😌\", label: \"Peaceful\", value: 8 },\n  { emoji: \"🥳\", label: \"Excited\", value: 9 },\n  { emoji: \"😭\", label: \"Overwhelmed\", value: 1 }\n];\n\nexport default function MoodPage({ sessionId, onBack, onPageChange, currentPage }: MoodPageProps) {\n  const [selectedMood, setSelectedMood] = useState<{ emoji: string; label: string; value: number } | null>(null);\n  const [moodScore, setMoodScore] = useState<number | null>(null);\n  const [notes, setNotes] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get mood entries\n  const { data: entries = [], isLoading } = useQuery({\n    queryKey: [\"/api/mood\", sessionId],\n    queryFn: async () => {\n      const url = sessionId ? `/api/mood?sessionId=${sessionId}` : \"/api/mood\";\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n\n  // Create mood entry mutation\n  const createMoodMutation = useMutation({\n    mutationFn: async (moodData: { moodScore: number; moodEmoji?: string; notes?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/mood\", {\n        sessionId: sessionId || null,\n        moodScore: moodData.moodScore,\n        moodEmoji: moodData.moodEmoji || null,\n        notes: moodData.notes || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mood\", sessionId] });\n      setSelectedMood(null);\n      setMoodScore(null);\n      setNotes(\"\");\n      toast({\n        title: \"Mood Recorded\",\n        description: \"Your mood has been recorded successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record mood. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleMoodSelect = (mood: { emoji: string; label: string; value: number }) => {\n    setSelectedMood(mood);\n    setMoodScore(mood.value);\n  };\n\n  const handleScoreSelect = (score: number) => {\n    setMoodScore(score);\n    // Clear emoji selection when manually selecting score\n    setSelectedMood(null);\n  };\n\n  const handleSaveMood = () => {\n    if (moodScore === null) {\n      toast({\n        title: \"Mood Required\",\n        description: \"Please select a mood or score before saving.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMoodMutation.mutate({\n      moodScore,\n      moodEmoji: selectedMood?.emoji,\n      notes: notes || undefined,\n    });\n  };\n\n  const formatDate = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getMoodColor = (score: number) => {\n    if (score >= 8) return \"text-green-600 bg-green-50 border-green-200\";\n    if (score >= 6) return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n    if (score >= 4) return \"text-orange-600 bg-orange-50 border-orange-200\";\n    return \"text-red-600 bg-red-50 border-red-200\";\n  };\n\n  const getMoodTrend = () => {\n    if (entries.length < 2) return null;\n    const recent = entries.slice(0, 5);\n    const avg = recent.reduce((sum: number, entry: MoodEntry) => sum + entry.moodScore, 0) / recent.length;\n    const older = entries.slice(5, 10);\n    if (older.length === 0) return null;\n    const oldAvg = older.reduce((sum: number, entry: MoodEntry) => sum + entry.moodScore, 0) / older.length;\n    return avg - oldAvg;\n  };\n\n  const trend = getMoodTrend();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId || null}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Smile className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Mood Check-in</h1>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Mood Entry Form */}\n              <div>\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>How are you feeling today?</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select an emoji that represents your mood or use the scale below\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Emoji Selection */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Choose your mood:</h3>\n                  <div className=\"grid grid-cols-4 gap-3\">\n                    {moodEmojis.map((mood, index) => (\n                      <Button\n                        key={index}\n                        variant={selectedMood?.emoji === mood.emoji ? \"default\" : \"outline\"}\n                        className=\"aspect-square flex flex-col p-2 h-auto\"\n                        onClick={() => handleMoodSelect(mood)}\n                      >\n                        <span className=\"text-2xl mb-1\">{mood.emoji}</span>\n                        <span className=\"text-xs\">{mood.label}</span>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Manual Score Selection */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Or rate your mood (1-10):</h3>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Very Low</span>\n                    <span className=\"text-sm text-muted-foreground\">Very High</span>\n                  </div>\n                  <div className=\"grid grid-cols-10 gap-1\">\n                    {[1,2,3,4,5,6,7,8,9,10].map((score) => (\n                      <Button\n                        key={score}\n                        variant={moodScore === score ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"aspect-square p-0 text-sm\"\n                        onClick={() => handleScoreSelect(score)}\n                      >\n                        {score}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Notes */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Additional notes (optional)</label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"What's contributing to how you feel today?\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button\n                  onClick={handleSaveMood}\n                  disabled={createMoodMutation.isPending || moodScore === null}\n                  className=\"w-full\"\n                >\n                  {createMoodMutation.isPending ? \"Saving...\" : \"Save Mood Check-in\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Mood History */}\n          <div>\n            {/* Trend Card */}\n            {trend !== null && (\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <TrendingUp className=\"w-5 h-5 text-primary mr-2\" />\n                      <span className=\"font-medium\">Recent Trend</span>\n                    </div>\n                    <div className={`text-sm font-medium ${trend > 0 ? 'text-green-600' : trend < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                      {trend > 0 ? '↗️ Improving' : trend < 0 ? '↘️ Declining' : '→ Stable'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Recent Entries */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Check-ins</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {isLoading ? (\n                    <div className=\"text-center py-4\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : entries.length === 0 ? (\n                    <div className=\"text-center py-6\">\n                      <Smile className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">No mood entries yet. Start by recording your mood above!</p>\n                    </div>\n                  ) : (\n                    entries.slice(0, 10).map((entry: MoodEntry) => (\n                      <div key={entry.id} className={`border rounded-lg p-3 ${getMoodColor(entry.moodScore)}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {entry.moodEmoji && <span className=\"text-xl\">{entry.moodEmoji}</span>}\n                            <span className=\"font-medium\">Score: {entry.moodScore}/10</span>\n                          </div>\n                          <div className=\"flex items-center text-xs text-muted-foreground\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {formatDate(entry.timestamp || new Date())}\n                          </div>\n                        </div>\n                        {entry.notes && (\n                          <p className=\"text-sm\">{entry.notes}</p>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12141},"EunoiaFirst/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"EunoiaFirst/client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Heart, Brain, HandHeart, Leaf, Wind, Sun, Mountain, Users, Play } from \"lucide-react\";\nimport type { SessionSettings } from \"@/App\";\n\ninterface OnboardingProps {\n  onComplete: (settings: SessionSettings) => void;\n}\n\nconst therapistPersonalities = [\n  {\n    id: \"empathetic\",\n    name: \"Dr. Emma\",\n    title: \"Empathetic\",\n    description: \"Warm, understanding, and deeply compassionate. Focuses on emotional validation and support.\",\n    icon: Heart,\n    color: \"text-pink-500\"\n  },\n  {\n    id: \"analytical\",\n    name: \"Dr. Alex\",\n    title: \"Analytical\",\n    description: \"Logical, structured, and solution-focused. Emphasizes CBT techniques and practical strategies.\",\n    icon: Brain,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"supportive\",\n    name: \"Dr. Sam\",\n    title: \"Supportive\",\n    description: \"Encouraging, patient, and strength-focused. Helps build confidence and resilience.\",\n    icon: HandHeart,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"mindful\",\n    name: \"Dr. Maya\",\n    title: \"Mindful\",\n    description: \"Calm, present, and wisdom-oriented. Integrates mindfulness and meditation practices.\",\n    icon: Leaf,\n    color: \"text-teal-500\"\n  }\n];\n\nconst voiceOptions = [\n  { id: \"sarah\", name: \"Sarah\", description: \"Warm & Gentle\", gender: \"female\" },\n  { id: \"emily\", name: \"Emily\", description: \"Clear & Professional\", gender: \"female\" },\n  { id: \"anna\", name: \"Anna\", description: \"Soft & Caring\", gender: \"female\" },\n  { id: \"michael\", name: \"Michael\", description: \"Calm & Reassuring\", gender: \"male\" },\n  { id: \"david\", name: \"David\", description: \"Confident & Steady\", gender: \"male\" },\n  { id: \"james\", name: \"James\", description: \"Friendly & Approachable\", gender: \"male\" }\n];\n\nconst goalOptions = [\n  {\n    id: \"anxiety\",\n    title: \"Manage Anxiety\",\n    description: \"Learn coping strategies for anxious thoughts and feelings\",\n    icon: Wind,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"depression\",\n    title: \"Improve Mood\",\n    description: \"Work through depression and find ways to feel better\",\n    icon: Sun,\n    color: \"text-yellow-500\"\n  },\n  {\n    id: \"stress\",\n    title: \"Reduce Stress\",\n    description: \"Find healthy ways to manage life's pressures\",\n    icon: Mountain,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"relationships\",\n    title: \"Relationship Issues\",\n    description: \"Improve communication and connection with others\",\n    icon: Users,\n    color: \"text-purple-500\"\n  },\n  {\n    id: \"self-esteem\",\n    title: \"Build Self-Esteem\",\n    description: \"Develop a more positive relationship with yourself\",\n    icon: Heart,\n    color: \"text-pink-500\"\n  },\n  {\n    id: \"general\",\n    title: \"General Support\",\n    description: \"Just need someone to talk to and process thoughts\",\n    icon: HandHeart,\n    color: \"text-teal-500\"\n  }\n];\n\nexport default function Onboarding({ onComplete }: OnboardingProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedPersonality, setSelectedPersonality] = useState(\"\");\n  const [selectedVoice, setSelectedVoice] = useState(\"\");\n  const [selectedGoals, setSelectedGoals] = useState<string[]>([]);\n\n  const nextStep = () => {\n    if (currentStep < 5) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePersonalitySelect = (personality: string) => {\n    setSelectedPersonality(personality);\n  };\n\n  const handleVoiceSelect = (voice: string) => {\n    setSelectedVoice(voice);\n  };\n\n  const handleGoalToggle = (goal: string) => {\n    setSelectedGoals(prev => \n      prev.includes(goal) \n        ? prev.filter(g => g !== goal)\n        : [...prev, goal]\n    );\n  };\n\n  const handleComplete = () => {\n    onComplete({\n      therapistPersonality: selectedPersonality,\n      selectedVoice: selectedVoice,\n      selectedGoals: selectedGoals\n    });\n  };\n\n  if (currentStep === 1) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-primary mb-2\">Welcome to Eunoia</h1>\n            <p className=\"text-lg text-muted-foreground\">Your AI-powered therapeutic companion</p>\n          </div>\n          <img \n            src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\" \n            alt=\"Peaceful meditation scene\" \n            className=\"rounded-2xl mb-8 w-full h-48 object-cover shadow-lg\"\n          />\n          <p className=\"text-muted-foreground mb-8\">\n            Let's personalize your therapeutic experience with a few quick questions.\n          </p>\n          <Button onClick={nextStep} className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\">\n            Get Started\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 2) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Choose Your Therapist Style</h2>\n            <p className=\"text-muted-foreground\">Select the personality that resonates most with you</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n            {therapistPersonalities.map((personality) => {\n              const IconComponent = personality.icon;\n              return (\n                <Card\n                  key={personality.id}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedPersonality === personality.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handlePersonalitySelect(personality.id)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <IconComponent className={`w-8 h-8 ${personality.color} mx-auto mb-3`} />\n                    <h3 className=\"text-xl font-semibold mb-2\">{personality.name} - {personality.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{personality.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={!selectedPersonality}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 3) {\n    const femaleVoices = voiceOptions.filter(v => v.gender === \"female\");\n    const maleVoices = voiceOptions.filter(v => v.gender === \"male\");\n\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Choose Your Voice</h2>\n            <p className=\"text-muted-foreground\">Select the voice that feels most comfortable for you</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">Female Voices</h3>\n              <div className=\"space-y-3\">\n                {femaleVoices.map((voice) => (\n                  <Card\n                    key={voice.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedVoice === voice.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => handleVoiceSelect(voice.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{voice.name} - {voice.description}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/90\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">Male Voices</h3>\n              <div className=\"space-y-3\">\n                {maleVoices.map((voice) => (\n                  <Card\n                    key={voice.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedVoice === voice.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => handleVoiceSelect(voice.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{voice.name} - {voice.description}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/90\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={!selectedVoice}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 4) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">What brings you here today?</h2>\n            <p className=\"text-muted-foreground\">Select your primary goals for this session</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n            {goalOptions.map((goal) => {\n              const IconComponent = goal.icon;\n              return (\n                <Card\n                  key={goal.id}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedGoals.includes(goal.id) ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handleGoalToggle(goal.id)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <IconComponent className={`w-8 h-8 ${goal.color} mx-auto mb-3`} />\n                    <h3 className=\"text-lg font-semibold mb-2\">{goal.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{goal.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={selectedGoals.length === 0}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 5) {\n    const selectedPersonalityData = therapistPersonalities.find(p => p.id === selectedPersonality);\n    const selectedVoiceData = voiceOptions.find(v => v.id === selectedVoice);\n    const selectedGoalData = goalOptions.filter(g => selectedGoals.includes(g.id));\n\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">You're all set!</h2>\n            <p className=\"text-muted-foreground mb-6\">Here's your personalized setup:</p>\n            \n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Therapist:</span>\n                  <span className=\"font-semibold\">{selectedPersonalityData?.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Voice:</span>\n                  <span className=\"font-semibold\">{selectedVoiceData?.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Focus:</span>\n                  <span className=\"font-semibold\">{selectedGoalData.map(g => g.title).join(', ')}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <Button\n            onClick={handleComplete}\n            className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 rounded-full font-semibold text-lg\"\n          >\n            Start Your Session\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n","size_bytes":13768},"EunoiaFirst/client/src/pages/session-summaries.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  Calendar, \n  Clock, \n  Target, \n  Lightbulb, \n  CheckSquare,\n  FileText,\n  User,\n  Menu\n} from \"lucide-react\";\nimport type { Session } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface SessionSummariesPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function SessionSummariesPage({ onBack }: SessionSummariesPageProps) {\n  const { data: sessions = [], isLoading, error } = useQuery<Session[]>({\n    queryKey: [\"/api/sessions/summaries\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex gap-2\">\n                    <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded w-24\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n          </div>\n          \n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-red-600\">Failed to load session summaries. Please try again.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const completedSessions = sessions.filter(session => session.summary);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n        </div>\n\n        {completedSessions.length === 0 ? (\n          <Card className=\"border-dashed border-2 border-gray-200\">\n            <CardContent className=\"p-12 text-center\">\n              <FileText className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">No Session Summaries Yet</h3>\n              <p className=\"text-gray-500 mb-6\">\n                Complete a therapy session to see detailed summaries with key topics, insights, and recommendations.\n              </p>\n              <Button onClick={onBack} variant=\"outline\">\n                Start a New Session\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {completedSessions.map((session) => (\n              <Card key={session.id} className=\"shadow-lg\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-xl\">\n                      Session {session.id}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {session.startTime ? new Date(session.startTime).toLocaleDateString() : 'Unknown date'}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        {session.duration ? `${Math.floor(session.duration / 60)}m ${session.duration % 60}s` : 'Unknown duration'}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"w-4 h-4\" />\n                        {session.therapistPersonality || 'Unknown therapist'}\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-6\">\n                  {/* Session Summary */}\n                  {session.summary && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4\" />\n                        Session Overview\n                      </h4>\n                      <p className=\"text-muted-foreground leading-relaxed bg-gray-50 p-4 rounded-lg\">\n                        {session.summary}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Key Topics */}\n                  {session.keyTopics && Array.isArray(session.keyTopics) && session.keyTopics.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-green-600\" />\n                        Key Topics Discussed\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.keyTopics.map((topic, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200\">\n                            {topic}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* CBT Techniques */}\n                  {session.cbtTechniques && Array.isArray(session.cbtTechniques) && session.cbtTechniques.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Lightbulb className=\"w-4 h-4 text-purple-600\" />\n                        CBT Techniques Used\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.cbtTechniques.map((technique, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                            {technique}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Homework & Next Steps */}\n                  {session.homework && Array.isArray(session.homework) && session.homework.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <CheckSquare className=\"w-4 h-4 text-orange-600\" />\n                        Homework & Next Steps\n                      </h4>\n                      <ul className=\"space-y-2\">\n                        {session.homework.map((task, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <CheckSquare className=\"w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-muted-foreground\">{task}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {/* Therapist Notes */}\n                  {session.therapistNotes && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4 text-blue-600\" />\n                        Therapist Notes\n                      </h4>\n                      <p className=\"text-muted-foreground bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                        {session.therapistNotes}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Goals Progress */}\n                  {session.selectedGoals && Array.isArray(session.selectedGoals) && session.selectedGoals.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-blue-600\" />\n                        Session Goals\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.selectedGoals.map((goal, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"border-blue-200 text-blue-700\">\n                            {goal}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10139},"EunoiaFirst/client/src/pages/session.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport Sidebar from \"@/components/sidebar\";\nimport VoiceInterface from \"@/components/voice-interface\";\nimport ChatInterface from \"@/components/chat-interface\";\nimport CrisisModal from \"@/components/crisis-modal\";\nimport SessionSummaryModal from \"@/components/session-summary-modal\";\nimport { detectCrisisKeywords, shouldTriggerCrisisIntervention } from \"@/lib/crisis-detection\";\nimport type { SessionSettings, CurrentPage } from \"@/App\";\nimport type { Session, Message } from \"@shared/schema\";\n\ninterface SessionPageProps {\n  sessionId: number;\n  sessionSettings: SessionSettings;\n  onPageChange: (page: CurrentPage) => void;\n  onSessionEnd: () => void;\n}\n\nexport default function SessionPage({ sessionId, sessionSettings, onPageChange, onSessionEnd }: SessionPageProps) {\n  const [isVoiceMode, setIsVoiceMode] = useState(true);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [sessionTimer, setSessionTimer] = useState(0);\n  const [showCrisisModal, setShowCrisisModal] = useState(false);\n  const [detectedKeywords, setDetectedKeywords] = useState<string[]>([]);\n  const [showSessionSummary, setShowSessionSummary] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Timer effect\n  useEffect(() => {\n    if (sessionEnded) return;\n\n    const timer = setInterval(() => {\n      setSessionTimer(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [sessionEnded]);\n\n  // Get session data\n  const { data: session } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/sessions/${sessionId}`);\n      return response.json();\n    },\n    enabled: !!sessionId,\n  });\n\n  // Get messages\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId, \"messages\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/sessions/${sessionId}/messages`);\n      return response.json();\n    },\n    enabled: !!sessionId,\n    refetchInterval: 1000,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ content, isVoice }: { content: string; isVoice: boolean }) => {\n      // Check for crisis keywords before sending\n      const keywords = detectCrisisKeywords(content);\n      if (keywords.length > 0) {\n        setDetectedKeywords(keywords);\n        if (shouldTriggerCrisisIntervention(content)) {\n          setShowCrisisModal(true);\n        }\n      }\n\n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/messages`, {\n        content,\n        isVoice,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\", sessionId, \"messages\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error sending message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      setSessionEnded(true);\n      setShowSessionSummary(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\", sessionId] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error ending session\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (content: string, isVoice: boolean = false) => {\n    if (!content.trim()) return;\n    sendMessageMutation.mutate({ content, isVoice });\n  };\n\n  const handleEndSession = () => {\n    endSessionMutation.mutate();\n  };\n\n  const handleSessionSummaryClose = () => {\n    setShowSessionSummary(false);\n    onSessionEnd();\n  };\n\n  const handleViewAllSummaries = () => {\n    setShowSessionSummary(false);\n    onPageChange('session-summaries');\n  };\n\n  const handleReturnHome = () => {\n    setShowSessionSummary(false);\n    onSessionEnd();\n  };\n\n  const getTherapistName = () => {\n    const personalities: Record<string, string> = {\n      empathetic: \"Dr. Emma\",\n      analytical: \"Dr. Alex\",\n      supportive: \"Dr. Sam\", \n      mindful: \"Dr. Maya\"\n    };\n    return personalities[sessionSettings.therapistPersonality] || \"Dr. Emma\";\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage=\"session\"\n          onEndSession={handleEndSession}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Header */}\n          <div className=\"bg-white shadow-sm border-b border-border p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsSidebarOpen(true)}\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n                \n                <h1 className=\"text-xl font-bold text-primary\">Session with {getTherapistName()}</h1>\n              </div>\n              \n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm text-muted-foreground\">Communication Mode:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`text-sm ${!isVoiceMode ? 'text-primary' : 'text-muted-foreground'}`}>\n                      Text\n                    </span>\n                    <Switch\n                      checked={isVoiceMode}\n                      onCheckedChange={setIsVoiceMode}\n                    />\n                    <span className={`text-sm ${isVoiceMode ? 'text-primary' : 'text-muted-foreground'}`}>\n                      Voice\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <span>Session Time:</span>\n                  <span className=\"font-mono\">{formatTime(sessionTimer)}</span>\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleEndSession}\n                  disabled={endSessionMutation.isPending}\n                >\n                  {endSessionMutation.isPending ? \"Ending...\" : \"End Session\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Interface */}\n          <div className=\"flex-1 p-6\">\n            {isVoiceMode ? (\n              <VoiceInterface\n                therapistName={getTherapistName()}\n                onSendMessage={handleSendMessage}\n                messages={messages}\n                isLoading={sendMessageMutation.isPending}\n                sessionEnded={sessionEnded}\n              />\n            ) : (\n              <ChatInterface\n                therapistName={getTherapistName()}\n                onSendMessage={handleSendMessage}\n                messages={messages}\n                isLoading={sendMessageMutation.isPending}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Crisis Modal */}\n      <CrisisModal\n        isOpen={showCrisisModal}\n        onClose={() => setShowCrisisModal(false)}\n        detectedKeywords={detectedKeywords}\n      />\n\n      {/* Session Summary Modal */}\n      <SessionSummaryModal\n        isOpen={showSessionSummary}\n        onClose={handleSessionSummaryClose}\n        sessionId={sessionId}\n        therapistName={getTherapistName()}\n        duration={sessionTimer}\n        onViewAllSummaries={handleViewAllSummaries}\n        onReturnHome={handleReturnHome}\n      />\n    </div>\n  );\n}","size_bytes":9052},"EunoiaFirst/client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Settings, User, Volume2, Target, Menu } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage, SessionSettings } from \"@/App\";\n\ninterface SettingsPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n  sessionSettings: SessionSettings | null;\n  onUpdateSettings: (settings: SessionSettings) => void;\n}\n\nconst therapistPersonalities = [\n  {\n    id: \"empathetic\",\n    name: \"Dr. Emma\",\n    description: \"Warm, understanding, and focuses on emotional support\"\n  },\n  {\n    id: \"analytical\",\n    name: \"Dr. Alex\",\n    description: \"Logical, structured, and helps with problem-solving\"\n  },\n  {\n    id: \"supportive\",\n    name: \"Dr. Sam\",\n    description: \"Encouraging, motivational, and strength-focused\"\n  },\n  {\n    id: \"mindful\",\n    name: \"Dr. Maya\",\n    description: \"Calm, present-focused, and mindfulness-oriented\"\n  }\n];\n\nconst voiceOptions = [\n  { id: \"alloy\", name: \"Alloy\", description: \"Natural and balanced\" },\n  { id: \"echo\", name: \"Echo\", description: \"Warm and engaging\" },\n  { id: \"fable\", name: \"Fable\", description: \"Calm and soothing\" },\n  { id: \"onyx\", name: \"Onyx\", description: \"Deep and authoritative\" },\n  { id: \"nova\", name: \"Nova\", description: \"Bright and energetic\" },\n  { id: \"shimmer\", name: \"Shimmer\", description: \"Gentle and friendly\" }\n];\n\nconst goalOptions = [\n  \"Reduce anxiety and stress\",\n  \"Improve mood and emotional regulation\",\n  \"Develop coping strategies\",\n  \"Better sleep habits\",\n  \"Increase self-confidence\",\n  \"Manage depression symptoms\",\n  \"Improve relationships\",\n  \"Work through trauma\",\n  \"Manage anger\",\n  \"Build mindfulness practices\",\n  \"Career and life transitions\",\n  \"Grief and loss support\"\n];\n\nexport default function SettingsPage({ \n  onBack, \n  onPageChange, \n  currentPage, \n  sessionId, \n  sessionSettings,\n  onUpdateSettings \n}: SettingsPageProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [tempSettings, setTempSettings] = useState<SessionSettings>(\n    sessionSettings || {\n      therapistPersonality: \"empathetic\",\n      selectedVoice: \"alloy\",\n      selectedGoals: []\n    }\n  );\n\n  const handlePersonalityChange = (personality: string) => {\n    setTempSettings(prev => ({ ...prev, therapistPersonality: personality }));\n  };\n\n  const handleVoiceChange = (voice: string) => {\n    setTempSettings(prev => ({ ...prev, selectedVoice: voice }));\n  };\n\n  const handleGoalToggle = (goal: string) => {\n    setTempSettings(prev => ({\n      ...prev,\n      selectedGoals: prev.selectedGoals.includes(goal)\n        ? prev.selectedGoals.filter(g => g !== goal)\n        : [...prev.selectedGoals, goal]\n    }));\n  };\n\n  const handleSaveSettings = () => {\n    onUpdateSettings(tempSettings);\n    onBack();\n  };\n\n  const selectedPersonality = therapistPersonalities.find(p => p.id === tempSettings.therapistPersonality);\n  const selectedVoice = voiceOptions.find(v => v.id === tempSettings.selectedVoice);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Settings className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Settings</h1>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Therapist Personality */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    Therapist Personality\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose the therapist personality that best suits your needs\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Select value={tempSettings.therapistPersonality} onValueChange={handlePersonalityChange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {therapistPersonalities.map((personality) => (\n                        <SelectItem key={personality.id} value={personality.id}>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">{personality.name}</span>\n                            <span className=\"text-sm text-muted-foreground\">{personality.description}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedPersonality && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm\"><strong>{selectedPersonality.name}:</strong> {selectedPersonality.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Voice Selection */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Volume2 className=\"w-5 h-5 mr-2\" />\n                    Voice Selection\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose the voice for your therapy sessions\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Select value={tempSettings.selectedVoice} onValueChange={handleVoiceChange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {voiceOptions.map((voice) => (\n                        <SelectItem key={voice.id} value={voice.id}>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">{voice.name}</span>\n                            <span className=\"text-sm text-muted-foreground\">{voice.description}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedVoice && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm\"><strong>{selectedVoice.name}:</strong> {selectedVoice.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Therapy Goals */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Target className=\"w-5 h-5 mr-2\" />\n                    Therapy Goals\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select the areas you'd like to focus on (choose multiple)\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {goalOptions.map((goal) => (\n                      <div\n                        key={goal}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          tempSettings.selectedGoals.includes(goal)\n                            ? 'border-primary bg-primary/10'\n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onClick={() => handleGoalToggle(goal)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">{goal}</span>\n                          {tempSettings.selectedGoals.includes(goal) && (\n                            <Badge variant=\"default\" className=\"ml-2\">Selected</Badge>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {tempSettings.selectedGoals.length > 0 && (\n                    <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm font-medium mb-2\">Selected Goals:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {tempSettings.selectedGoals.map((goal) => (\n                          <Badge key={goal} variant=\"secondary\">{goal}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Save Button */}\n              <div className=\"flex justify-end gap-4\">\n                <Button variant=\"outline\" onClick={onBack}>\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveSettings}>\n                  Save Settings\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10453},"New-Eunoia/client/src/components/chat-interface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Send, User, UserCheck } from \"lucide-react\";\nimport type { Message } from \"@shared/schema\";\n\ninterface ChatInterfaceProps {\n  therapistName: string;\n  onSendMessage: (content: string, isVoice: boolean) => void;\n  messages: Message[];\n  isLoading: boolean;\n}\n\nexport default function ChatInterface({ \n  therapistName, \n  onSendMessage, \n  messages, \n  isLoading \n}: ChatInterfaceProps) {\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Focus input on mount\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSendMessage = () => {\n    if (inputMessage.trim() && !isLoading) {\n      onSendMessage(inputMessage.trim(), false);\n      setInputMessage(\"\");\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatTime = (timestamp: Date) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col h-full\">\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4 min-h-0\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <UserCheck className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              Welcome to your session with {therapistName}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              Start by sharing what's on your mind today. I'm here to listen and support you.\n            </p>\n          </div>\n        ) : (\n          messages.map((message, index) => (\n            <div\n              key={message.id || index}\n              className={`flex items-start space-x-3 ${\n                message.isUser ? 'justify-end' : 'justify-start'\n              }`}\n            >\n              {!message.isUser && (\n                <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                  <UserCheck className=\"w-5 h-5 text-white\" />\n                </div>\n              )}\n              \n              <div className={`flex-1 max-w-xs md:max-w-md ${message.isUser ? 'order-1' : ''}`}>\n                <Card className={`\n                  ${message.isUser \n                    ? 'bg-primary text-primary-foreground' \n                    : 'bg-accent/10 border-accent/20'\n                  }\n                `}>\n                  <CardContent className=\"p-4\">\n                    {!message.isUser && (\n                      <p className=\"text-sm font-semibold text-accent mb-1\">\n                        {therapistName}\n                      </p>\n                    )}\n                    <p className=\"text-sm leading-relaxed\">\n                      {message.content}\n                    </p>\n                  </CardContent>\n                </Card>\n                <p className={`text-xs text-muted-foreground mt-1 ${\n                  message.isUser ? 'text-right' : 'text-left'\n                }`}>\n                  {formatTime(message.createdAt || new Date())}\n                </p>\n              </div>\n              \n              {message.isUser && (\n                <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                  <User className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n              )}\n            </div>\n          ))\n        )}\n        \n        {/* Loading indicator */}\n        {isLoading && (\n          <div className=\"flex items-start space-x-3 justify-start\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <UserCheck className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"flex-1\">\n              <Card className=\"bg-accent/10 border-accent/20\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-sm font-semibold text-accent mb-1\">\n                    {therapistName}\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                    <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                    <span className=\"text-sm text-muted-foreground ml-2\">\n                      typing...\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input Area */}\n      <div className=\"border-t border-border p-4 bg-white\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-1\">\n            <Input\n              ref={inputRef}\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              disabled={isLoading}\n              className=\"pr-12\"\n            />\n          </div>\n          <Button\n            onClick={handleSendMessage}\n            disabled={!inputMessage.trim() || isLoading}\n            className=\"bg-primary hover:bg-primary/90\"\n          >\n            <Send className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6248},"New-Eunoia/client/src/components/crisis-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, Phone, ExternalLink } from \"lucide-react\";\n\ninterface CrisisModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  detectedKeywords: string[];\n}\n\nexport default function CrisisModal({ isOpen, onClose, detectedKeywords }: CrisisModalProps) {\n  const handleCallCrisisLine = () => {\n    window.open('tel:988', '_self');\n  };\n\n  const handleCallEmergency = () => {\n    window.open('tel:911', '_self');\n  };\n\n  const handleFindResources = () => {\n    window.open('https://suicidepreventionlifeline.org/', '_blank');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md mx-4\">\n        <DialogHeader>\n          <div className=\"flex flex-col items-center text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <DialogTitle className=\"text-xl font-bold text-foreground\">\n              We're Concerned About You\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-center text-muted-foreground\">\n            It sounds like you might be going through a really difficult time. Please know that help is available, and you don't have to face this alone.\n          </p>\n          \n          {detectedKeywords.length > 0 && (\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardContent className=\"p-3\">\n                <p className=\"text-sm text-red-800 font-medium\">\n                  We detected some concerning language in your message. Your safety is our priority.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n          \n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleCallCrisisLine}\n              className=\"w-full bg-red-600 hover:bg-red-700 text-white\"\n            >\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call 988 - Crisis Lifeline\n            </Button>\n            \n            <Button\n              onClick={handleCallEmergency}\n              className=\"w-full bg-red-800 hover:bg-red-900 text-white\"\n            >\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call 911 - Emergency\n            </Button>\n            \n            <Button\n              onClick={handleFindResources}\n              variant=\"outline\"\n              className=\"w-full border-red-300 text-red-700 hover:bg-red-50\"\n            >\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Find Local Resources\n            </Button>\n          </div>\n          \n          <div className=\"border-t pt-4\">\n            <div className=\"flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Continue Session\n              </Button>\n              <Button\n                onClick={handleFindResources}\n                className=\"flex-1 bg-primary hover:bg-primary/90\"\n              >\n                Get Help Now\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              If you're in immediate danger, please call 911 or go to your nearest emergency room.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3740},"New-Eunoia/client/src/components/session-summary-modal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Clock, \n  Target, \n  Lightbulb, \n  CheckSquare, \n  Heart,\n  Download,\n  Mail,\n  Check\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Session } from \"@shared/schema\";\n\ninterface SessionSummaryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: number | null;\n  therapistName: string;\n  duration: number;\n  onViewAllSummaries?: () => void;\n  onReturnHome?: () => void;\n}\n\nexport default function SessionSummaryModal({ \n  isOpen, \n  onClose, \n  sessionId, \n  therapistName, \n  duration,\n  onViewAllSummaries,\n  onReturnHome \n}: SessionSummaryModalProps) {\n  const { toast } = useToast();\n\n  const { data: session, isLoading } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId],\n    enabled: isOpen && !!sessionId,\n  });\n\n  const formatDuration = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes} minutes${remainingSeconds > 0 ? ` ${remainingSeconds} seconds` : ''}`;\n  };\n\n  const handleDownloadPDF = () => {\n    toast({\n      title: \"Feature Coming Soon\",\n      description: \"PDF download functionality will be available in the next update.\",\n    });\n  };\n\n  const handleEmailSummary = () => {\n    toast({\n      title: \"Feature Coming Soon\", \n      description: \"Email summary functionality will be available in the next update.\",\n    });\n  };\n\n  const handleFinish = () => {\n    toast({\n      title: \"Session Complete\",\n      description: \"Thank you for your session today. Take care of yourself.\",\n    });\n    \n    // Return to home page instead of just closing\n    if (onReturnHome) {\n      onReturnHome();\n    }\n    onClose();\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"text-center\">\n            <DialogTitle className=\"text-2xl font-bold text-foreground mb-2\">\n              Session Summary\n            </DialogTitle>\n            <p className=\"text-muted-foreground\">\n              Here's what we covered in your session with {therapistName}\n            </p>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Session Duration */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <h4 className=\"font-semibold text-blue-900\">Session Duration</h4>\n                  <p className=\"text-blue-800\">{formatDuration(duration)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Key Topics */}\n          {session?.keyTopics && Array.isArray(session.keyTopics) && session.keyTopics.length > 0 && (\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Target className=\"w-5 h-5 text-green-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-green-900 mb-2\">Key Topics Discussed</h4>\n                    <ul className=\"text-green-800 space-y-1\">\n                      {session.keyTopics.map((topic: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-green-600 rounded-full\"></span>\n                          <span>{topic}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* CBT Techniques */}\n          {session?.cbtTechniques && Array.isArray(session.cbtTechniques) && session.cbtTechniques.length > 0 && (\n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Lightbulb className=\"w-5 h-5 text-purple-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-purple-900 mb-2\">CBT Techniques Used</h4>\n                    <ul className=\"text-purple-800 space-y-1\">\n                      {session.cbtTechniques.map((technique: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-purple-600 rounded-full\"></span>\n                          <span>{technique}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Homework & Next Steps */}\n          {session?.homework && Array.isArray(session.homework) && session.homework.length > 0 && (\n            <Card className=\"bg-orange-50 border-orange-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <CheckSquare className=\"w-5 h-5 text-orange-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-orange-900 mb-2\">Homework & Next Steps</h4>\n                    <ul className=\"text-orange-800 space-y-1\">\n                      {session.homework.map((task: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2\">\n                          <span className=\"w-1.5 h-1.5 bg-orange-600 rounded-full\"></span>\n                          <span>{task}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Therapist Notes */}\n          {session?.therapistNotes && (\n            <Card className=\"bg-teal-50 border-teal-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <Heart className=\"w-5 h-5 text-teal-600 mt-1\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-teal-900 mb-2\">\n                      {therapistName}'s Notes\n                    </h4>\n                    <p className=\"text-teal-800 italic\">\n                      \"{session.therapistNotes}\"\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Default content when no session data */}\n          {(!session?.keyTopics || !Array.isArray(session?.keyTopics) || session?.keyTopics.length === 0) && \n           (!session?.cbtTechniques || !Array.isArray(session?.cbtTechniques) || session?.cbtTechniques.length === 0) && \n           (!session?.homework || !Array.isArray(session?.homework) || session?.homework.length === 0) && (\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">\n                  Session summary is being generated. This may take a moment.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n        \n        {/* Action Buttons */}\n        <div className=\"flex space-x-3 pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={handleDownloadPDF}\n            className=\"flex-1\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download PDF\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={handleEmailSummary}\n            className=\"flex-1\"\n          >\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Email Summary\n          </Button>\n          \n          {onViewAllSummaries && (\n            <Button\n              variant=\"outline\"\n              onClick={onViewAllSummaries}\n              className=\"flex-1\"\n            >\n              View All Sessions\n            </Button>\n          )}\n          \n          <Button\n            onClick={handleFinish}\n            className=\"flex-1 bg-primary hover:bg-primary/90\"\n          >\n            <Check className=\"w-4 h-4 mr-2\" />\n            Done\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9241},"New-Eunoia/client/src/components/sidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\nimport { \n  MessageCircle, \n  BookOpen, \n  Smile, \n  Wrench, \n  Phone, \n  X,\n  ChevronRight,\n  ChevronDown,\n  FileText,\n  Calendar,\n  Clock,\n  Home,\n  Settings\n} from \"lucide-react\";\nimport type { CurrentPage } from \"@/App\";\nimport type { Session } from \"@shared/schema\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: number | null;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  onEndSession?: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose, sessionId, onPageChange, currentPage, onEndSession }: SidebarProps) {\n  const [activeSection, setActiveSection] = useState(currentPage);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [pendingNavigation, setPendingNavigation] = useState<CurrentPage | null>(null);\n\n  // Update active section when current page changes\n  useEffect(() => {\n    setActiveSection(currentPage);\n  }, [currentPage]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      if (!sessionId) throw new Error(\"No active session\");\n      \n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Stop any ongoing speech synthesis\n      if (typeof window !== 'undefined' && window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n      \n      // Clear session from localStorage to prevent recreation\n      localStorage.removeItem('eunoia-session-id');\n      \n      // Invalidate sessions cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions/summaries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      \n      // Only show toast if we're ending from a non-session page\n      if (currentPage !== 'session') {\n        toast({\n          title: \"Session Ended\",\n          description: \"Your session has been ended.\",\n        });\n      }\n\n      // Navigate to the pending page\n      if (pendingNavigation) {\n        onPageChange(pendingNavigation);\n        setPendingNavigation(null);\n      } else {\n        // Default to home if no pending navigation\n        onPageChange('home');\n      }\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to end session properly.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleNavigation = (page: CurrentPage) => {\n    // Only show confirmation if we're currently in an active session AND on the session page\n    if (sessionId && currentPage === 'session') {\n      setPendingNavigation(page);\n      setShowConfirmDialog(true);\n    } else if (sessionId && currentPage !== 'session') {\n      // If there's a session but we're not on the session page, auto-end it silently\n      setPendingNavigation(page);\n      endSessionMutation.mutate();\n    } else {\n      // No active session, navigate directly\n      onPageChange(page);\n      onClose();\n    }\n  };\n\n  const handleConfirmEndSession = () => {\n    setShowConfirmDialog(false);\n    // Call the onEndSession callback if available (from session page)\n    if (onEndSession) {\n      onEndSession();\n    } else {\n      endSessionMutation.mutate();\n    }\n  };\n\n  const handleCancelNavigation = () => {\n    setShowConfirmDialog(false);\n    setPendingNavigation(null);\n  };\n\n\n\n  const menuItems = [\n    {\n      id: \"home\",\n      label: \"Home\",\n      icon: Home,\n      active: activeSection === \"home\" && sessionId === null, // Only active when on home without session\n      action: () => handleNavigation('home')\n    },\n    {\n      id: \"session\",\n      label: \"Talk to Eunoia\",\n      icon: MessageCircle,\n      active: activeSection === \"session\", // Show active when on session page\n      action: () => {\n        if (sessionId) {\n          // Navigate to active session\n          handleNavigation('session');\n        } else {\n          // No session, go to home to start one\n          handleNavigation('home');\n        }\n      }\n    },\n    {\n      id: \"journal\",\n      label: \"Journal\", \n      icon: BookOpen,\n      active: activeSection === \"journal\",\n      action: () => handleNavigation('journal')\n    },\n    {\n      id: \"mood\",\n      label: \"Mood Check-in\",\n      icon: Smile,\n      active: activeSection === \"mood\",\n      action: () => handleNavigation('mood')\n    },\n    {\n      id: \"cbt\",\n      label: \"CBT Coping Tools\",\n      icon: Wrench,\n      active: activeSection === \"cbt-tools\",\n      action: () => handleNavigation('cbt-tools')\n    },\n    {\n      id: \"summaries\",\n      label: \"Session Summaries\",\n      icon: FileText,\n      active: activeSection === \"session-summaries\",\n      action: () => handleNavigation('session-summaries')\n    },\n    {\n      id: \"settings\",\n      label: \"Settings\",\n      icon: Settings,\n      active: activeSection === \"settings\",\n      action: () => handleNavigation('settings')\n    }\n  ];\n\n  const cbtTools = [\n    \"Breathing Exercises\",\n    \"Thought Challenging\",\n    \"Grounding Techniques\",\n    \"Progressive Muscle Relaxation\",\n    \"Cognitive Restructuring\",\n    \"Mindfulness Meditation\"\n  ];\n\n  const journalPrompts = [\n    \"How am I feeling right now?\",\n    \"What am I grateful for today?\",\n    \"What challenged me today?\",\n    \"What did I learn about myself?\",\n    \"What would I like to focus on tomorrow?\"\n  ];\n\n  const SessionSummariesSection = () => {\n    const { data: sessions = [], isLoading } = useQuery<Session[]>({\n      queryKey: [\"/api/sessions/summaries\"],\n    });\n\n    if (isLoading) {\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    const completedSessions = sessions.filter(session => session.summary);\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-medium\">Past Session Summaries</h4>\n            {completedSessions.length > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => handleNavigation('session-summaries')}\n                className=\"text-xs\"\n              >\n                View All\n              </Button>\n            )}\n          </div>\n          {completedSessions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 mx-auto text-muted-foreground mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                No session summaries yet. Complete a therapy session to see summaries here.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {completedSessions.slice(0, 2).map((session) => (\n                <Card key={session.id} className=\"cursor-pointer hover:bg-accent/5 transition-colors\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-sm\">\n                        Session {session.id}\n                      </h5>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {session.duration ? `${Math.floor(session.duration / 60)}min` : ''}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-2\">\n                      <Calendar className=\"w-3 h-3\" />\n                      {session.startTime ? new Date(session.startTime).toLocaleDateString() : 'Unknown date'}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                      {session.summary ? session.summary.substring(0, 100) + '...' : 'No summary available'}\n                    </p>\n                    {session.keyTopics && session.keyTopics.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {session.keyTopics.slice(0, 2).map((topic, index) => (\n                          <span key={index} className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">\n                            {topic}\n                          </span>\n                        ))}\n                        {session.keyTopics.length > 2 && (\n                          <span className=\"text-xs text-muted-foreground\">+{session.keyTopics.length - 2} more</span>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n              {completedSessions.length > 2 && (\n                <div className=\"text-center pt-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => handleNavigation('session-summaries')}\n                    className=\"text-xs\"\n                  >\n                    View All {completedSessions.length} Sessions\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"session\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              You're currently in an active therapy session. Use the main interface to communicate with your therapist.\n            </p>\n            <div className=\"bg-primary/10 rounded-lg p-3\">\n              <p className=\"text-sm font-medium text-primary\">Session Active</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Your conversation is being recorded for session summary purposes.\n              </p>\n            </div>\n          </div>\n        );\n      \n      case \"journal\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Journal features are coming soon. In the meantime, you can discuss your thoughts and feelings during a therapy session.\n            </p>\n          </div>\n        );\n      \n      case \"mood\":\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Mood check-in features are coming soon. In the meantime, you can discuss your feelings during a therapy session.\n            </p>\n          </div>\n        );\n      \n      case \"cbt\":\n        return (\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-3\">CBT Coping Tools</h4>\n              <div className=\"space-y-2\">\n                {cbtTools.map((tool, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    className=\"w-full justify-between text-left h-auto py-3 px-4\"\n                  >\n                    <span className=\"text-sm\">{tool}</span>\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"bg-accent/10 rounded-lg p-3\">\n              <h5 className=\"font-medium text-accent mb-2\">Quick Exercise</h5>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Try the 4-7-8 breathing technique:\n              </p>\n              <ol className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>1. Inhale for 4 counts</li>\n                <li>2. Hold for 7 counts</li>\n                <li>3. Exhale for 8 counts</li>\n                <li>4. Repeat 3-4 times</li>\n              </ol>\n            </div>\n          </div>\n        );\n      \n      case \"summaries\":\n        return <SessionSummariesSection />;\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed z-50 h-full bg-white shadow-lg border-r border-border\n        w-80 transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-xl font-bold text-primary\">Eunoia</h2>\n                <p className=\"text-sm text-muted-foreground\">Your AI Therapeutic Companion</p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onClose}\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"p-4 space-y-2\">\n            {menuItems.map((item) => {\n              const IconComponent = item.icon;\n              return (\n                <Button\n                  key={item.id}\n                  variant={item.active ? \"default\" : \"ghost\"}\n                  className=\"w-full justify-start space-x-3 h-12\"\n                  onClick={item.action}\n                >\n                  <IconComponent className=\"h-5 w-5\" />\n                  <span>{item.label}</span>\n                </Button>\n              );\n            })}\n          </nav>\n          \n          {/* Content Area */}\n          <div className=\"flex-1 px-4 pb-4 overflow-y-auto\">\n            {renderContent()}\n          </div>\n          \n          {/* Crisis Support */}\n          <div className=\"p-4 border-t border-border\">\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardContent className=\"p-3\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Phone className=\"h-4 w-4 text-red-600\" />\n                  <span className=\"font-semibold text-red-800 text-sm\">Crisis Support</span>\n                </div>\n                <div className=\"space-y-1 text-xs\">\n                  <div className=\"font-medium text-red-800\">988 - Suicide & Crisis Lifeline</div>\n                  <div className=\"font-medium text-red-800\">911 - Emergency Services</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>End Current Session?</AlertDialogTitle>\n            <AlertDialogDescription>\n              You have an active therapy session. Are you sure you want to end it and navigate to a different page? \n              Your session progress will be saved and a summary will be generated.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleCancelNavigation}>\n              Stay in Session\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={handleConfirmEndSession}\n              disabled={endSessionMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {endSessionMutation.isPending ? \"Ending Session...\" : \"End Session\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":16541},"New-Eunoia/client/src/components/voice-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Mic, \n  MicOff, \n  Volume2, \n  Pause, \n  Lightbulb, \n  User, \n  UserCheck \n} from \"lucide-react\";\nimport { useSpeech } from \"@/hooks/use-speech\";\nimport type { Message } from \"@shared/schema\";\n\ninterface VoiceInterfaceProps {\n  therapistName: string;\n  onSendMessage: (content: string, isVoice: boolean) => void;\n  messages: Message[];\n  isLoading: boolean;\n  sessionEnded?: boolean;\n}\n\nexport default function VoiceInterface({ \n  therapistName, \n  onSendMessage, \n  messages, \n  isLoading,\n  sessionEnded = false \n}: VoiceInterfaceProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [currentTranscript, setCurrentTranscript] = useState(\"\");\n  const [lastAIResponse, setLastAIResponse] = useState(\"\");\n  \n  const { \n    startListening, \n    stopListening, \n    speak, \n    stopSpeaking,\n    isListening, \n    isSupported \n  } = useSpeech();\n\n  // Get latest AI response\n  useEffect(() => {\n    const latestAIMessage = messages\n      .filter(m => m.role === 'assistant')\n      .slice(-1)[0];\n    \n    if (latestAIMessage && latestAIMessage.content !== lastAIResponse) {\n      setLastAIResponse(latestAIMessage.content);\n      // Auto-speak the response\n      speak(latestAIMessage.content);\n    }\n  }, [messages, lastAIResponse, speak]);\n\n  // Stop all speech when session ends\n  useEffect(() => {\n    if (sessionEnded) {\n      stopSpeaking();\n      stopListening();\n    }\n  }, [sessionEnded, stopSpeaking, stopListening]);\n\n  // Cleanup effect when component unmounts or mode changes\n  useEffect(() => {\n    return () => {\n      stopSpeaking();\n      stopListening();\n    };\n  }, [stopSpeaking, stopListening]);\n\n  const handleStartRecording = async () => {\n    if (!isSupported) {\n      alert(\"Speech recognition is not supported in this browser.\");\n      return;\n    }\n    \n    setIsRecording(true);\n    setCurrentTranscript(\"\");\n    \n    try {\n      const transcript = await startListening();\n      setCurrentTranscript(transcript);\n      \n      if (transcript.trim()) {\n        onSendMessage(transcript, true);\n      }\n    } catch (error) {\n      console.error('Speech recognition error:', error);\n    } finally {\n      setIsRecording(false);\n    }\n  };\n\n  const handleStopRecording = () => {\n    setIsRecording(false);\n    stopListening();\n    \n    if (currentTranscript.trim()) {\n      onSendMessage(currentTranscript, true);\n    }\n  };\n\n  const handleRepeatResponse = () => {\n    if (lastAIResponse) {\n      speak(lastAIResponse);\n    }\n  };\n\n  const toggleRecording = () => {\n    if (isRecording) {\n      handleStopRecording();\n    } else {\n      handleStartRecording();\n    }\n  };\n\n  const latestUserMessage = messages.filter(m => m.role === 'user').slice(-1)[0];\n  const latestAIMessage = messages.filter(m => m.role === 'assistant').slice(-1)[0];\n\n  return (\n    <div className=\"flex-1 flex flex-col items-center justify-center p-8 space-y-8\">\n      <div className=\"max-w-2xl mx-auto text-center\">\n        \n        {/* Therapist Avatar */}\n        <div className=\"mb-8\">\n          <div className=\"w-32 h-32 bg-gradient-primary rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg\">\n            <UserCheck className=\"text-white text-4xl\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n            {therapistName} is listening\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {isRecording ? \"I'm listening...\" : \"Tap the button below to start talking\"}\n          </p>\n        </div>\n        \n        {/* Voice Recording Button */}\n        <div className=\"mb-8\">\n          <Button\n            onClick={toggleRecording}\n            disabled={isLoading || !isSupported}\n            className={`\n              w-24 h-24 rounded-full shadow-lg transition-all transform hover:scale-105 \n              focus:outline-none focus:ring-4 focus:ring-primary/30\n              ${isRecording \n                ? 'bg-red-500 hover:bg-red-600 animate-pulse' \n                : 'bg-primary hover:bg-primary/90'\n              }\n            `}\n          >\n            {isRecording ? (\n              <MicOff className=\"text-white text-2xl\" />\n            ) : (\n              <Mic className=\"text-white text-2xl\" />\n            )}\n          </Button>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            {isRecording ? \"Recording... tap to stop\" : \"Tap to speak\"}\n          </p>\n        </div>\n        \n        {/* Recording Status */}\n        {isRecording && (\n          <Card className=\"mb-6 bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center space-x-2 mb-2\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm font-medium text-blue-800\">Recording...</span>\n              </div>\n              <p className=\"text-sm text-blue-700\">\n                {currentTranscript || \"Listening for your voice...\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Latest User Message */}\n        {latestUserMessage && !isRecording && (\n          <Card className=\"mb-6 bg-primary/10 border-primary/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <User className=\"w-6 h-6 text-primary mt-1\" />\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-primary mb-1\">You said:</p>\n                  <p className=\"text-sm text-foreground\">{latestUserMessage.content}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* AI Response */}\n        {latestAIMessage && !isRecording && (\n          <Card className=\"mb-6 bg-accent/10 border-accent/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <UserCheck className=\"w-6 h-6 text-accent mt-1\" />\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-accent mb-1\">{therapistName}</p>\n                  <p className=\"text-sm text-foreground\">{latestAIMessage.content}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Loading State */}\n        {isLoading && (\n          <Card className=\"mb-6 bg-muted/50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{animationDelay: '0.2s'}}></div>\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\" style={{animationDelay: '0.4s'}}></div>\n                <span className=\"text-sm text-muted-foreground ml-2\">\n                  {therapistName} is thinking...\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Quick Actions */}\n        <div className=\"flex flex-wrap justify-center gap-3\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsRecording(!isRecording)}\n            disabled={isLoading}\n          >\n            <Pause className=\"w-4 h-4 mr-2\" />\n            {isRecording ? \"Pause\" : \"Resume\"}\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleRepeatResponse}\n            disabled={!lastAIResponse}\n          >\n            <Volume2 className=\"w-4 h-4 mr-2\" />\n            Repeat Response\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"bg-accent/10 text-accent hover:bg-accent/20\"\n          >\n            <Lightbulb className=\"w-4 h-4 mr-2\" />\n            Get Coping Tool\n          </Button>\n        </div>\n        \n        {/* Browser Support Warning */}\n        {!isSupported && (\n          <Card className=\"mt-6 bg-warning/10 border-warning/20\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-sm text-warning\">\n                Voice recognition is not supported in your browser. Please use a modern browser like Chrome, Firefox, or Safari for the best experience.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8700},"New-Eunoia/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"New-Eunoia/client/src/hooks/use-speech.ts":{"content":"import { useState, useCallback, useRef } from \"react\";\n\nexport interface SpeechHook {\n  startListening: () => Promise<string>;\n  stopListening: () => void;\n  speak: (text: string) => void;\n  stopSpeaking: () => void;\n  isListening: boolean;\n  isSupported: boolean;\n}\n\nexport function useSpeech(): SpeechHook {\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef<any>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n  \n  // Check if browser supports speech recognition and synthesis\n  const isSupported = typeof window !== 'undefined' && \n    ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) &&\n    'speechSynthesis' in window;\n\n  const startListening = useCallback((): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (!isSupported) {\n        reject(new Error(\"Speech recognition not supported\"));\n        return;\n      }\n\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.maxAlternatives = 1;\n      \n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      \n      recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        resolve(transcript);\n      };\n      \n      recognition.onerror = (event: any) => {\n        setIsListening(false);\n        reject(new Error(`Speech recognition error: ${event.error}`));\n      };\n      \n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      \n      recognitionRef.current = recognition;\n      recognition.start();\n    });\n  }, [isSupported]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      recognitionRef.current = null;\n    }\n    setIsListening(false);\n  }, []);\n\n  const stopSpeaking = useCallback(() => {\n    if (isSupported && window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n  }, [isSupported]);\n\n  const speak = useCallback((text: string) => {\n    if (!isSupported || !text.trim()) return;\n\n    // Cancel any ongoing speech\n    if (window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 0.9;\n    utterance.pitch = 1.0;\n    utterance.volume = 0.8;\n    \n    // Try to use a more natural voice\n    const voices = window.speechSynthesis.getVoices();\n    const preferredVoice = voices.find(voice => \n      voice.name.includes('Google') || \n      voice.name.includes('Microsoft') ||\n      voice.name.includes('Alex') ||\n      voice.name.includes('Samantha')\n    );\n    \n    if (preferredVoice) {\n      utterance.voice = preferredVoice;\n    }\n    \n    utterance.onerror = (event) => {\n      console.error('Speech synthesis error:', event.error);\n    };\n    \n    window.speechSynthesis.speak(utterance);\n  }, [isSupported]);\n\n  return {\n    startListening,\n    stopListening,\n    speak,\n    stopSpeaking,\n    isListening,\n    isSupported\n  };\n}\n\n// Extend the Window interface to include speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n","size_bytes":3392},"New-Eunoia/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"New-Eunoia/client/src/lib/crisis-detection.ts":{"content":"export const CRISIS_KEYWORDS = [\n  // Direct suicidal language\n  'suicide', 'kill myself', 'end my life', 'take my life', 'want to die',\n  'better off dead', 'end it all', 'no point living', 'life is pointless',\n  'nothing matters', 'worthless', 'useless', 'burden to everyone',\n  \n  // Self-harm language\n  'hurt myself', 'cut myself', 'self harm', 'self-harm', 'harm myself',\n  'pain myself', 'punish myself', 'cut my arms', 'cut my wrists',\n  \n  // Method-specific language\n  'overdose', 'pills', 'jump off', 'hang myself', 'rope', 'bridge',\n  'gun', 'knife', 'razor', 'bleeding', 'suffocate',\n  \n  // Hopelessness indicators\n  'no hope', 'hopeless', 'helpless', 'trapped', 'stuck forever',\n  'can\\'t go on', 'give up', 'quit trying', 'done trying',\n  \n  // Isolation language\n  'nobody cares', 'all alone', 'no one understands', 'isolated',\n  'abandoned', 'rejected', 'unloved', 'unwanted',\n  \n  // Planning language\n  'plan to hurt', 'plan to die', 'thought about', 'considering',\n  'preparing to', 'ready to', 'time to go', 'final goodbye',\n  \n  // Extreme distress\n  'can\\'t take it', 'too much pain', 'unbearable', 'suffering',\n  'torment', 'agony', 'breaking point', 'at my limit'\n];\n\nexport function detectCrisisKeywords(text: string): string[] {\n  if (!text) return [];\n  \n  const lowerText = text.toLowerCase();\n  const detectedKeywords: string[] = [];\n  \n  for (const keyword of CRISIS_KEYWORDS) {\n    if (lowerText.includes(keyword.toLowerCase())) {\n      detectedKeywords.push(keyword);\n    }\n  }\n  \n  return detectedKeywords;\n}\n\nexport function calculateCrisisScore(text: string): number {\n  const keywords = detectCrisisKeywords(text);\n  const wordCount = text.split(/\\s+/).length;\n  \n  if (keywords.length === 0) return 0;\n  \n  // Base score from keyword density\n  const density = keywords.length / wordCount;\n  let score = density * 100;\n  \n  // Boost score for high-risk keywords\n  const highRiskKeywords = [\n    'suicide', 'kill myself', 'end my life', 'want to die',\n    'plan to hurt', 'plan to die', 'overdose', 'jump off'\n  ];\n  \n  const highRiskCount = keywords.filter(keyword => \n    highRiskKeywords.includes(keyword)\n  ).length;\n  \n  score += highRiskCount * 25;\n  \n  // Cap at 100\n  return Math.min(score, 100);\n}\n\nexport function shouldTriggerCrisisIntervention(text: string): boolean {\n  const keywords = detectCrisisKeywords(text);\n  const score = calculateCrisisScore(text);\n  \n  // Trigger if any high-risk keywords are detected or score is high\n  return keywords.length > 0 || score > 30;\n}\n","size_bytes":2527},"New-Eunoia/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"New-Eunoia/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"New-Eunoia/client/src/pages/cbt-tools.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Brain, Wind, Lightbulb, Heart, Target, Clock, Menu } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface CBTToolsPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function CBTToolsPage({ onBack, onPageChange, currentPage, sessionId }: CBTToolsPageProps) {\n  const [breathingActive, setBreathingActive] = useState(false);\n  const [breathingPhase, setBreathingPhase] = useState<'inhale' | 'hold' | 'exhale'>('inhale');\n  const [breathingCount, setBreathingCount] = useState(4);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const startBreathingExercise = () => {\n    setBreathingActive(true);\n    breathingCycle();\n  };\n\n  const breathingCycle = () => {\n    // Inhale for 4 seconds\n    setBreathingPhase('inhale');\n    setBreathingCount(4);\n    \n    const inhaleTimer = setInterval(() => {\n      setBreathingCount(prev => {\n        if (prev <= 1) {\n          clearInterval(inhaleTimer);\n          // Hold for 7 seconds\n          setBreathingPhase('hold');\n          setBreathingCount(7);\n          \n          const holdTimer = setInterval(() => {\n            setBreathingCount(prev => {\n              if (prev <= 1) {\n                clearInterval(holdTimer);\n                // Exhale for 8 seconds\n                setBreathingPhase('exhale');\n                setBreathingCount(8);\n                \n                const exhaleTimer = setInterval(() => {\n                  setBreathingCount(prev => {\n                    if (prev <= 1) {\n                      clearInterval(exhaleTimer);\n                      setBreathingActive(false);\n                      return 0;\n                    }\n                    return prev - 1;\n                  });\n                }, 1000);\n                \n                return prev - 1;\n              }\n              return prev - 1;\n            });\n          }, 1000);\n          \n          return prev - 1;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const thoughtChallengingQuestions = [\n    \"Is this thought based on facts or feelings?\",\n    \"What evidence do I have that this thought is true?\",\n    \"What evidence do I have that this thought might not be true?\",\n    \"What would I tell a friend who had this thought?\",\n    \"What's the worst that could realistically happen?\",\n    \"What's the best that could happen?\",\n    \"What's most likely to happen?\",\n    \"How will this matter in 5 years?\",\n    \"What are some other ways to look at this situation?\",\n    \"What would be a more balanced way to think about this?\"\n  ];\n\n  const groundingTechniques = [\n    {\n      name: \"5-4-3-2-1 Technique\",\n      description: \"Name 5 things you can see, 4 you can touch, 3 you can hear, 2 you can smell, 1 you can taste\"\n    },\n    {\n      name: \"Progressive Muscle Relaxation\",\n      description: \"Tense and then relax each muscle group in your body, starting from your toes and working up to your head\"\n    },\n    {\n      name: \"Box Breathing\",\n      description: \"Breathe in for 4 counts, hold for 4, exhale for 4, hold for 4. Repeat several times\"\n    },\n    {\n      name: \"Mindful Observation\",\n      description: \"Choose an object and observe it closely for 2-3 minutes, noticing every detail\"\n    }\n  ];\n\n  const copingStrategies = [\n    {\n      category: \"Anxiety\",\n      strategies: [\n        \"Deep breathing exercises\",\n        \"Progressive muscle relaxation\",\n        \"Grounding techniques (5-4-3-2-1)\",\n        \"Challenge anxious thoughts\",\n        \"Use positive self-talk\",\n        \"Practice mindfulness meditation\"\n      ]\n    },\n    {\n      category: \"Depression\",\n      strategies: [\n        \"Behavioral activation (plan pleasant activities)\",\n        \"Challenge negative thoughts\",\n        \"Maintain a daily routine\",\n        \"Practice gratitude\",\n        \"Exercise regularly\",\n        \"Connect with supportive people\"\n      ]\n    },\n    {\n      category: \"Stress\",\n      strategies: [\n        \"Time management and prioritization\",\n        \"Break large tasks into smaller steps\",\n        \"Practice saying 'no' to excessive demands\",\n        \"Use relaxation techniques\",\n        \"Maintain work-life balance\",\n        \"Seek social support\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Brain className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">CBT Coping Tools</h1>\n              </div>\n            </div>\n\n        <Tabs defaultValue=\"breathing\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"breathing\">Breathing</TabsTrigger>\n            <TabsTrigger value=\"thoughts\">Thought Challenge</TabsTrigger>\n            <TabsTrigger value=\"grounding\">Grounding</TabsTrigger>\n            <TabsTrigger value=\"strategies\">Coping Strategies</TabsTrigger>\n          </TabsList>\n\n          {/* Breathing Exercises */}\n          <TabsContent value=\"breathing\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Wind className=\"w-5 h-5 mr-2\" />\n                  Breathing Exercises\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Practice controlled breathing to reduce anxiety and promote relaxation\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* 4-7-8 Breathing */}\n                <div className=\"text-center\">\n                  <h3 className=\"text-xl font-semibold mb-4\">4-7-8 Breathing Technique</h3>\n                  \n                  {breathingActive ? (\n                    <div className=\"space-y-4\">\n                      <div className={`\n                        w-32 h-32 rounded-full mx-auto flex items-center justify-center text-white font-bold text-2xl\n                        ${breathingPhase === 'inhale' ? 'bg-blue-500 animate-pulse' : \n                          breathingPhase === 'hold' ? 'bg-yellow-500' : 'bg-green-500 animate-pulse'}\n                      `}>\n                        {breathingCount}\n                      </div>\n                      <div className=\"text-lg capitalize font-medium\">\n                        {breathingPhase === 'inhale' ? '🌬️ Breathe In' : \n                         breathingPhase === 'hold' ? '⏸️ Hold' : '💨 Breathe Out'}\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"w-32 h-32 rounded-full mx-auto bg-gray-200 flex items-center justify-center\">\n                        <Wind className=\"w-12 h-12 text-gray-400\" />\n                      </div>\n                      <Button onClick={startBreathingExercise} className=\"mx-auto\">\n                        Start Exercise\n                      </Button>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-6 text-sm text-muted-foreground max-w-md mx-auto\">\n                    <p className=\"mb-2\"><strong>Instructions:</strong></p>\n                    <ol className=\"text-left space-y-1\">\n                      <li>1. Inhale through your nose for 4 counts</li>\n                      <li>2. Hold your breath for 7 counts</li>\n                      <li>3. Exhale through your mouth for 8 counts</li>\n                      <li>4. This completes one cycle</li>\n                    </ol>\n                  </div>\n                </div>\n\n                {/* Other Breathing Techniques */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-8\">\n                  <Card className=\"border-blue-200 bg-blue-50\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">Box Breathing</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Inhale 4, Hold 4, Exhale 4, Hold 4\n                      </p>\n                      <p className=\"text-xs\">Great for focus and concentration</p>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"border-green-200 bg-green-50\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold mb-2\">Deep Belly Breathing</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Slow, deep breaths using your diaphragm\n                      </p>\n                      <p className=\"text-xs\">Reduces stress and promotes relaxation</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Thought Challenging */}\n          <TabsContent value=\"thoughts\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Lightbulb className=\"w-5 h-5 mr-2\" />\n                  Thought Challenging\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Use these questions to examine and challenge negative or unhelpful thoughts\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {thoughtChallengingQuestions.map((question, index) => (\n                    <Card key={index} className=\"border-purple-200 bg-purple-50\">\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm font-medium\">{question}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    How to Use\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    When you notice a negative or distressing thought, pick 2-3 of these questions and genuinely try to answer them. \n                    This helps you examine the thought objectively and often reveals that it may not be as accurate or helpful as it first seemed.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Grounding Techniques */}\n          <TabsContent value=\"grounding\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"w-5 h-5 mr-2\" />\n                  Grounding Techniques\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Techniques to help you stay present and connected to the moment\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {groundingTechniques.map((technique, index) => (\n                    <Card key={index} className=\"border-teal-200 bg-teal-50\">\n                      <CardContent className=\"p-6\">\n                        <h4 className=\"font-semibold mb-3\">{technique.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{technique.description}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                \n                <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    When to Use Grounding\n                  </h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• When feeling overwhelmed or panicky</li>\n                    <li>• During flashbacks or dissociation</li>\n                    <li>• When anxiety feels out of control</li>\n                    <li>• To reconnect with the present moment</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Coping Strategies */}\n          <TabsContent value=\"strategies\">\n            <div className=\"space-y-6\">\n              {copingStrategies.map((category, index) => (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle>{category.category} Coping Strategies</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {category.strategies.map((strategy, strategyIndex) => (\n                        <div key={strategyIndex} className=\"flex items-center p-3 border border-gray-200 rounded-lg bg-gray-50\">\n                          <span className=\"text-sm\">{strategy}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14768},"New-Eunoia/client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Menu, Settings, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { SessionSettings, CurrentPage } from \"@/App\";\n\ninterface HomeProps {\n  sessionSettings: SessionSettings;\n  onPageChange: (page: CurrentPage) => void;\n  onSessionStart: (sessionId: number) => void;\n}\n\nexport default function Home({ sessionSettings, onPageChange, onSessionStart }: HomeProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (settings: SessionSettings) => {\n      const response = await apiRequest(\"POST\", \"/api/sessions\", {\n        therapistPersonality: settings.therapistPersonality,\n        selectedVoice: settings.selectedVoice,\n        selectedGoals: settings.selectedGoals,\n      });\n      return response.json();\n    },\n    onSuccess: (session) => {\n      toast({\n        title: \"Session Started\",\n        description: \"Your therapy session has begun successfully.\",\n      });\n      onSessionStart(session.id);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error starting session\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const initializeSession = () => {\n    createSessionMutation.mutate(sessionSettings);\n  };\n\n  const getTherapistName = () => {\n    const personalities: Record<string, string> = {\n      empathetic: \"Dr. Emma\",\n      analytical: \"Dr. Alex\", \n      supportive: \"Dr. Sam\",\n      mindful: \"Dr. Maya\"\n    };\n    return personalities[sessionSettings.therapistPersonality] || \"Dr. Emma\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 relative overflow-hidden\">\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        sessionId={null}\n        onPageChange={onPageChange}\n        currentPage=\"home\"\n      />\n\n      {/* Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-pink-400/20 to-blue-400/20 rounded-full blur-3xl\"></div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col min-h-screen\">\n        {/* Header */}\n        <div className=\"bg-white/80 backdrop-blur-sm shadow-sm border-b border-gray-200/50 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsSidebarOpen(true)}\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              \n              <h1 className=\"text-xl font-bold text-primary\">Eunoia</h1>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange('settings')}\n              className=\"flex items-center space-x-2\"\n            >\n              <Settings className=\"h-4 w-4\" />\n              <span>Customize Session</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 flex items-center justify-center p-6\">\n          <div className=\"max-w-2xl w-full\">\n            <div className=\"text-center mb-12\">\n              {/* Animated Heart Icon */}\n              <div className=\"relative mb-8\">\n                <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-red-400 to-pink-500 rounded-full flex items-center justify-center shadow-lg animate-pulse\">\n                  <Heart className=\"w-8 h-8 text-white fill-current\" />\n                </div>\n                <div className=\"absolute inset-0 w-16 h-16 mx-auto bg-gradient-to-br from-red-400/30 to-pink-500/30 rounded-full animate-ping\"></div>\n              </div>\n              \n              <h2 className=\"text-4xl font-bold text-gray-800 mb-4\">\n                Welcome to Your Safe Space\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-2\">\n                Ready to start your session with\n              </p>\n              <p className=\"text-xl font-semibold text-gray-800 mb-6\">\n                {getTherapistName()}\n              </p>\n              \n              {/* Session Info */}\n              <div className=\"bg-white/80 backdrop-blur-sm rounded-lg p-6 mb-8 shadow-sm border border-gray-100\">\n                <div className=\"grid grid-cols-1 gap-4 text-sm\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Therapist Personality:</span>\n                    <span className=\"font-medium text-gray-800 capitalize\">\n                      {sessionSettings.therapistPersonality}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Selected Goals:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {sessionSettings.selectedGoals.length} goal{sessionSettings.selectedGoals.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Voice Mode:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {sessionSettings.selectedVoice}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Start Button */}\n              <Button \n                onClick={initializeSession}\n                disabled={createSessionMutation.isPending}\n                size=\"lg\"\n                className=\"w-full h-12 text-lg font-semibold bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-200 shadow-lg\"\n              >\n                {createSessionMutation.isPending ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    <span>Starting Session...</span>\n                  </div>\n                ) : (\n                  \"Begin Your Session\"\n                )}\n              </Button>\n              \n              <p className=\"text-sm text-gray-500 mt-4\">\n                Take a moment to get comfortable and prepare for your session\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7129},"New-Eunoia/client/src/pages/journal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, BookOpen, Plus, Calendar, Menu } from \"lucide-react\";\nimport type { JournalEntry } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface JournalPageProps {\n  sessionId?: number;\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n}\n\nconst journalPrompts = [\n  \"How am I feeling right now?\",\n  \"What am I grateful for today?\",\n  \"What challenged me today?\",\n  \"What did I learn about myself?\",\n  \"What would I like to focus on tomorrow?\",\n  \"What emotions came up for me today?\",\n  \"What is one thing I did well today?\",\n  \"What is something I want to improve?\",\n  \"What brought me joy today?\",\n  \"What am I worried about?\"\n];\n\nexport default function JournalPage({ sessionId, onBack, onPageChange, currentPage }: JournalPageProps) {\n  const [newEntryTitle, setNewEntryTitle] = useState(\"\");\n  const [newEntryContent, setNewEntryContent] = useState(\"\");\n  const [selectedPrompt, setSelectedPrompt] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get journal entries\n  const { data: entries = [], isLoading } = useQuery({\n    queryKey: [\"/api/journal\", sessionId],\n    queryFn: async () => {\n      const url = sessionId ? `/api/journal?sessionId=${sessionId}` : \"/api/journal\";\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n\n  // Create journal entry mutation\n  const createEntryMutation = useMutation({\n    mutationFn: async (entryData: { title?: string; content: string; prompt?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/journal\", {\n        sessionId: sessionId || null,\n        title: entryData.title || null,\n        content: entryData.content,\n        prompt: entryData.prompt || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/journal\", sessionId] });\n      setNewEntryTitle(\"\");\n      setNewEntryContent(\"\");\n      setSelectedPrompt(\"\");\n      toast({\n        title: \"Entry Saved\",\n        description: \"Your journal entry has been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save journal entry. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handlePromptSelect = (prompt: string) => {\n    setSelectedPrompt(prompt);\n    setNewEntryTitle(prompt);\n    setNewEntryContent(\"\"); // Clear content so user can respond to the prompt\n  };\n\n  const handleSaveEntry = () => {\n    if (!newEntryContent.trim()) {\n      toast({\n        title: \"Content Required\",\n        description: \"Please write something before saving your entry.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createEntryMutation.mutate({\n      title: newEntryTitle || undefined,\n      content: newEntryContent,\n      prompt: selectedPrompt || undefined,\n    });\n  };\n\n  const formatDate = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId || null}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <BookOpen className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Journal</h1>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* New Entry Form */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"mb-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Plus className=\"w-5 h-5 mr-2\" />\n                      New Journal Entry\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Title (Optional)</label>\n                      <Input\n                        value={newEntryTitle}\n                        onChange={(e) => setNewEntryTitle(e.target.value)}\n                        placeholder=\"Give your entry a title...\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Your Thoughts</label>\n                      <Textarea\n                        value={newEntryContent}\n                        onChange={(e) => setNewEntryContent(e.target.value)}\n                        placeholder=\"Write about your thoughts, feelings, experiences...\"\n                        className=\"min-h-32\"\n                        rows={6}\n                      />\n                    </div>\n                    \n                    <Button\n                      onClick={handleSaveEntry}\n                      disabled={createEntryMutation.isPending || !newEntryContent.trim()}\n                      className=\"w-full\"\n                    >\n                      {createEntryMutation.isPending ? \"Saving...\" : \"Save Entry\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Previous Entries */}\n                <div className=\"space-y-4\">\n                  <h2 className=\"text-xl font-semibold text-foreground mb-4\">Previous Entries</h2>\n                  \n                  {isLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : entries.length === 0 ? (\n                    <Card className=\"text-center py-8\">\n                      <CardContent>\n                        <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No journal entries yet. Start writing your first entry above!</p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    entries.map((entry: JournalEntry) => (\n                      <Card key={entry.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              {entry.title && (\n                                <h3 className=\"font-semibold text-foreground mb-2\">{entry.title}</h3>\n                              )}\n                              {entry.prompt && entry.prompt !== entry.title && (\n                                <p className=\"text-sm text-primary mb-2 italic\">Prompt: {entry.prompt}</p>\n                              )}\n                            </div>\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Calendar className=\"w-4 h-4 mr-1\" />\n                              {formatDate(entry.timestamp || new Date())}\n                            </div>\n                          </div>\n                          <p className=\"text-foreground whitespace-pre-wrap\">{entry.content}</p>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Prompts Sidebar */}\n              <div>\n                <Card className=\"sticky top-6\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Writing Prompts</CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Use these prompts to get started with your journaling\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {journalPrompts.map((prompt, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full justify-start text-left h-auto py-3 px-3\"\n                          onClick={() => handlePromptSelect(prompt)}\n                        >\n                          <span className=\"text-sm\">{prompt}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10247},"New-Eunoia/client/src/pages/mood.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Smile, TrendingUp, Calendar, Menu } from \"lucide-react\";\nimport type { MoodEntry } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface MoodPageProps {\n  sessionId?: number;\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n}\n\nconst moodEmojis = [\n  { emoji: \"😊\", label: \"Happy\", value: 8 },\n  { emoji: \"😐\", label: \"Neutral\", value: 5 },\n  { emoji: \"😔\", label: \"Sad\", value: 3 },\n  { emoji: \"😟\", label: \"Worried\", value: 4 },\n  { emoji: \"😴\", label: \"Tired\", value: 4 },\n  { emoji: \"😤\", label: \"Frustrated\", value: 3 },\n  { emoji: \"😰\", label: \"Anxious\", value: 2 },\n  { emoji: \"🤗\", label: \"Loved\", value: 9 },\n  { emoji: \"😡\", label: \"Angry\", value: 2 },\n  { emoji: \"😌\", label: \"Peaceful\", value: 8 },\n  { emoji: \"🥳\", label: \"Excited\", value: 9 },\n  { emoji: \"😭\", label: \"Overwhelmed\", value: 1 }\n];\n\nexport default function MoodPage({ sessionId, onBack, onPageChange, currentPage }: MoodPageProps) {\n  const [selectedMood, setSelectedMood] = useState<{ emoji: string; label: string; value: number } | null>(null);\n  const [moodScore, setMoodScore] = useState<number | null>(null);\n  const [notes, setNotes] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get mood entries\n  const { data: entries = [], isLoading } = useQuery({\n    queryKey: [\"/api/mood\", sessionId],\n    queryFn: async () => {\n      const url = sessionId ? `/api/mood?sessionId=${sessionId}` : \"/api/mood\";\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n  });\n\n  // Create mood entry mutation\n  const createMoodMutation = useMutation({\n    mutationFn: async (moodData: { moodScore: number; moodEmoji?: string; notes?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/mood\", {\n        sessionId: sessionId || null,\n        moodScore: moodData.moodScore,\n        moodEmoji: moodData.moodEmoji || null,\n        notes: moodData.notes || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mood\", sessionId] });\n      setSelectedMood(null);\n      setMoodScore(null);\n      setNotes(\"\");\n      toast({\n        title: \"Mood Recorded\",\n        description: \"Your mood has been recorded successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record mood. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleMoodSelect = (mood: { emoji: string; label: string; value: number }) => {\n    setSelectedMood(mood);\n    setMoodScore(mood.value);\n  };\n\n  const handleScoreSelect = (score: number) => {\n    setMoodScore(score);\n    // Clear emoji selection when manually selecting score\n    setSelectedMood(null);\n  };\n\n  const handleSaveMood = () => {\n    if (moodScore === null) {\n      toast({\n        title: \"Mood Required\",\n        description: \"Please select a mood or score before saving.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMoodMutation.mutate({\n      moodScore,\n      moodEmoji: selectedMood?.emoji,\n      notes: notes || undefined,\n    });\n  };\n\n  const formatDate = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + \" at \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getMoodColor = (score: number) => {\n    if (score >= 8) return \"text-green-600 bg-green-50 border-green-200\";\n    if (score >= 6) return \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n    if (score >= 4) return \"text-orange-600 bg-orange-50 border-orange-200\";\n    return \"text-red-600 bg-red-50 border-red-200\";\n  };\n\n  const getMoodTrend = () => {\n    if (entries.length < 2) return null;\n    const recent = entries.slice(0, 5);\n    const avg = recent.reduce((sum: number, entry: MoodEntry) => sum + entry.moodScore, 0) / recent.length;\n    const older = entries.slice(5, 10);\n    if (older.length === 0) return null;\n    const oldAvg = older.reduce((sum: number, entry: MoodEntry) => sum + entry.moodScore, 0) / older.length;\n    return avg - oldAvg;\n  };\n\n  const trend = getMoodTrend();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId || null}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Smile className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Mood Check-in</h1>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Mood Entry Form */}\n              <div>\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle>How are you feeling today?</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select an emoji that represents your mood or use the scale below\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Emoji Selection */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Choose your mood:</h3>\n                  <div className=\"grid grid-cols-4 gap-3\">\n                    {moodEmojis.map((mood, index) => (\n                      <Button\n                        key={index}\n                        variant={selectedMood?.emoji === mood.emoji ? \"default\" : \"outline\"}\n                        className=\"aspect-square flex flex-col p-2 h-auto\"\n                        onClick={() => handleMoodSelect(mood)}\n                      >\n                        <span className=\"text-2xl mb-1\">{mood.emoji}</span>\n                        <span className=\"text-xs\">{mood.label}</span>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Manual Score Selection */}\n                <div>\n                  <h3 className=\"font-medium mb-3\">Or rate your mood (1-10):</h3>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Very Low</span>\n                    <span className=\"text-sm text-muted-foreground\">Very High</span>\n                  </div>\n                  <div className=\"grid grid-cols-10 gap-1\">\n                    {[1,2,3,4,5,6,7,8,9,10].map((score) => (\n                      <Button\n                        key={score}\n                        variant={moodScore === score ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"aspect-square p-0 text-sm\"\n                        onClick={() => handleScoreSelect(score)}\n                      >\n                        {score}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Notes */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Additional notes (optional)</label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"What's contributing to how you feel today?\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button\n                  onClick={handleSaveMood}\n                  disabled={createMoodMutation.isPending || moodScore === null}\n                  className=\"w-full\"\n                >\n                  {createMoodMutation.isPending ? \"Saving...\" : \"Save Mood Check-in\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Mood History */}\n          <div>\n            {/* Trend Card */}\n            {trend !== null && (\n              <Card className=\"mb-6\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <TrendingUp className=\"w-5 h-5 text-primary mr-2\" />\n                      <span className=\"font-medium\">Recent Trend</span>\n                    </div>\n                    <div className={`text-sm font-medium ${trend > 0 ? 'text-green-600' : trend < 0 ? 'text-red-600' : 'text-gray-600'}`}>\n                      {trend > 0 ? '↗️ Improving' : trend < 0 ? '↘️ Declining' : '→ Stable'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Recent Entries */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Check-ins</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {isLoading ? (\n                    <div className=\"text-center py-4\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                    </div>\n                  ) : entries.length === 0 ? (\n                    <div className=\"text-center py-6\">\n                      <Smile className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">No mood entries yet. Start by recording your mood above!</p>\n                    </div>\n                  ) : (\n                    entries.slice(0, 10).map((entry: MoodEntry) => (\n                      <div key={entry.id} className={`border rounded-lg p-3 ${getMoodColor(entry.moodScore)}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {entry.moodEmoji && <span className=\"text-xl\">{entry.moodEmoji}</span>}\n                            <span className=\"font-medium\">Score: {entry.moodScore}/10</span>\n                          </div>\n                          <div className=\"flex items-center text-xs text-muted-foreground\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {formatDate(entry.timestamp || new Date())}\n                          </div>\n                        </div>\n                        {entry.notes && (\n                          <p className=\"text-sm\">{entry.notes}</p>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12141},"New-Eunoia/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"New-Eunoia/client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Heart, Brain, HandHeart, Leaf, Wind, Sun, Mountain, Users, Play } from \"lucide-react\";\nimport type { SessionSettings } from \"@/App\";\n\ninterface OnboardingProps {\n  onComplete: (settings: SessionSettings) => void;\n}\n\nconst therapistPersonalities = [\n  {\n    id: \"empathetic\",\n    name: \"Dr. Emma\",\n    title: \"Empathetic\",\n    description: \"Warm, understanding, and deeply compassionate. Focuses on emotional validation and support.\",\n    icon: Heart,\n    color: \"text-pink-500\"\n  },\n  {\n    id: \"analytical\",\n    name: \"Dr. Alex\",\n    title: \"Analytical\",\n    description: \"Logical, structured, and solution-focused. Emphasizes CBT techniques and practical strategies.\",\n    icon: Brain,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"supportive\",\n    name: \"Dr. Sam\",\n    title: \"Supportive\",\n    description: \"Encouraging, patient, and strength-focused. Helps build confidence and resilience.\",\n    icon: HandHeart,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"mindful\",\n    name: \"Dr. Maya\",\n    title: \"Mindful\",\n    description: \"Calm, present, and wisdom-oriented. Integrates mindfulness and meditation practices.\",\n    icon: Leaf,\n    color: \"text-teal-500\"\n  }\n];\n\nconst voiceOptions = [\n  { id: \"sarah\", name: \"Sarah\", description: \"Warm & Gentle\", gender: \"female\" },\n  { id: \"emily\", name: \"Emily\", description: \"Clear & Professional\", gender: \"female\" },\n  { id: \"anna\", name: \"Anna\", description: \"Soft & Caring\", gender: \"female\" },\n  { id: \"michael\", name: \"Michael\", description: \"Calm & Reassuring\", gender: \"male\" },\n  { id: \"david\", name: \"David\", description: \"Confident & Steady\", gender: \"male\" },\n  { id: \"james\", name: \"James\", description: \"Friendly & Approachable\", gender: \"male\" }\n];\n\nconst goalOptions = [\n  {\n    id: \"anxiety\",\n    title: \"Manage Anxiety\",\n    description: \"Learn coping strategies for anxious thoughts and feelings\",\n    icon: Wind,\n    color: \"text-blue-500\"\n  },\n  {\n    id: \"depression\",\n    title: \"Improve Mood\",\n    description: \"Work through depression and find ways to feel better\",\n    icon: Sun,\n    color: \"text-yellow-500\"\n  },\n  {\n    id: \"stress\",\n    title: \"Reduce Stress\",\n    description: \"Find healthy ways to manage life's pressures\",\n    icon: Mountain,\n    color: \"text-green-500\"\n  },\n  {\n    id: \"relationships\",\n    title: \"Relationship Issues\",\n    description: \"Improve communication and connection with others\",\n    icon: Users,\n    color: \"text-purple-500\"\n  },\n  {\n    id: \"self-esteem\",\n    title: \"Build Self-Esteem\",\n    description: \"Develop a more positive relationship with yourself\",\n    icon: Heart,\n    color: \"text-pink-500\"\n  },\n  {\n    id: \"general\",\n    title: \"General Support\",\n    description: \"Just need someone to talk to and process thoughts\",\n    icon: HandHeart,\n    color: \"text-teal-500\"\n  }\n];\n\nexport default function Onboarding({ onComplete }: OnboardingProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedPersonality, setSelectedPersonality] = useState(\"\");\n  const [selectedVoice, setSelectedVoice] = useState(\"\");\n  const [selectedGoals, setSelectedGoals] = useState<string[]>([]);\n\n  const nextStep = () => {\n    if (currentStep < 5) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePersonalitySelect = (personality: string) => {\n    setSelectedPersonality(personality);\n  };\n\n  const handleVoiceSelect = (voice: string) => {\n    setSelectedVoice(voice);\n  };\n\n  const handleGoalToggle = (goal: string) => {\n    setSelectedGoals(prev => \n      prev.includes(goal) \n        ? prev.filter(g => g !== goal)\n        : [...prev, goal]\n    );\n  };\n\n  const handleComplete = () => {\n    onComplete({\n      therapistPersonality: selectedPersonality,\n      selectedVoice: selectedVoice,\n      selectedGoals: selectedGoals\n    });\n  };\n\n  if (currentStep === 1) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-primary mb-2\">Welcome to Eunoia</h1>\n            <p className=\"text-lg text-muted-foreground\">Your AI-powered therapeutic companion</p>\n          </div>\n          <img \n            src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=300\" \n            alt=\"Peaceful meditation scene\" \n            className=\"rounded-2xl mb-8 w-full h-48 object-cover shadow-lg\"\n          />\n          <p className=\"text-muted-foreground mb-8\">\n            Let's personalize your therapeutic experience with a few quick questions.\n          </p>\n          <Button onClick={nextStep} className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\">\n            Get Started\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 2) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Choose Your Therapist Style</h2>\n            <p className=\"text-muted-foreground\">Select the personality that resonates most with you</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n            {therapistPersonalities.map((personality) => {\n              const IconComponent = personality.icon;\n              return (\n                <Card\n                  key={personality.id}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedPersonality === personality.id ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handlePersonalitySelect(personality.id)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <IconComponent className={`w-8 h-8 ${personality.color} mx-auto mb-3`} />\n                    <h3 className=\"text-xl font-semibold mb-2\">{personality.name} - {personality.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{personality.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={!selectedPersonality}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 3) {\n    const femaleVoices = voiceOptions.filter(v => v.gender === \"female\");\n    const maleVoices = voiceOptions.filter(v => v.gender === \"male\");\n\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">Choose Your Voice</h2>\n            <p className=\"text-muted-foreground\">Select the voice that feels most comfortable for you</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">Female Voices</h3>\n              <div className=\"space-y-3\">\n                {femaleVoices.map((voice) => (\n                  <Card\n                    key={voice.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedVoice === voice.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => handleVoiceSelect(voice.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{voice.name} - {voice.description}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/90\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 text-center\">Male Voices</h3>\n              <div className=\"space-y-3\">\n                {maleVoices.map((voice) => (\n                  <Card\n                    key={voice.id}\n                    className={`cursor-pointer transition-all hover:shadow-lg ${\n                      selectedVoice === voice.id ? 'ring-2 ring-primary' : ''\n                    }`}\n                    onClick={() => handleVoiceSelect(voice.id)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{voice.name} - {voice.description}</span>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary/90\">\n                          <Play className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={!selectedVoice}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 4) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">What brings you here today?</h2>\n            <p className=\"text-muted-foreground\">Select your primary goals for this session</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n            {goalOptions.map((goal) => {\n              const IconComponent = goal.icon;\n              return (\n                <Card\n                  key={goal.id}\n                  className={`cursor-pointer transition-all hover:shadow-lg ${\n                    selectedGoals.includes(goal.id) ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handleGoalToggle(goal.id)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <IconComponent className={`w-8 h-8 ${goal.color} mx-auto mb-3`} />\n                    <h3 className=\"text-lg font-semibold mb-2\">{goal.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\">{goal.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              onClick={nextStep}\n              disabled={selectedGoals.length === 0}\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-3 rounded-full font-semibold\"\n            >\n              Continue\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 5) {\n    const selectedPersonalityData = therapistPersonalities.find(p => p.id === selectedPersonality);\n    const selectedVoiceData = voiceOptions.find(v => v.id === selectedVoice);\n    const selectedGoalData = goalOptions.filter(g => selectedGoals.includes(g.id));\n\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral flex items-center justify-center p-6\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-2\">You're all set!</h2>\n            <p className=\"text-muted-foreground mb-6\">Here's your personalized setup:</p>\n            \n            <Card className=\"shadow-lg\">\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Therapist:</span>\n                  <span className=\"font-semibold\">{selectedPersonalityData?.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Voice:</span>\n                  <span className=\"font-semibold\">{selectedVoiceData?.name}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Focus:</span>\n                  <span className=\"font-semibold\">{selectedGoalData.map(g => g.title).join(', ')}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <Button\n            onClick={handleComplete}\n            className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 rounded-full font-semibold text-lg\"\n          >\n            Start Your Session\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n","size_bytes":13768},"New-Eunoia/client/src/pages/session-summaries.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  Calendar, \n  Clock, \n  Target, \n  Lightbulb, \n  CheckSquare,\n  FileText,\n  User,\n  Menu\n} from \"lucide-react\";\nimport type { Session } from \"@shared/schema\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface SessionSummariesPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function SessionSummariesPage({ onBack }: SessionSummariesPageProps) {\n  const { data: sessions = [], isLoading, error } = useQuery<Session[]>({\n    queryKey: [\"/api/sessions/summaries\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                  <div className=\"flex gap-2\">\n                    <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded w-24\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-neutral p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-8\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n          </div>\n          \n          <Card className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"p-6 text-center\">\n              <p className=\"text-red-600\">Failed to load session summaries. Please try again.</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const completedSessions = sessions.filter(session => session.summary);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center gap-4 mb-8\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-3xl font-bold text-primary\">Session Summaries</h1>\n        </div>\n\n        {completedSessions.length === 0 ? (\n          <Card className=\"border-dashed border-2 border-gray-200\">\n            <CardContent className=\"p-12 text-center\">\n              <FileText className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">No Session Summaries Yet</h3>\n              <p className=\"text-gray-500 mb-6\">\n                Complete a therapy session to see detailed summaries with key topics, insights, and recommendations.\n              </p>\n              <Button onClick={onBack} variant=\"outline\">\n                Start a New Session\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {completedSessions.map((session) => (\n              <Card key={session.id} className=\"shadow-lg\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-xl\">\n                      Session {session.id}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {session.startTime ? new Date(session.startTime).toLocaleDateString() : 'Unknown date'}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        {session.duration ? `${Math.floor(session.duration / 60)}m ${session.duration % 60}s` : 'Unknown duration'}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <User className=\"w-4 h-4\" />\n                        {session.therapistPersonality || 'Unknown therapist'}\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-6\">\n                  {/* Session Summary */}\n                  {session.summary && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4\" />\n                        Session Overview\n                      </h4>\n                      <p className=\"text-muted-foreground leading-relaxed bg-gray-50 p-4 rounded-lg\">\n                        {session.summary}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Key Topics */}\n                  {session.keyTopics && Array.isArray(session.keyTopics) && session.keyTopics.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-green-600\" />\n                        Key Topics Discussed\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.keyTopics.map((topic, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-green-50 text-green-700 border-green-200\">\n                            {topic}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* CBT Techniques */}\n                  {session.cbtTechniques && Array.isArray(session.cbtTechniques) && session.cbtTechniques.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Lightbulb className=\"w-4 h-4 text-purple-600\" />\n                        CBT Techniques Used\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.cbtTechniques.map((technique, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                            {technique}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Homework & Next Steps */}\n                  {session.homework && Array.isArray(session.homework) && session.homework.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <CheckSquare className=\"w-4 h-4 text-orange-600\" />\n                        Homework & Next Steps\n                      </h4>\n                      <ul className=\"space-y-2\">\n                        {session.homework.map((task, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <CheckSquare className=\"w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-muted-foreground\">{task}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {/* Therapist Notes */}\n                  {session.therapistNotes && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                        <FileText className=\"w-4 h-4 text-blue-600\" />\n                        Therapist Notes\n                      </h4>\n                      <p className=\"text-muted-foreground bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                        {session.therapistNotes}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Goals Progress */}\n                  {session.selectedGoals && Array.isArray(session.selectedGoals) && session.selectedGoals.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-blue-600\" />\n                        Session Goals\n                      </h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {session.selectedGoals.map((goal, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"border-blue-200 text-blue-700\">\n                            {goal}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10139},"New-Eunoia/client/src/pages/session.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport Sidebar from \"@/components/sidebar\";\nimport VoiceInterface from \"@/components/voice-interface\";\nimport ChatInterface from \"@/components/chat-interface\";\nimport CrisisModal from \"@/components/crisis-modal\";\nimport SessionSummaryModal from \"@/components/session-summary-modal\";\nimport { detectCrisisKeywords, shouldTriggerCrisisIntervention } from \"@/lib/crisis-detection\";\nimport type { SessionSettings, CurrentPage } from \"@/App\";\nimport type { Session, Message } from \"@shared/schema\";\n\ninterface SessionPageProps {\n  sessionId: number;\n  sessionSettings: SessionSettings;\n  onPageChange: (page: CurrentPage) => void;\n  onSessionEnd: () => void;\n}\n\nexport default function SessionPage({ sessionId, sessionSettings, onPageChange, onSessionEnd }: SessionPageProps) {\n  const [isVoiceMode, setIsVoiceMode] = useState(true);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [sessionTimer, setSessionTimer] = useState(0);\n  const [showCrisisModal, setShowCrisisModal] = useState(false);\n  const [detectedKeywords, setDetectedKeywords] = useState<string[]>([]);\n  const [showSessionSummary, setShowSessionSummary] = useState(false);\n  const [sessionEnded, setSessionEnded] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Timer effect\n  useEffect(() => {\n    if (sessionEnded) return;\n\n    const timer = setInterval(() => {\n      setSessionTimer(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [sessionEnded]);\n\n  // Get session data\n  const { data: session } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/sessions/${sessionId}`);\n      return response.json();\n    },\n    enabled: !!sessionId,\n  });\n\n  // Get messages\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/sessions\", sessionId, \"messages\"],\n    queryFn: async () => {\n      if (!session?.messages) return [];\n      return session.messages;\n    },\n    enabled: !!session,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ content, isVoice }: { content: string; isVoice: boolean }) => {\n      // Check for crisis keywords before sending\n      const keywords = detectCrisisKeywords(content);\n      if (keywords.length > 0) {\n        setDetectedKeywords(keywords);\n        if (shouldTriggerCrisisIntervention(content)) {\n          setShowCrisisModal(true);\n        }\n      }\n\n      const response = await apiRequest(\"POST\", `/api/sessions/${sessionId}/messages`, {\n        content,\n        isVoice,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\", sessionId, \"messages\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error sending message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"PATCH\", `/api/sessions/${sessionId}/end`);\n      return response.json();\n    },\n    onSuccess: () => {\n      setSessionEnded(true);\n      setShowSessionSummary(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\", sessionId] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error ending session\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (content: string, isVoice: boolean = false) => {\n    if (!content.trim()) return;\n    sendMessageMutation.mutate({ content, isVoice });\n  };\n\n  const handleEndSession = () => {\n    endSessionMutation.mutate();\n  };\n\n  const handleSessionSummaryClose = () => {\n    setShowSessionSummary(false);\n    onSessionEnd();\n  };\n\n  const handleViewAllSummaries = () => {\n    setShowSessionSummary(false);\n    onPageChange('session-summaries');\n  };\n\n  const handleReturnHome = () => {\n    setShowSessionSummary(false);\n    onSessionEnd();\n  };\n\n  const getTherapistName = () => {\n    const personalities: Record<string, string> = {\n      empathetic: \"Dr. Emma\",\n      analytical: \"Dr. Alex\",\n      supportive: \"Dr. Sam\", \n      mindful: \"Dr. Maya\"\n    };\n    return personalities[sessionSettings.therapistPersonality] || \"Dr. Emma\";\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage=\"session\"\n          onEndSession={handleEndSession}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Header */}\n          <div className=\"bg-white shadow-sm border-b border-border p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsSidebarOpen(true)}\n                >\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n                \n                <h1 className=\"text-xl font-bold text-primary\">Session with {getTherapistName()}</h1>\n              </div>\n              \n              <div className=\"flex items-center space-x-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm text-muted-foreground\">Communication Mode:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`text-sm ${!isVoiceMode ? 'text-primary' : 'text-muted-foreground'}`}>\n                      Text\n                    </span>\n                    <Switch\n                      checked={isVoiceMode}\n                      onCheckedChange={setIsVoiceMode}\n                    />\n                    <span className={`text-sm ${isVoiceMode ? 'text-primary' : 'text-muted-foreground'}`}>\n                      Voice\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <span>Session Time:</span>\n                  <span className=\"font-mono\">{formatTime(sessionTimer)}</span>\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleEndSession}\n                  disabled={endSessionMutation.isPending}\n                >\n                  {endSessionMutation.isPending ? \"Ending...\" : \"End Session\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Interface */}\n          <div className=\"flex-1 p-6\">\n            {isVoiceMode ? (\n              <VoiceInterface\n                therapistName={getTherapistName()}\n                onSendMessage={handleSendMessage}\n                messages={messages}\n                isLoading={sendMessageMutation.isPending}\n                sessionEnded={sessionEnded}\n              />\n            ) : (\n              <ChatInterface\n                therapistName={getTherapistName()}\n                onSendMessage={handleSendMessage}\n                messages={messages}\n                isLoading={sendMessageMutation.isPending}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Crisis Modal */}\n      <CrisisModal\n        isOpen={showCrisisModal}\n        onClose={() => setShowCrisisModal(false)}\n        detectedKeywords={detectedKeywords}\n      />\n\n      {/* Session Summary Modal */}\n      <SessionSummaryModal\n        isOpen={showSessionSummary}\n        onClose={handleSessionSummaryClose}\n        sessionId={sessionId}\n        therapistName={getTherapistName()}\n        duration={sessionTimer}\n        onViewAllSummaries={handleViewAllSummaries}\n        onReturnHome={handleReturnHome}\n      />\n    </div>\n  );\n}","size_bytes":8979},"New-Eunoia/client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Settings, User, Volume2, Target, Menu } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage, SessionSettings } from \"@/App\";\n\ninterface SettingsPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n  sessionSettings: SessionSettings | null;\n  onUpdateSettings: (settings: SessionSettings) => void;\n}\n\nconst therapistPersonalities = [\n  {\n    id: \"empathetic\",\n    name: \"Dr. Emma\",\n    description: \"Warm, understanding, and focuses on emotional support\"\n  },\n  {\n    id: \"analytical\",\n    name: \"Dr. Alex\",\n    description: \"Logical, structured, and helps with problem-solving\"\n  },\n  {\n    id: \"supportive\",\n    name: \"Dr. Sam\",\n    description: \"Encouraging, motivational, and strength-focused\"\n  },\n  {\n    id: \"mindful\",\n    name: \"Dr. Maya\",\n    description: \"Calm, present-focused, and mindfulness-oriented\"\n  }\n];\n\nconst voiceOptions = [\n  { id: \"alloy\", name: \"Alloy\", description: \"Natural and balanced\" },\n  { id: \"echo\", name: \"Echo\", description: \"Warm and engaging\" },\n  { id: \"fable\", name: \"Fable\", description: \"Calm and soothing\" },\n  { id: \"onyx\", name: \"Onyx\", description: \"Deep and authoritative\" },\n  { id: \"nova\", name: \"Nova\", description: \"Bright and energetic\" },\n  { id: \"shimmer\", name: \"Shimmer\", description: \"Gentle and friendly\" }\n];\n\nconst goalOptions = [\n  \"Reduce anxiety and stress\",\n  \"Improve mood and emotional regulation\",\n  \"Develop coping strategies\",\n  \"Better sleep habits\",\n  \"Increase self-confidence\",\n  \"Manage depression symptoms\",\n  \"Improve relationships\",\n  \"Work through trauma\",\n  \"Manage anger\",\n  \"Build mindfulness practices\",\n  \"Career and life transitions\",\n  \"Grief and loss support\"\n];\n\nexport default function SettingsPage({ \n  onBack, \n  onPageChange, \n  currentPage, \n  sessionId, \n  sessionSettings,\n  onUpdateSettings \n}: SettingsPageProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [tempSettings, setTempSettings] = useState<SessionSettings>(\n    sessionSettings || {\n      therapistPersonality: \"empathetic\",\n      selectedVoice: \"alloy\",\n      selectedGoals: []\n    }\n  );\n\n  const handlePersonalityChange = (personality: string) => {\n    setTempSettings(prev => ({ ...prev, therapistPersonality: personality }));\n  };\n\n  const handleVoiceChange = (voice: string) => {\n    setTempSettings(prev => ({ ...prev, selectedVoice: voice }));\n  };\n\n  const handleGoalToggle = (goal: string) => {\n    setTempSettings(prev => ({\n      ...prev,\n      selectedGoals: prev.selectedGoals.includes(goal)\n        ? prev.selectedGoals.filter(g => g !== goal)\n        : [...prev.selectedGoals, goal]\n    }));\n  };\n\n  const handleSaveSettings = () => {\n    onUpdateSettings(tempSettings);\n    onBack();\n  };\n\n  const selectedPersonality = therapistPersonalities.find(p => p.id === tempSettings.therapistPersonality);\n  const selectedVoice = voiceOptions.find(v => v.id === tempSettings.selectedVoice);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-neutral\">\n      <div className=\"flex h-screen\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <Settings className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Settings</h1>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Therapist Personality */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    Therapist Personality\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose the therapist personality that best suits your needs\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Select value={tempSettings.therapistPersonality} onValueChange={handlePersonalityChange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {therapistPersonalities.map((personality) => (\n                        <SelectItem key={personality.id} value={personality.id}>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">{personality.name}</span>\n                            <span className=\"text-sm text-muted-foreground\">{personality.description}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedPersonality && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm\"><strong>{selectedPersonality.name}:</strong> {selectedPersonality.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Voice Selection */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Volume2 className=\"w-5 h-5 mr-2\" />\n                    Voice Selection\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose the voice for your therapy sessions\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Select value={tempSettings.selectedVoice} onValueChange={handleVoiceChange}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {voiceOptions.map((voice) => (\n                        <SelectItem key={voice.id} value={voice.id}>\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">{voice.name}</span>\n                            <span className=\"text-sm text-muted-foreground\">{voice.description}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {selectedVoice && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm\"><strong>{selectedVoice.name}:</strong> {selectedVoice.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Therapy Goals */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Target className=\"w-5 h-5 mr-2\" />\n                    Therapy Goals\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Select the areas you'd like to focus on (choose multiple)\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {goalOptions.map((goal) => (\n                      <div\n                        key={goal}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          tempSettings.selectedGoals.includes(goal)\n                            ? 'border-primary bg-primary/10'\n                            : 'border-border hover:border-primary/50'\n                        }`}\n                        onClick={() => handleGoalToggle(goal)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">{goal}</span>\n                          {tempSettings.selectedGoals.includes(goal) && (\n                            <Badge variant=\"default\" className=\"ml-2\">Selected</Badge>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {tempSettings.selectedGoals.length > 0 && (\n                    <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                      <p className=\"text-sm font-medium mb-2\">Selected Goals:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {tempSettings.selectedGoals.map((goal) => (\n                          <Badge key={goal} variant=\"secondary\">{goal}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Save Button */}\n              <div className=\"flex justify-end gap-4\">\n                <Button variant=\"outline\" onClick={onBack}>\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveSettings}>\n                  Save Settings\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10453},"EunoiaFirst/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"EunoiaFirst/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"EunoiaFirst/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"EunoiaFirst/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"EunoiaFirst/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"EunoiaFirst/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"EunoiaFirst/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"EunoiaFirst/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"EunoiaFirst/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"EunoiaFirst/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"EunoiaFirst/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"EunoiaFirst/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"EunoiaFirst/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"EunoiaFirst/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"EunoiaFirst/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"EunoiaFirst/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"EunoiaFirst/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"EunoiaFirst/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"EunoiaFirst/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"EunoiaFirst/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"EunoiaFirst/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"EunoiaFirst/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"EunoiaFirst/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"EunoiaFirst/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"EunoiaFirst/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"EunoiaFirst/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"EunoiaFirst/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"EunoiaFirst/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"EunoiaFirst/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"EunoiaFirst/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"EunoiaFirst/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"EunoiaFirst/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"EunoiaFirst/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"EunoiaFirst/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"EunoiaFirst/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"EunoiaFirst/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"EunoiaFirst/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"EunoiaFirst/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"EunoiaFirst/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"EunoiaFirst/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"EunoiaFirst/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"EunoiaFirst/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"EunoiaFirst/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"EunoiaFirst/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"EunoiaFirst/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"EunoiaFirst/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"EunoiaFirst/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"New-Eunoia/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"New-Eunoia/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"New-Eunoia/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"New-Eunoia/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"New-Eunoia/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"New-Eunoia/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"New-Eunoia/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"New-Eunoia/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"New-Eunoia/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"New-Eunoia/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"New-Eunoia/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"New-Eunoia/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"New-Eunoia/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"New-Eunoia/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"New-Eunoia/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"New-Eunoia/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"New-Eunoia/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"New-Eunoia/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"New-Eunoia/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"New-Eunoia/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"New-Eunoia/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"New-Eunoia/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"New-Eunoia/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"New-Eunoia/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"New-Eunoia/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"New-Eunoia/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"New-Eunoia/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"New-Eunoia/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"New-Eunoia/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"New-Eunoia/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"New-Eunoia/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"New-Eunoia/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"New-Eunoia/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"New-Eunoia/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"New-Eunoia/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"New-Eunoia/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"New-Eunoia/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"New-Eunoia/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"New-Eunoia/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"New-Eunoia/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"New-Eunoia/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"New-Eunoia/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"New-Eunoia/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"New-Eunoia/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"New-Eunoia/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"New-Eunoia/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"New-Eunoia/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# New-Eunoia - UI Version Without AI\n\nThis is a clean version of the Eunoia therapy application with all UI components but without AI functionality. The chat interface is preserved but messages don't generate AI responses yet.\n\n## Features Preserved\n\n- Complete UI interface with chat system\n- Session management\n- Voice interface components (UI only)\n- Crisis detection modal (UI only)\n- Sidebar navigation\n- All pages (home, session, journal, mood, etc.)\n- Session summaries\n- CBT tools interface\n\n## Features Removed\n\n- AI/ML API integration\n- Automatic AI responses in chat\n- Smart crisis detection\n- AI-powered session summaries\n\n## Running the Application\n\nFrom the New-Eunoia directory:\n\n```bash\nnpm install\nnpm run dev\n```\n\nOr use the provided script:\n\n```bash\n./start.sh\n```\n\nThe application will start on port 5000 by default.\n\n## Next Steps\n\nYou can now integrate your own chat response system by modifying:\n\n1. `server/routes.ts` - Add your response logic in the message endpoint\n2. `client/src/components/chat-interface.tsx` - Modify if needed for your response format\n3. `client/src/pages/session.tsx` - Update session handling as needed\n\nThe entire UI framework is ready for your custom implementation!","size_bytes":1217},"start.sh":{"content":"#!/bin/bash\ncd \"$(dirname \"$0\")\"\nnpm run dev","size_bytes":44},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false }\n});\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":428},"shared/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"./schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nconst pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false }\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":414},"migrations/relations.ts":{"content":"import { relations } from \"drizzle-orm/relations\";\nimport {  } from \"./schema\";\n\n","size_bytes":81},"migrations/schema.ts":{"content":"import { pgTable, serial, integer, json, text, timestamp, boolean, unique } from \"drizzle-orm/pg-core\"\nimport { sql } from \"drizzle-orm\"\n\n\n\nexport const crisisEvents = pgTable(\"crisis_events\", {\n\tid: serial().primaryKey().notNull(),\n\tsessionId: integer(\"session_id\").notNull(),\n\tdetectedKeywords: json(\"detected_keywords\").notNull(),\n\tuserMessage: text(\"user_message\").notNull(),\n\ttimestamp: timestamp({ mode: 'string' }).defaultNow(),\n\tactionTaken: text(\"action_taken\"),\n});\n\nexport const journalEntries = pgTable(\"journal_entries\", {\n\tid: serial().primaryKey().notNull(),\n\tsessionId: integer(\"session_id\"),\n\ttitle: text(),\n\tcontent: text().notNull(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n\tid: serial().primaryKey().notNull(),\n\tsessionId: integer(\"session_id\").notNull(),\n\tcontent: text().notNull(),\n\tisUser: boolean(\"is_user\").notNull(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const moodEntries = pgTable(\"mood_entries\", {\n\tid: serial().primaryKey().notNull(),\n\tsessionId: integer(\"session_id\"),\n\tmoodScore: integer(\"mood_score\").notNull(),\n\tmoodEmoji: text(\"mood_emoji\"),\n\tnotes: text(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n\tid: serial().primaryKey().notNull(),\n\tuserId: integer(\"user_id\"),\n\ttherapistPersonality: text(\"therapist_personality\").notNull(),\n\tvoiceEnabled: boolean(\"voice_enabled\").default(false),\n\tgoals: json().default([]).notNull(),\n\tstatus: text().default('active').notNull(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n\tendedAt: timestamp(\"ended_at\", { mode: 'string' }),\n\tdurationSeconds: integer(\"duration_seconds\"),\n\tsummary: text(),\n});\n\nexport const users = pgTable(\"users\", {\n\tid: serial().primaryKey().notNull(),\n\tusername: text().notNull(),\n\tpassword: text().notNull(),\n\tcreatedAt: timestamp(\"created_at\", { mode: 'string' }).defaultNow(),\n}, (table) => [\n\tunique(\"users_username_unique\").on(table.username),\n]);\n","size_bytes":2081},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useEffect } from \"react\";\n\nexport interface User {\n  id: number;\n  username: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n    refetchOnMount: true, // Always refetch when component mounts\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      // Clear all cached data on logout\n      queryClient.clear();\n      // Clear login state from localStorage\n      localStorage.removeItem(\"eunoia-auth-state\");\n      // Immediately redirect to sign-in without reload\n      window.location.href = \"/\";\n    },\n  });\n\n  // Save authentication state to localStorage when user data changes\n  useEffect(() => {\n    if (user) {\n      localStorage.setItem(\"eunoia-auth-state\", JSON.stringify({\n        isLoggedIn: true,\n        userId: user.id,\n        username: user.username,\n        timestamp: Date.now()\n      }));\n    } else if (!isLoading) {\n      // Only clear if we're not loading (to avoid clearing during initial load)\n      localStorage.removeItem(\"eunoia-auth-state\");\n    }\n  }, [user, isLoading]);\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  return {\n    user: user as User | undefined,\n    isLoading,\n    isAuthenticated: !!user && !error,\n    logout,\n    isLoggingOut: logoutMutation.isPending,\n    refetchUser: refetch,\n  };\n}","size_bytes":1763},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { EyeIcon, EyeOffIcon, LogIn, UserPlus } from \"lucide-react\";\n\ninterface LoginPageProps {\n  onLoginSuccess: () => void;\n  onSwitchToSignup: () => void;\n}\n\nexport default function LoginPage({ onLoginSuccess, onSwitchToSignup }: LoginPageProps) {\n  const [usernameOrEmail, setUsernameOrEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { usernameOrEmail: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Welcome back!\",\n        description: data.message || \"Successfully logged in\",\n      });\n      onLoginSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!usernameOrEmail.trim() || !password.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both username/email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    loginMutation.mutate({ usernameOrEmail: usernameOrEmail.trim(), password });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <LogIn className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n          <CardDescription>\n            Sign in to your Eunoia account to continue your mental health journey\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"usernameOrEmail\">Username or Email</Label>\n              <Input\n                id=\"usernameOrEmail\"\n                type=\"text\"\n                placeholder=\"Enter your username or email\"\n                value={usernameOrEmail}\n                onChange={(e) => setUsernameOrEmail(e.target.value)}\n                required\n                autoComplete=\"username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  autoComplete=\"current-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOffIcon className=\"h-4 w-4\" />\n                  ) : (\n                    <EyeIcon className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  Signing In...\n                </div>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto font-semibold\"\n                onClick={onSwitchToSignup}\n              >\n                Create Account\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5236},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { EyeIcon, EyeOffIcon, UserPlus, CheckCircle } from \"lucide-react\";\n\ninterface SignupPageProps {\n  onSignupSuccess: () => void;\n  onSwitchToLogin: () => void;\n}\n\nexport default function SignupPage({ onSignupSuccess, onSwitchToLogin }: SignupPageProps) {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const signupMutation = useMutation({\n    mutationFn: async (credentials: { username: string; email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signup\", credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Account Created!\",\n        description: data.message || \"Welcome to Eunoia! You're now logged in.\",\n      });\n      onSignupSuccess();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!username.trim() || !email.trim() || !password.trim() || !confirmPassword.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    signupMutation.mutate({ username: username.trim(), email: email.trim(), password });\n  };\n\n  const isPasswordValid = password.length >= 6;\n  const doPasswordsMatch = password === confirmPassword && confirmPassword.length > 0;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <UserPlus className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Create Account</CardTitle>\n          <CardDescription>\n            Join Eunoia and start your personalized mental health journey today\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Choose a username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                autoComplete=\"username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                autoComplete=\"email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Create a password (min 6 characters)\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  autoComplete=\"new-password\"\n                  className={password.length > 0 ? (isPasswordValid ? \"border-green-500\" : \"border-red-500\") : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOffIcon className=\"h-4 w-4\" />\n                  ) : (\n                    <EyeIcon className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {password.length > 0 && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  {isPasswordValid ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-green-600\">Password strength: Good</span>\n                    </>\n                  ) : (\n                    <span className=\"text-red-600\">Password must be at least 6 characters</span>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  placeholder=\"Confirm your password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  autoComplete=\"new-password\"\n                  className={confirmPassword.length > 0 ? (doPasswordsMatch ? \"border-green-500\" : \"border-red-500\") : \"\"}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOffIcon className=\"h-4 w-4\" />\n                  ) : (\n                    <EyeIcon className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n              {confirmPassword.length > 0 && (\n                <div className=\"flex items-center gap-2 text-sm\">\n                  {doPasswordsMatch ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-green-600\">Passwords match</span>\n                    </>\n                  ) : (\n                    <span className=\"text-red-600\">Passwords do not match</span>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={signupMutation.isPending || !isPasswordValid || !doPasswordsMatch}\n            >\n              {signupMutation.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  Creating Account...\n                </div>\n              ) : (\n                \"Create Account\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                className=\"p-0 h-auto font-semibold\"\n                onClick={onSwitchToLogin}\n              >\n                Sign In\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9148},"client/src/pages/account.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/contexts/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { \n  ArrowLeft, \n  User, \n  Lock, \n  Download, \n  Trash2, \n  Camera, \n  Mail, \n  Shield,\n  Bell,\n  Moon,\n  Globe,\n  Menu,\n  Settings\n} from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport Sidebar from \"@/components/sidebar\";\nimport type { CurrentPage } from \"@/App\";\n\ninterface AccountPageProps {\n  onBack: () => void;\n  onPageChange: (page: CurrentPage) => void;\n  currentPage: CurrentPage;\n  sessionId: number | null;\n}\n\nexport default function AccountPage({ onBack, onPageChange, currentPage, sessionId }: AccountPageProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [showPasswordForm, setShowPasswordForm] = useState(false);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [deletePassword, setDeletePassword] = useState(\"\");\n  const [profileData, setProfileData] = useState({ username: \"\", email: \"\", profilePic: \"\" });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { theme, setTheme, isDark } = useTheme();\n  const { logout, isLoggingOut } = useAuth();\n\n  // Get current user data\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  useEffect(() => {\n    if (user) {\n      setProfileData({\n        username: (user as any).username || \"\",\n        email: (user as any).email || \"\",\n        profilePic: (user as any).profilePic || \"\"\n      });\n    }\n  }, [user]);\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { currentPassword: string; newPassword: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/change-password\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Updated\",\n        description: \"Your password has been changed successfully.\",\n      });\n      setShowPasswordForm(false);\n      setCurrentPassword(\"\");\n      setNewPassword(\"\");\n      setConfirmPassword(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Password Change Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Profile picture upload mutation\n  const uploadProfilePicMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('profilePic', file);\n      \n      const response = await fetch('/api/auth/upload-profile-pic', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Profile Picture Updated\",\n        description: \"Your profile picture has been updated successfully.\",\n      });\n      setProfileData(prev => ({ ...prev, profilePic: data.profilePic }));\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { username: string; email: string; profilePic?: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/update-profile\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Profile Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download data mutation\n  const downloadDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/auth/download-data\");\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'my-eunoia-data.json';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Data Downloaded\",\n        description: \"Your account data has been downloaded successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download your data. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete account mutation\n  const deleteAccountMutation = useMutation({\n    mutationFn: async (password: string) => {\n      const response = await apiRequest(\"DELETE\", \"/api/auth/delete-account\", { password });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account Deleted\",\n        description: \"Your account has been permanently deleted.\",\n      });\n      window.location.reload(); // This will redirect to login\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Account Deletion Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePasswordChange = () => {\n    if (!currentPassword || !newPassword || !confirmPassword) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all password fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"New passwords do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    changePasswordMutation.mutate({ currentPassword, newPassword });\n  };\n\n  const handleProfileUpdate = () => {\n    if (!profileData.username || !profileData.email) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Username and email are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handleProfilePicUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please select an image smaller than 5MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please select a valid image file (JPEG, PNG, GIF, or WebP).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadProfilePicMutation.mutate(file);\n  };\n\n  const handleDeleteAccount = () => {\n    if (!deletePassword) {\n      toast({\n        title: \"Password Required\",\n        description: \"Please enter your password to confirm account deletion.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    deleteAccountMutation.mutate(deletePassword);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"w-8 h-8 border-4 border-primary/30 border-t-primary rounded-full animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-gradient-neutral\">\n      <div className=\"flex h-full\">\n        {/* Sidebar */}\n        <Sidebar \n          isOpen={isSidebarOpen}\n          onClose={() => setIsSidebarOpen(false)}\n          sessionId={sessionId}\n          onPageChange={onPageChange}\n          currentPage={currentPage}\n        />\n        \n        {/* Main Content */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <div className=\"flex items-center mb-8\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"mr-4\"\n              >\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onBack}\n                className=\"mr-4\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <div className=\"flex items-center\">\n                <User className=\"w-6 h-6 text-primary mr-3\" />\n                <h1 className=\"text-3xl font-bold text-foreground\">Account Settings</h1>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              {/* Profile Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"w-5 h-5 mr-2\" />\n                    Profile Information\n                  </CardTitle>\n                  <CardDescription>\n                    Update your personal information and profile picture\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-4 mb-4\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                      {profileData.profilePic ? (\n                        <img src={profileData.profilePic} alt=\"Profile\" className=\"w-full h-full rounded-full object-cover\" />\n                      ) : (\n                        <User className=\"w-8 h-8 text-white\" />\n                      )}\n                    </div>\n                    <div>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleProfilePicUpload}\n                        className=\"hidden\"\n                        id=\"profile-pic-upload\"\n                      />\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => document.getElementById('profile-pic-upload')?.click()}\n                        disabled={uploadProfilePicMutation.isPending}\n                      >\n                        <Camera className=\"w-4 h-4 mr-2\" />\n                        {uploadProfilePicMutation.isPending ? \"Uploading...\" : \"Change Photo\"}\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"username\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        value={profileData.username}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, username: e.target.value }))}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={profileData.email}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n                  \n                  <Button \n                    onClick={handleProfileUpdate}\n                    disabled={updateProfileMutation.isPending}\n                  >\n                    {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Security */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Lock className=\"w-5 h-5 mr-2\" />\n                    Security\n                  </CardTitle>\n                  <CardDescription>\n                    Manage your password and security settings\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {!showPasswordForm ? (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setShowPasswordForm(true)}\n                    >\n                      <Lock className=\"w-4 h-4 mr-2\" />\n                      Change Password\n                    </Button>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"currentPassword\">Current Password</Label>\n                        <Input\n                          id=\"currentPassword\"\n                          type=\"password\"\n                          value={currentPassword}\n                          onChange={(e) => setCurrentPassword(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"newPassword\">New Password</Label>\n                        <Input\n                          id=\"newPassword\"\n                          type=\"password\"\n                          value={newPassword}\n                          onChange={(e) => setNewPassword(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                        <Input\n                          id=\"confirmPassword\"\n                          type=\"password\"\n                          value={confirmPassword}\n                          onChange={(e) => setConfirmPassword(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          onClick={handlePasswordChange}\n                          disabled={changePasswordMutation.isPending}\n                        >\n                          {changePasswordMutation.isPending ? \"Updating...\" : \"Update Password\"}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => {\n                            setShowPasswordForm(false);\n                            setCurrentPassword(\"\");\n                            setNewPassword(\"\");\n                            setConfirmPassword(\"\");\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Preferences */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Bell className=\"w-5 h-5 mr-2\" />\n                    Preferences\n                  </CardTitle>\n                  <CardDescription>\n                    Customize your app experience\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Email Notifications</Label>\n                      <p className=\"text-sm text-muted-foreground\">Receive notifications about your sessions</p>\n                    </div>\n                    <Switch />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Dark Mode</Label>\n                      <p className=\"text-sm text-muted-foreground\">Toggle dark mode theme</p>\n                    </div>\n                    <Switch \n                      checked={isDark}\n                      onCheckedChange={(checked) => setTheme(checked ? \"dark\" : \"light\")}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Data Analytics</Label>\n                      <p className=\"text-sm text-muted-foreground\">Help improve our service with anonymous usage data</p>\n                    </div>\n                    <Switch />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Privacy & Data */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"w-5 h-5 mr-2\" />\n                    Privacy & Data\n                  </CardTitle>\n                  <CardDescription>\n                    Manage your data and privacy settings\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Download Your Data</Label>\n                      <p className=\"text-sm text-muted-foreground\">Get a copy of all your account data</p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => downloadDataMutation.mutate()}\n                      disabled={downloadDataMutation.isPending}\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      {downloadDataMutation.isPending ? \"Downloading...\" : \"Download\"}\n                    </Button>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Account Status</Label>\n                      <p className=\"text-sm text-muted-foreground\">Your account is active</p>\n                    </div>\n                    <Badge variant=\"default\">Active</Badge>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Account Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Settings className=\"w-5 h-5 mr-2\" />\n                    Account Actions\n                  </CardTitle>\n                  <CardDescription>\n                    Manage your account session and data\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Button \n                    variant=\"outline\" \n                    onClick={logout}\n                    disabled={isLoggingOut}\n                    className=\"w-full h-12 text-base font-medium border-2 hover:bg-muted/50 transition-all duration-200\"\n                  >\n                    {isLoggingOut ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Logging out...</span>\n                      </div>\n                    ) : (\n                      \"Log Out\"\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Danger Zone */}\n              <Card className=\"border-destructive\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-destructive\">\n                    <Trash2 className=\"w-5 h-5 mr-2\" />\n                    Danger Zone\n                  </CardTitle>\n                  <CardDescription>\n                    Irreversible actions for your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\">\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Delete Account\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          This action cannot be undone. This will permanently delete your account\n                          and remove all your data from our servers.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"deletePassword\">Enter your password to confirm</Label>\n                        <Input\n                          id=\"deletePassword\"\n                          type=\"password\"\n                          placeholder=\"Your password\"\n                          value={deletePassword}\n                          onChange={(e) => setDeletePassword(e.target.value)}\n                        />\n                      </div>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel onClick={() => setDeletePassword(\"\")}>\n                          Cancel\n                        </AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={handleDeleteAccount}\n                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                          disabled={deleteAccountMutation.isPending}\n                        >\n                          {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23912},"client/src/contexts/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDark: boolean;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n  isDark: false,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"eunoia-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  const queryClient = useQueryClient();\n\n  // Get user preferences\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  // Update dark mode preference on server\n  const updateDarkModeMutation = useMutation({\n    mutationFn: async (darkMode: boolean) => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/preferences\", {\n        darkMode,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  useEffect(() => {\n    // Sync theme with user preference from database\n    if (user && (user as any).darkMode !== undefined) {\n      const newTheme = (user as any).darkMode ? \"dark\" : \"light\";\n      setTheme(newTheme);\n      localStorage.setItem(storageKey, newTheme);\n    } else if (user === null) {\n      // User is logged out, reset theme to default\n      setTheme(defaultTheme);\n      localStorage.setItem(storageKey, defaultTheme);\n    }\n  }, [user, storageKey, defaultTheme]);\n\n  const value = {\n    theme,\n    setTheme: (newTheme: Theme) => {\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n      \n      // Update preference on server if user is logged in\n      if (user && newTheme !== \"system\") {\n        updateDarkModeMutation.mutate(newTheme === \"dark\");\n      }\n    },\n    isDark: theme === \"dark\" || (theme === \"system\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches),\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":3166},"attached_assets/content-1756446343641.md":{"content":"```json\n{\"error\":\"requested path is invalid\"}\n\n```","size_bytes":50}},"version":1}